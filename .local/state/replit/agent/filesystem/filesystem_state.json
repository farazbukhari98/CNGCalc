{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive CNG (Compressed Natural Gas) fleet conversion calculator built as a full-stack web application. The tool helps fleet managers and business decision-makers analyze the financial and operational impacts of converting their vehicle fleets from traditional gasoline/diesel to CNG. It provides detailed calculations for investment costs, payback periods, fuel savings, emissions reductions, and ROI analysis across different deployment strategies and time horizons.\n\nThe application features an interactive interface with configurable vehicle parameters, station configurations, fuel pricing, and multiple deployment strategies. Users can perform sensitivity analysis, compare different strategies, and export comprehensive reports.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nNumber formatting: Currency values should display 2 decimal places, percentages should display 1 decimal place.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **State Management**: React Context API with multiple specialized contexts (Calculator, Comparison, DarkMode, Tooltip)\n- **Data Visualization**: Recharts library for interactive charts and graphs\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Theme System**: Dynamic theme switching with JSON-based theme configuration\n\n## Backend Architecture\n- **Server**: Express.js with TypeScript for API endpoints\n- **Development**: Hot module replacement via Vite middleware in development mode\n- **Production**: Static file serving with Express for built client assets\n- **Architecture Pattern**: Full-stack monorepo with shared types between client and server\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon Database serverless PostgreSQL for cloud hosting\n- **Schema Management**: Drizzle migrations for database version control\n- **Session Storage**: Connect-pg-simple for PostgreSQL-backed session management\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL storage backend\n- **User Schema**: Basic user table with username/password authentication\n- **Security**: Zod validation for input sanitization and type checking\n\n## Core Business Logic\n- **Calculator Engine**: Complex financial modeling for CNG conversion analysis including:\n  - Multi-vehicle type support (Light, Medium, Heavy duty)\n  - Dynamic annual miles parameters per vehicle type (configurable by user)\n  - Station sizing and cost calculations based on fleet requirements\n  - Fuel efficiency loss calculations for CNG conversion\n  - Maintenance cost differentials between fuel types with diesel deduction factor (5¢/mile)\n  - Emission reduction calculations with industry-standard factors\n- **Deployment Strategies**: Multiple vehicle rollout strategies (Immediate, Phased, Aggressive, Deferred, Manual)\n- **Sensitivity Analysis**: Real-time parameter variation analysis for decision support\n- **Enhanced Comparison Tools**: \n  - Support for comparing up to 6 strategies simultaneously (increased from 4)\n  - Multiple variations of the same strategy type with custom naming\n  - Particularly useful for comparing different manual deployment schedules\n  - Interactive charts showing operational metrics and fuel cost savings deltas\n\n## External Dependencies\n\n- **Database Hosting**: Neon Database for managed PostgreSQL\n- **PDF Generation**: jsPDF and html2canvas for report exports\n- **Date Handling**: date-fns for consistent date manipulation\n- **Form Validation**: React Hook Form with Zod resolvers\n- **Icons**: Lucide React for consistent iconography\n- **Charts**: Recharts for data visualization\n- **UI Components**: Radix UI primitives for accessible components\n- **Build Tools**: esbuild for server bundling, PostCSS for CSS processing","size_bytes":4035},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1069},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport { CalculatorProvider } from \"./contexts/CalculatorContext\";\nimport { ComparisonProvider } from \"./contexts/ComparisonContext\";\nimport { DarkModeProvider } from \"./contexts/DarkModeContext\";\nimport { TooltipProvider } from \"./contexts/TooltipContext\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <DarkModeProvider>\n        <TooltipProvider>\n          <CalculatorProvider>\n            <ComparisonProvider>\n              <Router />\n              <Toaster />\n            </ComparisonProvider>\n          </CalculatorProvider>\n        </TooltipProvider>\n      </DarkModeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1095},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom styles for CNG Calculator */\n.timeline-scroll {\n  max-width: 100%;\n  overflow-x: auto;\n  padding-bottom: 10px;\n}\n\n.year-block {\n  border-top-width: 4px;\n  transition: all 0.2s ease-in-out;\n}\n\n.year-block:hover {\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  transform: translateY(-2px);\n}\n\n.vehicle-type-light {\n  border-top-color: #3b82f6; /* blue-500 */\n}\n\n.vehicle-type-medium {\n  border-top-color: #10b981; /* green-500 */\n}\n\n.vehicle-type-heavy {\n  border-top-color: #ef4444; /* red-500 */\n}\n\n/* Dark mode transitions */\n.dark-mode-transition {\n  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  /* Dark mode styles */\n  .dark {\n    color-scheme: dark;\n  }\n  \n  .dark body {\n    @apply bg-gray-900 text-gray-100;\n  }\n  \n  /* Dark mode card styles */\n  .dark .bg-white {\n    @apply bg-gray-800;\n  }\n  \n  .dark .text-gray-700, \n  .dark .text-gray-800, \n  .dark .text-gray-900 {\n    @apply text-gray-200;\n  }\n  \n  .dark .text-gray-600 {\n    @apply text-gray-400;\n  }\n  \n  .dark .text-gray-500 {\n    @apply text-gray-400;\n  }\n  \n  .dark .bg-gray-50, \n  .dark .bg-gray-100 {\n    @apply bg-gray-700;\n  }\n  \n  .dark .shadow {\n    @apply shadow-gray-950;\n  }\n  \n  .dark .border-gray-200 {\n    @apply border-gray-700;\n  }\n  \n  /* Chart backgrounds */\n  .dark .recharts-cartesian-grid-bg {\n    @apply fill-gray-800;\n  }\n  \n  .dark .recharts-cartesian-grid line {\n    @apply stroke-gray-700;\n  }\n  \n  .dark .recharts-tooltip-wrapper .recharts-default-tooltip {\n    @apply bg-gray-800 border-gray-700 text-gray-200;\n  }\n  \n  /* Alert colors */\n  .dark .bg-amber-50 {\n    @apply bg-amber-900/30;\n  }\n  \n  .dark .text-amber-700, \n  .dark .text-amber-800 {\n    @apply text-amber-300;\n  }\n  \n  .dark .border-amber-200 {\n    @apply border-amber-700;\n  }\n  \n  /* Focus and hover states */\n  .dark .hover\\:bg-gray-200:hover {\n    @apply hover:bg-gray-700;\n  }\n}","size_bytes":2086},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/CalculatorContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { \n  VehicleParameters, \n  StationConfig, \n  FuelPrices,\n  DeploymentStrategy,\n  CalculationResults,\n  VehicleDistribution \n} from \"@/types/calculator\";\nimport { calculateROI, distributeVehicles } from \"@/lib/calculator\";\n\n// Context type\ninterface CalculatorContextType {\n  vehicleParameters: VehicleParameters;\n  stationConfig: StationConfig;\n  fuelPrices: FuelPrices;\n  timeHorizon: number;\n  deploymentStrategy: DeploymentStrategy;\n  vehicleDistribution: VehicleDistribution[] | null;\n  results: CalculationResults | null;\n  sidebarCollapsed: boolean;\n  hideNegativeValues: boolean;\n  \n  updateVehicleParameters: (params: VehicleParameters) => void;\n  updateStationConfig: (config: StationConfig) => void;\n  updateFuelPrices: (prices: FuelPrices) => void;\n  updateTimeHorizon: (years: number) => void;\n  updateDeploymentStrategy: (strategy: DeploymentStrategy) => void;\n  setDistributionStrategy: (strategy: DeploymentStrategy) => void;\n  updateManualDistribution: (year: number, vehicle: Partial<VehicleDistribution>) => void;\n  calculateResults: () => void;\n  toggleSidebar: () => void;\n  toggleHideNegativeValues: () => void;\n}\n\n// Create the context\nconst CalculatorContext = createContext<CalculatorContextType | null>(null);\n\n// Provider component\nexport function CalculatorProvider({ children }: { children: ReactNode }) {\n  // Initial state values\n  const [vehicleParameters, setVehicleParameters] = useState<VehicleParameters>({\n    lightDutyCount: 10,\n    mediumDutyCount: 5,\n    heavyDutyCount: 2,\n    lightDutyCost: 15000,\n    mediumDutyCost: 15000,\n    heavyDutyCost: 50000,\n    // Default values for vehicle lifespan\n    lightDutyLifespan: 10,\n    mediumDutyLifespan: 10,\n    heavyDutyLifespan: 15,\n    // Default values for MPG (Miles Per Gallon)\n    lightDutyMPG: 12,\n    mediumDutyMPG: 10,\n    heavyDutyMPG: 5,\n    // Default values for Annual Miles\n    lightDutyAnnualMiles: 20000,\n    mediumDutyAnnualMiles: 20000,\n    heavyDutyAnnualMiles: 40000,\n    // Default fuel types: light duty gasoline, medium/heavy duty diesel\n    lightDutyFuelType: 'gasoline',\n    mediumDutyFuelType: 'diesel',\n    heavyDutyFuelType: 'diesel'\n  });\n\n  const [stationConfig, setStationConfig] = useState<StationConfig>({\n    stationType: \"fast\",\n    businessType: \"aglc\",\n    turnkey: true, // Default to Yes (upfront cost)\n    sizingMethod: \"total\" // Default to total vehicles\n  });\n\n  const [fuelPrices, setFuelPrices] = useState<FuelPrices>({\n    gasolinePrice: 3.38,\n    dieselPrice: 3.84,\n    cngPrice: 0.82, // Base CNG rate before business rate and electricity cost\n    annualIncrease: 0\n  });\n\n  const [timeHorizon, setTimeHorizon] = useState<number>(15); // Default to 15 years\n  const [deploymentStrategy, setDeploymentStrategy] = useState<DeploymentStrategy>(\"manual\"); // Default to manual distribution\n  const [vehicleDistribution, setVehicleDistribution] = useState<VehicleDistribution[] | null>(null);\n  const [results, setResults] = useState<CalculationResults | null>(null);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState<boolean>(false);\n  const [hideNegativeValues, setHideNegativeValues] = useState<boolean>(false);\n\n  // Automatically recalculate when any parameter changes\n  useEffect(() => {\n    // First, distribute vehicles based on strategy\n    const distribution = distributeVehicles(\n      vehicleParameters,\n      timeHorizon,\n      deploymentStrategy\n    );\n    setVehicleDistribution(distribution);\n    \n    // Then calculate ROI and other metrics\n    if (distribution) {\n      const calculationResults = calculateROI(\n        vehicleParameters,\n        stationConfig,\n        fuelPrices,\n        timeHorizon,\n        deploymentStrategy,\n        distribution\n      );\n      setResults(calculationResults);\n    }\n  }, [vehicleParameters, stationConfig, fuelPrices, timeHorizon, deploymentStrategy]);\n\n  // Method to update vehicle parameters\n  const updateVehicleParameters = (params: VehicleParameters) => {\n    setVehicleParameters(params);\n  };\n\n  // Method to update station configuration\n  const updateStationConfig = (config: StationConfig) => {\n    setStationConfig(config);\n  };\n\n  // Method to update fuel prices\n  const updateFuelPrices = (prices: FuelPrices) => {\n    setFuelPrices(prices);\n  };\n\n  // Method to update time horizon\n  const updateTimeHorizon = (years: number) => {\n    setTimeHorizon(years);\n  };\n\n  // Method to update deployment strategy\n  const updateDeploymentStrategy = (strategy: DeploymentStrategy) => {\n    // Previous strategy\n    const previousStrategy = deploymentStrategy;\n    \n    // Update the strategy state\n    setDeploymentStrategy(strategy);\n    \n    // Always recalculate distribution when strategy changes\n    const distribution = distributeVehicles(\n      vehicleParameters,\n      timeHorizon,\n      strategy\n    );\n    setVehicleDistribution(distribution);\n    \n    // Recalculate results with the new distribution\n    if (distribution) {\n      const calculationResults = calculateROI(\n        vehicleParameters,\n        stationConfig,\n        fuelPrices,\n        timeHorizon,\n        strategy,\n        distribution\n      );\n      setResults(calculationResults);\n    }\n  };\n\n  // Method to change distribution strategy without changing overall deployment strategy\n  const setDistributionStrategy = (strategy: DeploymentStrategy) => {\n    if (strategy !== 'manual') {\n      setDeploymentStrategy(strategy);\n      const distribution = distributeVehicles(\n        vehicleParameters,\n        timeHorizon,\n        strategy\n      );\n      setVehicleDistribution(distribution);\n      \n      // Recalculate with new distribution\n      if (distribution) {\n        const calculationResults = calculateROI(\n          vehicleParameters,\n          stationConfig,\n          fuelPrices,\n          timeHorizon,\n          strategy,\n          distribution\n        );\n        setResults(calculationResults);\n      }\n    }\n  };\n\n  // Method to update manual distribution\n  const updateManualDistribution = (year: number, vehicle: Partial<VehicleDistribution>) => {\n    if (vehicleDistribution && deploymentStrategy === 'manual') {\n      // Create a copy of the current distribution\n      const newDistribution = [...vehicleDistribution];\n      \n      // Update the specified year with the new values\n      const updatedYearData = {\n        ...newDistribution[year - 1],\n        ...vehicle\n      };\n      \n      // Recalculate the investment for this year based on the updated vehicle counts\n      if (vehicle.light !== undefined || vehicle.medium !== undefined || vehicle.heavy !== undefined) {\n        // Get current vehicle counts\n        const light = updatedYearData.light || 0;\n        const medium = updatedYearData.medium || 0;\n        const heavy = updatedYearData.heavy || 0;\n        \n        // Calculate new investment using vehicle costs from parameters\n        const investment = \n          (light * vehicleParameters.lightDutyCost) + \n          (medium * vehicleParameters.mediumDutyCost) + \n          (heavy * vehicleParameters.heavyDutyCost);\n        \n        updatedYearData.investment = investment;\n      }\n      \n      // Update the distribution\n      newDistribution[year - 1] = updatedYearData;\n      \n      // Update the distribution state\n      setVehicleDistribution(newDistribution);\n      \n      // Recalculate results with the new distribution\n      const calculationResults = calculateROI(\n        vehicleParameters,\n        stationConfig,\n        fuelPrices,\n        timeHorizon,\n        deploymentStrategy,\n        newDistribution\n      );\n      setResults(calculationResults);\n    }\n  };\n\n  // Method to calculate ROI and other metrics\n  const calculateResults = () => {\n    // First, distribute vehicles based on strategy\n    const distribution = distributeVehicles(\n      vehicleParameters,\n      timeHorizon,\n      deploymentStrategy\n    );\n    setVehicleDistribution(distribution);\n    \n    // Then calculate ROI and other metrics\n    if (distribution) {\n      const calculationResults = calculateROI(\n        vehicleParameters,\n        stationConfig,\n        fuelPrices,\n        timeHorizon,\n        deploymentStrategy,\n        distribution\n      );\n      setResults(calculationResults);\n    }\n  };\n  \n  // Method to toggle the sidebar\n  const toggleSidebar = () => {\n    setSidebarCollapsed(prev => !prev);\n  };\n\n  // Method to toggle hide negative values\n  const toggleHideNegativeValues = () => {\n    setHideNegativeValues(prev => !prev);\n  };\n\n  // Context value\n  const value = {\n    vehicleParameters,\n    stationConfig,\n    fuelPrices,\n    timeHorizon,\n    deploymentStrategy,\n    vehicleDistribution,\n    results,\n    sidebarCollapsed,\n    hideNegativeValues,\n    \n    updateVehicleParameters,\n    updateStationConfig,\n    updateFuelPrices,\n    updateTimeHorizon,\n    updateDeploymentStrategy,\n    setDistributionStrategy,\n    updateManualDistribution,\n    calculateResults,\n    toggleSidebar,\n    toggleHideNegativeValues\n  };\n\n  return (\n    <CalculatorContext.Provider value={value}>\n      {children}\n    </CalculatorContext.Provider>\n  );\n}\n\n// Custom hook for using the calculator context\nexport function useCalculator() {\n  const context = useContext(CalculatorContext);\n  if (!context) {\n    throw new Error(\"useCalculator must be used within a CalculatorProvider\");\n  }\n  return context;\n}\n","size_bytes":9405},"client/src/contexts/ComparisonContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\nimport { CalculationResults, DeploymentStrategy } from \"@/types/calculator\";\n\ninterface ComparisonItem {\n  id: string;\n  strategy: DeploymentStrategy;\n  strategyName: string;\n  customName?: string; // Allow custom naming for variations\n  results: CalculationResults;\n  manualDistribution?: number[][]; // Store manual distribution if applicable\n}\n\ninterface ComparisonContextType {\n  comparisonItems: ComparisonItem[];\n  addComparisonItem: (\n    strategy: DeploymentStrategy, \n    results: CalculationResults, \n    customName?: string,\n    manualDistribution?: number[][]\n  ) => void;\n  removeComparisonItem: (id: string) => void;\n  clearComparisonItems: () => void;\n  isInComparison: (strategy: DeploymentStrategy) => boolean;\n  canAddMoreComparisons: () => boolean;\n}\n\nconst ComparisonContext = createContext<ComparisonContextType | undefined>(undefined);\n\nexport function ComparisonProvider({ children }: { children: ReactNode }) {\n  const [comparisonItems, setComparisonItems] = useState<ComparisonItem[]>([]);\n\n  const getStrategyName = (strategy: DeploymentStrategy): string => {\n    const strategyNames: Record<DeploymentStrategy, string> = {\n      immediate: \"Immediate Deployment\",\n      phased: \"Phased Deployment\",\n      aggressive: \"Aggressive Early\",\n      deferred: \"Deferred Deployment\",\n      manual: \"Manual Distribution\"\n    };\n    return strategyNames[strategy];\n  };\n\n  const addComparisonItem = (\n    strategy: DeploymentStrategy, \n    results: CalculationResults, \n    customName?: string,\n    manualDistribution?: number[][]\n  ) => {\n    // Only allow 6 comparison items max (increased to support multiple variations)\n    if (comparisonItems.length >= 6) {\n      return;\n    }\n\n    // Generate a unique display name\n    const baseStrategyName = getStrategyName(strategy);\n    let displayName = customName || baseStrategyName;\n    \n    // If no custom name and strategy already exists, add a number suffix\n    if (!customName) {\n      const existingCount = comparisonItems.filter(item => item.strategy === strategy).length;\n      if (existingCount > 0) {\n        displayName = `${baseStrategyName} ${existingCount + 1}`;\n      }\n    }\n\n    const newItem: ComparisonItem = {\n      id: `${strategy}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      strategy,\n      strategyName: displayName,\n      customName,\n      results,\n      manualDistribution\n    };\n\n    setComparisonItems([...comparisonItems, newItem]);\n  };\n\n  const removeComparisonItem = (id: string) => {\n    setComparisonItems(comparisonItems.filter(item => item.id !== id));\n  };\n\n  const clearComparisonItems = () => {\n    setComparisonItems([]);\n  };\n\n  const isInComparison = (strategy: DeploymentStrategy) => {\n    // For non-manual strategies, only check if any version exists\n    if (strategy !== 'manual') {\n      return comparisonItems.some(item => item.strategy === strategy);\n    }\n    // For manual strategies, always allow more since each can be different\n    return false;\n  };\n\n  const canAddMoreComparisons = () => {\n    return comparisonItems.length < 6;\n  };\n\n  return (\n    <ComparisonContext.Provider\n      value={{\n        comparisonItems,\n        addComparisonItem,\n        removeComparisonItem,\n        clearComparisonItems,\n        isInComparison,\n        canAddMoreComparisons\n      }}\n    >\n      {children}\n    </ComparisonContext.Provider>\n  );\n}\n\nexport function useComparison() {\n  const context = useContext(ComparisonContext);\n  if (context === undefined) {\n    throw new Error(\"useComparison must be used within a ComparisonProvider\");\n  }\n  return context;\n}","size_bytes":3663},"client/src/contexts/DarkModeContext.tsx":{"content":"import { createContext, useState, useContext, useEffect, ReactNode } from \"react\";\n\ntype DarkModeContextType = {\n  darkMode: boolean;\n  toggleDarkMode: () => void;\n};\n\nconst DarkModeContext = createContext<DarkModeContextType | undefined>(undefined);\n\nexport function DarkModeProvider({ children }: { children: ReactNode }) {\n  // Check if user has a preference in localStorage, otherwise use system preference\n  const [darkMode, setDarkMode] = useState<boolean>(() => {\n    const savedPreference = localStorage.getItem(\"darkMode\");\n    if (savedPreference !== null) {\n      return savedPreference === \"true\";\n    }\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  });\n\n  // Update the document class when darkMode changes\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"darkMode\", darkMode.toString());\n  }, [darkMode]);\n\n  // Add listener for system preference changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const handleChange = (e: MediaQueryListEvent) => {\n      const savedPreference = localStorage.getItem(\"darkMode\");\n      if (savedPreference === null) {\n        setDarkMode(e.matches);\n      }\n    };\n\n    mediaQuery.addEventListener(\"change\", handleChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleChange);\n  }, []);\n\n  const toggleDarkMode = () => {\n    setDarkMode((prev) => !prev);\n  };\n\n  return (\n    <DarkModeContext.Provider value={{ darkMode, toggleDarkMode }}>\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n\nexport function useDarkMode() {\n  const context = useContext(DarkModeContext);\n  if (context === undefined) {\n    throw new Error(\"useDarkMode must be used within a DarkModeProvider\");\n  }\n  return context;\n}","size_bytes":1899},"client/src/contexts/TooltipContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ntype TooltipContextType = {\n  showDetailedTooltips: boolean;\n  toggleDetailedTooltips: () => void;\n};\n\nconst TooltipContext = createContext<TooltipContextType | null>(null);\n\nexport function TooltipProvider({ children }: { children: ReactNode }) {\n  const [showDetailedTooltips, setShowDetailedTooltips] = useState<boolean>(false);\n\n  const toggleDetailedTooltips = () => {\n    setShowDetailedTooltips((prev) => !prev);\n  };\n\n  return (\n    <TooltipContext.Provider value={{ showDetailedTooltips, toggleDetailedTooltips }}>\n      {children}\n    </TooltipContext.Provider>\n  );\n}\n\nexport function useTooltips() {\n  const context = useContext(TooltipContext);\n  if (!context) {\n    throw new Error(\"useTooltips must be used within a TooltipProvider\");\n  }\n  return context;\n}","size_bytes":846},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/calculator.ts":{"content":"import { \n  VehicleParameters, \n  StationConfig, \n  FuelPrices, \n  DeploymentStrategy, \n  VehicleDistribution, \n  CalculationResults \n} from \"@/types/calculator\";\n\n// Get vehicle costs from vehicleParameters (for compatibility with old code we'll create a helper function)\nconst getVehicleCosts = (vehicleParams: VehicleParameters) => {\n  return {\n    light: vehicleParams.lightDutyCost, // CNG conversion cost for light duty vehicles\n    medium: vehicleParams.mediumDutyCost, // CNG conversion cost for medium duty vehicles\n    heavy: vehicleParams.heavyDutyCost   // CNG conversion cost for heavy duty vehicles\n  };\n};\n\n// Diesel deduction factor (5 cents per mile)\nconst DIESEL_DEDUCTION_PER_MILE = 0.05;\n\n// CNG efficiency loss percentage\nconst CNG_LOSS = {\n  light: 0.05,   // 5% loss\n  medium: 0.075, // 7.5% loss\n  heavy: 0.10    // 10% loss\n};\n\n// Maintenance costs (per mile)\nconst MAINTENANCE_COST = {\n  gasoline: 0.47,\n  diesel: 0.52,\n  cng: 0.47 // Same as gasoline\n};\n\n// Business rates (markup percentage applied to CNG price)\nconst BUSINESS_RATES = {\n  aglc: 0.18,   // 18% for AGLC\n  cgc: 0.192,   // 19.2% for CGC\n  vng: 0.18     // 18% for VNG (same as AGLC for now)\n};\n\n// Emission factors in kg CO2 per gallon (updated values)\nconst EMISSION_FACTORS = {\n  gasoline: 8.887,    // kg CO₂/gallon for light duty\n  dieselMedium: 10.180, // kg CO₂/gallon for medium duty\n  dieselHeavy: 10.180,  // kg CO₂/gallon for heavy duty (updated to match medium)\n  cng: 5.511         // kg CO₂/GGE\n};\n\n// Station sizing and cost data\nconst FAST_FILL_STATIONS = [\n  { size: 1, capacity: 100, cost: 1828172 },\n  { size: 2, capacity: 72001, cost: 2150219 },\n  { size: 3, capacity: 192001, cost: 2694453 },\n  { size: 4, capacity: 384001, cost: 2869245 },\n  { size: 5, capacity: 576001, cost: 3080351 }\n];\n\nconst TIME_FILL_STATIONS = [\n  { size: 6, capacity: 100, cost: 491333 },\n  { size: 1, capacity: 12961, cost: 1831219 },\n  { size: 2, capacity: 108001, cost: 2218147 },\n  { size: 3, capacity: 288001, cost: 2907603 },\n  { size: 4, capacity: 576001, cost: 3200857 },\n  { size: 5, capacity: 864001, cost: 3506651 }\n];\n\n// Helper function to find peak year vehicle count from vehicle distribution\nfunction getPeakYearVehicleCount(vehicleDistribution: VehicleDistribution[] | null): { lightDutyCount: number, mediumDutyCount: number, heavyDutyCount: number } {\n  if (!vehicleDistribution || vehicleDistribution.length === 0) {\n    return { lightDutyCount: 0, mediumDutyCount: 0, heavyDutyCount: 0 };\n  }\n\n  let maxLight = 0;\n  let maxMedium = 0;\n  let maxHeavy = 0;\n\n  // Find the maximum vehicle count across all years for each type\n  vehicleDistribution.forEach(year => {\n    maxLight = Math.max(maxLight, year.light || 0);\n    maxMedium = Math.max(maxMedium, year.medium || 0);\n    maxHeavy = Math.max(maxHeavy, year.heavy || 0);\n  });\n\n  return {\n    lightDutyCount: maxLight,\n    mediumDutyCount: maxMedium,\n    heavyDutyCount: maxHeavy\n  };\n}\n\n// Station cost calculation\nexport function calculateStationCost(config: StationConfig, vehicleParams?: VehicleParameters, vehicleDistribution?: VehicleDistribution[] | null): number {\n  // If no vehicle params provided, return default costs\n  if (!vehicleParams) {\n    const defaultCost = config.stationType === 'fast' ? 2200000 : 1200000; // Default to medium size\n    // Apply turnkey markup if applicable\n    const turnkeyMultiplier = config.turnkey ? 1.2 : 1.0; // 20% markup for turnkey\n    return Math.round(defaultCost * turnkeyMultiplier);\n  }\n  \n  // Determine vehicle counts based on sizing method\n  let vehicleCounts: { lightDutyCount: number, mediumDutyCount: number, heavyDutyCount: number };\n  \n  if (config.sizingMethod === 'peak' && vehicleDistribution) {\n    // Use peak year vehicle counts from deployment strategy\n    vehicleCounts = getPeakYearVehicleCount(vehicleDistribution);\n  } else {\n    // Use total vehicle counts (default behavior)\n    vehicleCounts = {\n      lightDutyCount: vehicleParams.lightDutyCount,\n      mediumDutyCount: vehicleParams.mediumDutyCount,\n      heavyDutyCount: vehicleParams.heavyDutyCount\n    };\n  }\n\n  // Calculate annual GGE (Gasoline Gallon Equivalent) consumption\n  // Formula: (Annual Miles / (MPG × CNG Efficiency Factor)) × Vehicle Count\n  \n  // CNG efficiency factors (fuel economy reduction)\n  const cngEfficiencyFactors = {\n    light: 0.95,    // 95% efficiency (5% reduction)\n    medium: 0.925,  // 92.5% efficiency (7.5% reduction)  \n    heavy: 0.90     // 90% efficiency (10% reduction)\n  };\n  \n  // Calculate annual GGE per vehicle type\n  const lightAnnualGGE = vehicleParams.lightDutyAnnualMiles / (vehicleParams.lightDutyMPG * cngEfficiencyFactors.light);\n  const mediumAnnualGGE = vehicleParams.mediumDutyAnnualMiles / (vehicleParams.mediumDutyMPG * cngEfficiencyFactors.medium);\n  const heavyAnnualGGE = vehicleParams.heavyDutyAnnualMiles / (vehicleParams.heavyDutyMPG * cngEfficiencyFactors.heavy);\n  \n  // Total annual GGE consumption for the fleet\n  const annualGGE = \n    (vehicleCounts.lightDutyCount * lightAnnualGGE) + \n    (vehicleCounts.mediumDutyCount * mediumAnnualGGE) + \n    (vehicleCounts.heavyDutyCount * heavyAnnualGGE);\n  \n  // Get capacity tier for pricing based on annual GGE consumption\n  const getCapacityTier = () => {\n    if (annualGGE < 73000) return 'small';        // < 200 GGE/day equivalent\n    if (annualGGE < 182135) return 'medium';      // 200-499 GGE/day equivalent\n    if (annualGGE < 291635) return 'large';       // 500-799 GGE/day equivalent\n    return 'xlarge';                              // 800+ GGE/day equivalent\n  };\n  \n  const tier = getCapacityTier();\n  \n  // Tiered pricing based on capacity\n  const baseCosts = {\n    fast: {\n      small: 1800000,    // $1.8M for small fast-fill\n      medium: 2200000,   // $2.2M for medium fast-fill\n      large: 2700000,    // $2.7M for large fast-fill\n      xlarge: 3100000    // $3.1M for extra large fast-fill\n    },\n    time: {\n      small: 491000,     // $491K for small time-fill\n      medium: 1200000,   // $1.2M for medium time-fill\n      large: 2100000,    // $2.1M for large time-fill\n      xlarge: 3500000    // $3.5M for extra large time-fill\n    }\n  };\n  \n  // Get base cost from the pricing tiers\n  const baseCost = baseCosts[config.stationType][tier];\n  \n  // Apply business type adjustment\n  const businessMultiplier = config.businessType === 'cgc' ? 0.95 : 1.0; // CGC is 0.95, AGLC and VNG are 1.0\n  \n  // Apply turnkey markup\n  const turnkeyMultiplier = config.turnkey ? 1.2 : 1.0; // 20% markup for turnkey\n  \n  return Math.round(baseCost * businessMultiplier * turnkeyMultiplier);\n}\n\n// Distribute vehicles across years based on strategy\nexport function distributeVehicles(\n  vehicleParams: VehicleParameters,\n  timeHorizon: number,\n  strategy: DeploymentStrategy\n): VehicleDistribution[] {\n  const { lightDutyCount, mediumDutyCount, heavyDutyCount } = vehicleParams;\n  const vehicleCosts = getVehicleCosts(vehicleParams);\n  const distribution: VehicleDistribution[] = [];\n  \n  // Ensure distribution has elements for the full time horizon\n  const ensureFullTimeHorizon = (dist: VehicleDistribution[]): VehicleDistribution[] => {\n    while (dist.length < timeHorizon) {\n      dist.push({\n        light: 0,\n        medium: 0,\n        heavy: 0,\n        investment: 0\n      });\n    }\n    return dist;\n  };\n  \n  if (strategy === 'immediate') {\n    // All vehicles in first year, none in subsequent years\n    const firstYearInvestment = \n      (lightDutyCount * vehicleCosts.light) + \n      (mediumDutyCount * vehicleCosts.medium) + \n      (heavyDutyCount * vehicleCosts.heavy);\n    \n    distribution.push({\n      light: lightDutyCount,\n      medium: mediumDutyCount,\n      heavy: heavyDutyCount,\n      investment: firstYearInvestment\n    });\n    \n    // Add empty years for the rest of the timeline\n    for (let i = 1; i < timeHorizon; i++) {\n      distribution.push({\n        light: 0,\n        medium: 0,\n        heavy: 0,\n        investment: 0\n      });\n    }\n  } else if (strategy === 'phased') {\n    // Evenly distribute vehicles across years\n    const lightPerYear = Math.ceil(lightDutyCount / timeHorizon);\n    const mediumPerYear = Math.ceil(mediumDutyCount / timeHorizon);\n    const heavyPerYear = Math.ceil(heavyDutyCount / timeHorizon);\n    \n    let remainingLight = lightDutyCount;\n    let remainingMedium = mediumDutyCount;\n    let remainingHeavy = heavyDutyCount;\n    \n    for (let i = 0; i < timeHorizon; i++) {\n      const lightThisYear = Math.min(lightPerYear, remainingLight);\n      const mediumThisYear = Math.min(mediumPerYear, remainingMedium);\n      const heavyThisYear = Math.min(heavyPerYear, remainingHeavy);\n      \n      remainingLight -= lightThisYear;\n      remainingMedium -= mediumThisYear;\n      remainingHeavy -= heavyThisYear;\n      \n      const yearInvestment = \n        (lightThisYear * vehicleCosts.light) + \n        (mediumThisYear * vehicleCosts.medium) + \n        (heavyThisYear * vehicleCosts.heavy);\n      \n      distribution.push({\n        light: lightThisYear,\n        medium: mediumThisYear,\n        heavy: heavyThisYear,\n        investment: yearInvestment\n      });\n    }\n  } else if (strategy === 'aggressive') {\n    // Front-load: 50% in first year, then distribute the rest\n    const firstYearLight = Math.ceil(lightDutyCount * 0.5);\n    const firstYearMedium = Math.ceil(mediumDutyCount * 0.5);\n    const firstYearHeavy = Math.ceil(heavyDutyCount * 0.5);\n    \n    const firstYearInvestment = \n      (firstYearLight * vehicleCosts.light) + \n      (firstYearMedium * vehicleCosts.medium) + \n      (firstYearHeavy * vehicleCosts.heavy);\n    \n    distribution.push({\n      light: firstYearLight,\n      medium: firstYearMedium,\n      heavy: firstYearHeavy,\n      investment: firstYearInvestment\n    });\n    \n    // Distribute remaining vehicles across remaining years\n    const remainingLight = lightDutyCount - firstYearLight;\n    const remainingMedium = mediumDutyCount - firstYearMedium;\n    const remainingHeavy = heavyDutyCount - firstYearHeavy;\n    \n    const remainingYears = timeHorizon - 1;\n    \n    if (remainingYears > 0) {\n      const lightPerYear = Math.ceil(remainingLight / remainingYears);\n      const mediumPerYear = Math.ceil(remainingMedium / remainingYears);\n      const heavyPerYear = Math.ceil(remainingHeavy / remainingYears);\n      \n      let rLight = remainingLight;\n      let rMedium = remainingMedium;\n      let rHeavy = remainingHeavy;\n      \n      for (let i = 0; i < remainingYears; i++) {\n        const lightThisYear = Math.min(lightPerYear, rLight);\n        const mediumThisYear = Math.min(mediumPerYear, rMedium);\n        const heavyThisYear = Math.min(heavyPerYear, rHeavy);\n        \n        rLight -= lightThisYear;\n        rMedium -= mediumThisYear;\n        rHeavy -= heavyThisYear;\n        \n        const yearInvestment = \n          (lightThisYear * vehicleCosts.light) + \n          (mediumThisYear * vehicleCosts.medium) + \n          (heavyThisYear * vehicleCosts.heavy);\n        \n        distribution.push({\n          light: lightThisYear,\n          medium: mediumThisYear,\n          heavy: heavyThisYear,\n          investment: yearInvestment\n        });\n      }\n    }\n    \n    // Ensure we have distribution entries for all years\n    ensureFullTimeHorizon(distribution);\n  } else if (strategy === 'deferred') {\n    // Back-load: Minimal in early years, 50% in final year\n    const finalYearLight = Math.ceil(lightDutyCount * 0.5);\n    const finalYearMedium = Math.ceil(mediumDutyCount * 0.5);\n    const finalYearHeavy = Math.ceil(heavyDutyCount * 0.5);\n    \n    const remainingLight = lightDutyCount - finalYearLight;\n    const remainingMedium = mediumDutyCount - finalYearMedium;\n    const remainingHeavy = heavyDutyCount - finalYearHeavy;\n    \n    const earlierYears = timeHorizon - 1;\n    \n    if (earlierYears > 0) {\n      const lightPerYear = Math.ceil(remainingLight / earlierYears);\n      const mediumPerYear = Math.ceil(remainingMedium / earlierYears);\n      const heavyPerYear = Math.ceil(remainingHeavy / earlierYears);\n      \n      let rLight = remainingLight;\n      let rMedium = remainingMedium;\n      let rHeavy = remainingHeavy;\n      \n      for (let i = 0; i < earlierYears; i++) {\n        const lightThisYear = Math.min(lightPerYear, rLight);\n        const mediumThisYear = Math.min(mediumPerYear, rMedium);\n        const heavyThisYear = Math.min(heavyPerYear, rHeavy);\n        \n        rLight -= lightThisYear;\n        rMedium -= mediumThisYear;\n        rHeavy -= heavyThisYear;\n        \n        const yearInvestment = \n          (lightThisYear * vehicleCosts.light) + \n          (mediumThisYear * vehicleCosts.medium) + \n          (heavyThisYear * vehicleCosts.heavy);\n        \n        distribution.push({\n          light: lightThisYear,\n          medium: mediumThisYear,\n          heavy: heavyThisYear,\n          investment: yearInvestment\n        });\n      }\n    }\n    \n    // Add the final year with the heavy investment\n    const finalYearInvestment = \n      (finalYearLight * vehicleCosts.light) + \n      (finalYearMedium * vehicleCosts.medium) + \n      (finalYearHeavy * vehicleCosts.heavy);\n    \n    distribution.push({\n      light: finalYearLight,\n      medium: finalYearMedium,\n      heavy: finalYearHeavy,\n      investment: finalYearInvestment\n    });\n    \n    // Ensure we have distribution entries for all years\n    ensureFullTimeHorizon(distribution);\n  } else if (strategy === 'manual') {\n    // For manual distribution, initialize with placeholder values \n    // that will be updated by the user input\n    for (let i = 0; i < timeHorizon; i++) {\n      // For initial setup, evenly distribute vehicles\n      const lightThisYear = Math.ceil(lightDutyCount / timeHorizon);\n      const mediumThisYear = Math.ceil(mediumDutyCount / timeHorizon);\n      const heavyThisYear = Math.ceil(heavyDutyCount / timeHorizon);\n      \n      const yearInvestment = \n        (lightThisYear * vehicleCosts.light) + \n        (mediumThisYear * vehicleCosts.medium) + \n        (heavyThisYear * vehicleCosts.heavy);\n      \n      distribution.push({\n        light: lightThisYear,\n        medium: mediumThisYear,\n        heavy: heavyThisYear,\n        investment: yearInvestment\n      });\n    }\n  } else {\n    // Default to phased strategy if the strategy is unknown\n    return distributeVehicles(vehicleParams, timeHorizon, 'phased');\n  }\n  \n  return distribution;\n}\n\n// Calculate ROI and other financial metrics\nexport function calculateROI(\n  vehicleParams: VehicleParameters,\n  stationConfig: StationConfig,\n  fuelPrices: FuelPrices,\n  timeHorizon: number,\n  strategy: DeploymentStrategy,\n  vehicleDistribution: VehicleDistribution[]\n): CalculationResults {\n  // Create fuel efficiency object from vehicle parameters (no efficiency loss for CNG)\n  const FUEL_EFFICIENCY = {\n    light: { \n      gasoline: vehicleParams.lightDutyMPG,\n      diesel: vehicleParams.lightDutyMPG,\n      cng: vehicleParams.lightDutyMPG \n    },\n    medium: { \n      gasoline: vehicleParams.mediumDutyMPG,\n      diesel: vehicleParams.mediumDutyMPG, \n      cng: vehicleParams.mediumDutyMPG \n    },\n    heavy: { \n      gasoline: vehicleParams.heavyDutyMPG,\n      diesel: vehicleParams.heavyDutyMPG, \n      cng: vehicleParams.heavyDutyMPG \n    }\n  };\n  // Calculate total vehicle investment\n  const vehicleCosts = getVehicleCosts(vehicleParams);\n  const totalVehicleInvestment = \n    (vehicleParams.lightDutyCount * vehicleCosts.light) + \n    (vehicleParams.mediumDutyCount * vehicleCosts.medium) + \n    (vehicleParams.heavyDutyCount * vehicleCosts.heavy);\n  \n  // Calculate station cost based on vehicle parameters\n  const stationCost = calculateStationCost(stationConfig, vehicleParams, vehicleDistribution);\n  \n  // Total investment - only include station cost upfront if turnkey is true\n  const totalInvestment = totalVehicleInvestment + (stationConfig.turnkey ? stationCost : 0);\n  \n  // Ensure the vehicleDistribution array is long enough\n  // (this should be handled already by distributeVehicles, but ensuring it here too)\n  const ensuredDistribution = [...vehicleDistribution];\n  while (ensuredDistribution.length < timeHorizon) {\n    ensuredDistribution.push({\n      light: 0,\n      medium: 0,\n      heavy: 0,\n      investment: 0\n    });\n  }\n  \n  // Calculate yearly savings\n  const yearlySavings: number[] = [];\n  const yearlyFuelSavings: number[] = [];\n  const yearlyMaintenanceSavings: number[] = [];\n  const yearlyTariffFees: number[] = [];\n  const cumulativeSavings: number[] = [];\n  const cumulativeInvestment: number[] = [];\n  \n  // When turnkey is true, station cost is applied upfront\n  // When turnkey is false, station cost is $0 upfront (not included in cumulativeInvestment)\n  let cumulativeInvestmentToDate = stationConfig.turnkey ? stationCost : 0;\n  \n  // Monthly LDC investment tariff rates (as decimal) - 1.5% for AGLC/VNG, 1.6% for CGC\n  // For non-TurnKey, this is a fixed monthly percentage of the station cost\n  const monthlyTariffRate = stationConfig.businessType === 'cgc' ? 0.016 : 0.015; // CGC is 1.6%, AGLC and VNG are 1.5%\n  // Annual tariff amount (monthly rate * 12 months)\n  const annualTariffRate = monthlyTariffRate * 12;\n  \n  for (let year = 0; year < timeHorizon; year++) {\n    // Calculate number of each vehicle type in operation this year (cumulative)\n    let lightInOperation = 0;\n    let mediumInOperation = 0;\n    let heavyInOperation = 0;\n    \n    for (let i = 0; i <= year && i < ensuredDistribution.length; i++) {\n      lightInOperation += ensuredDistribution[i].light || 0;\n      mediumInOperation += ensuredDistribution[i].medium || 0;\n      heavyInOperation += ensuredDistribution[i].heavy || 0;\n    }\n    \n    // Factor in annual fuel price increase\n    const yearMultiplier = Math.pow(1 + (fuelPrices.annualIncrease / 100), year);\n    const adjustedGasolinePrice = fuelPrices.gasolinePrice * yearMultiplier;\n    const adjustedDieselPrice = fuelPrices.dieselPrice * yearMultiplier;\n    \n    // Calculate CNG price without business rate (electricity already included in base price)\n    const baseCngPrice = fuelPrices.cngPrice;\n    const adjustedCngPrice = baseCngPrice * yearMultiplier;\n    \n    // Calculate fuel savings for each vehicle type using proper fuel efficiency accounting\n    const lightConventionalPrice = vehicleParams.lightDutyFuelType === 'gasoline' ? adjustedGasolinePrice : adjustedDieselPrice;\n    const lightConventionalEfficiency = vehicleParams.lightDutyFuelType === 'gasoline' ? FUEL_EFFICIENCY.light.gasoline : FUEL_EFFICIENCY.light.diesel;\n    const lightFuelSavings = \n      ((lightInOperation * vehicleParams.lightDutyAnnualMiles) / lightConventionalEfficiency) * lightConventionalPrice -\n      ((lightInOperation * vehicleParams.lightDutyAnnualMiles) / FUEL_EFFICIENCY.light.cng) * adjustedCngPrice;\n    \n    const mediumConventionalPrice = vehicleParams.mediumDutyFuelType === 'gasoline' ? adjustedGasolinePrice : adjustedDieselPrice;\n    const mediumConventionalEfficiency = vehicleParams.mediumDutyFuelType === 'gasoline' ? FUEL_EFFICIENCY.medium.gasoline : FUEL_EFFICIENCY.medium.diesel;\n    const mediumFuelSavings = \n      ((mediumInOperation * vehicleParams.mediumDutyAnnualMiles) / mediumConventionalEfficiency) * mediumConventionalPrice -\n      ((mediumInOperation * vehicleParams.mediumDutyAnnualMiles) / FUEL_EFFICIENCY.medium.cng) * adjustedCngPrice;\n    \n    const heavyConventionalPrice = vehicleParams.heavyDutyFuelType === 'gasoline' ? adjustedGasolinePrice : adjustedDieselPrice;\n    const heavyConventionalEfficiency = vehicleParams.heavyDutyFuelType === 'gasoline' ? FUEL_EFFICIENCY.heavy.gasoline : FUEL_EFFICIENCY.heavy.diesel;\n    const heavyFuelSavings = \n      ((heavyInOperation * vehicleParams.heavyDutyAnnualMiles) / heavyConventionalEfficiency) * heavyConventionalPrice -\n      ((heavyInOperation * vehicleParams.heavyDutyAnnualMiles) / FUEL_EFFICIENCY.heavy.cng) * adjustedCngPrice;\n    \n    // Calculate maintenance savings based on miles driven using vehicle-specific annual miles\n    const lightMilesDriven = lightInOperation * vehicleParams.lightDutyAnnualMiles;\n    const mediumMilesDriven = mediumInOperation * vehicleParams.mediumDutyAnnualMiles;\n    const heavyMilesDriven = heavyInOperation * vehicleParams.heavyDutyAnnualMiles;\n    \n    // Maintenance savings: $0.05 per mile for diesel vehicles only\n    const lightMaintenanceSavings = vehicleParams.lightDutyFuelType === 'diesel' ? lightMilesDriven * DIESEL_DEDUCTION_PER_MILE : 0;\n    const mediumMaintenanceSavings = vehicleParams.mediumDutyFuelType === 'diesel' ? mediumMilesDriven * DIESEL_DEDUCTION_PER_MILE : 0;\n    const heavyMaintenanceSavings = vehicleParams.heavyDutyFuelType === 'diesel' ? heavyMilesDriven * DIESEL_DEDUCTION_PER_MILE : 0;\n    \n    const maintenanceSavings = lightMaintenanceSavings + mediumMaintenanceSavings + heavyMaintenanceSavings;\n    \n    // Calculate annual LDC investment tariff for non-turnkey option\n    // This is a fixed monthly cost that continues for the entire period\n    let annualTariffFee = 0;\n    if (!stationConfig.turnkey) {\n      annualTariffFee = stationCost * annualTariffRate;\n    }\n    \n    // Separate fuel and maintenance savings (before tariff fees)\n    const totalFuelSavings = lightFuelSavings + mediumFuelSavings + heavyFuelSavings;\n    \n    // Total savings for the year (subtract tariff fee if applicable)\n    const yearSavings = totalFuelSavings + maintenanceSavings - annualTariffFee;\n    \n    yearlySavings.push(Math.round(yearSavings));\n    yearlyFuelSavings.push(Math.round(totalFuelSavings));\n    yearlyMaintenanceSavings.push(Math.round(maintenanceSavings));\n    yearlyTariffFees.push(Math.round(annualTariffFee));\n    \n    // Update cumulative savings\n    const prevCumulativeSavings = year > 0 ? cumulativeSavings[year - 1] : 0;\n    cumulativeSavings.push(Math.round(prevCumulativeSavings + yearSavings));\n    \n    // Update cumulative investment\n    const yearInvestment = year < ensuredDistribution.length ? ensuredDistribution[year].investment : 0;\n    cumulativeInvestmentToDate += yearInvestment;\n    cumulativeInvestment.push(Math.round(cumulativeInvestmentToDate));\n  }\n  \n  // Calculate payback period - find when cumulative savings exceeds investment\n  let paybackPeriod = -1; // Default to -1 which will indicate no payback is possible\n  \n  // Check if it ever pays back within the analysis period\n  for (let i = 0; i < timeHorizon; i++) {\n    if (cumulativeSavings[i] >= cumulativeInvestment[i]) {\n      // Simple linear interpolation for partial year\n      if (i > 0) {\n        const previousGap = cumulativeInvestment[i-1] - cumulativeSavings[i-1];\n        const currentOverage = cumulativeSavings[i] - cumulativeInvestment[i];\n        const fractionalYear = i - (previousGap / (previousGap + currentOverage));\n        paybackPeriod = Math.max(1, fractionalYear); // Ensure at least 1 year\n      } else {\n        paybackPeriod = 1; // If it pays back in first year\n      }\n      break;\n    }\n  }\n  \n  // If no payback within time horizon, calculate projected payback\n  // by extrapolating from the final years' trend\n  if (paybackPeriod === -1 && timeHorizon > 1) {\n    // Check if savings are still growing in the final years\n    const finalYearSavingsGrowth = cumulativeSavings[timeHorizon-1] - cumulativeSavings[timeHorizon-2];\n    \n    if (finalYearSavingsGrowth > 0) {\n      // Get final gap between investment and savings\n      const gap = cumulativeInvestment[timeHorizon-1] - cumulativeSavings[timeHorizon-1];\n      \n      // Calculate additional years needed to reach payback based on final year's growth rate\n      const additionalYearsToPayback = gap / finalYearSavingsGrowth;\n      \n      // Only return a projected payback if it's reasonably achievable (within 50 years total)\n      if (timeHorizon + additionalYearsToPayback <= 50) {\n        paybackPeriod = timeHorizon + additionalYearsToPayback;\n      }\n    }\n  }\n  \n  // Calculate ROI at the end of the analysis period\n  const finalSavings = cumulativeSavings[timeHorizon - 1];\n  const roi = (finalSavings / totalInvestment) * 100;\n  \n  // Annual rate of return\n  const annualRateOfReturn = (Math.pow((finalSavings / totalInvestment) + 1, 1 / timeHorizon) - 1) * 100;\n  \n  // Calculate net cash flow at the end of the analysis period\n  const netCashFlow = finalSavings - totalInvestment;\n  \n  // Calculate annual fuel savings (average)\n  const annualFuelSavings = finalSavings / timeHorizon;\n  \n  // Calculate CO2 emissions and reduction\n  // Use the defined emission factors at the top of the file\n  \n  // Emission factors for vehicles (g CO2 per mile) - more precise calculation\n  const VEHICLE_EMISSION_FACTORS = {\n    light: {\n      gasoline: 404, // g CO2 per mile for light-duty gasoline vehicles\n      cng: 303       // g CO2 per mile for light-duty CNG vehicles\n    },\n    medium: {\n      diesel: 690,   // g CO2 per mile for medium-duty diesel vehicles  \n      cng: 520       // g CO2 per mile for medium-duty CNG vehicles\n    },\n    heavy: {\n      diesel: 690,   // g CO2 per mile for heavy-duty diesel vehicles (updated to match medium-duty)\n      cng: 520       // g CO2 per mile for heavy-duty CNG vehicles (updated to match medium-duty)\n    }\n  };\n\n  // Calculate total emissions for conventional fuels vs CNG\n  let totalConventionalEmissions = 0;\n  let totalCngEmissions = 0;\n  let yearlyEmissionsSaved: number[] = [];\n  let cumulativeEmissionsSaved: number[] = [];\n  let cumulativeEmissionsSavedToDate = 0;\n\n  for (let year = 0; year < timeHorizon; year++) {\n    // Calculate number of each vehicle type in operation this year (cumulative)\n    let lightInOperation = 0;\n    let mediumInOperation = 0;\n    let heavyInOperation = 0;\n    \n    for (let i = 0; i <= year && i < ensuredDistribution.length; i++) {\n      lightInOperation += ensuredDistribution[i].light || 0;\n      mediumInOperation += ensuredDistribution[i].medium || 0;\n      heavyInOperation += ensuredDistribution[i].heavy || 0;\n    }\n\n    // Calculate conventional emissions using g/mile emission factors (more accurate)\n    const lightGasolineEmissions = lightInOperation * vehicleParams.lightDutyAnnualMiles * VEHICLE_EMISSION_FACTORS.light.gasoline / 1000; // convert g to kg\n    const mediumDieselEmissions = mediumInOperation * vehicleParams.mediumDutyAnnualMiles * VEHICLE_EMISSION_FACTORS.medium.diesel / 1000;\n    const heavyDieselEmissions = heavyInOperation * vehicleParams.heavyDutyAnnualMiles * VEHICLE_EMISSION_FACTORS.heavy.diesel / 1000;\n    \n    const yearConventionalEmissions = lightGasolineEmissions + mediumDieselEmissions + heavyDieselEmissions;\n    \n    // Calculate CNG emissions using g/mile emission factors\n    const lightCngEmissions = lightInOperation * vehicleParams.lightDutyAnnualMiles * VEHICLE_EMISSION_FACTORS.light.cng / 1000; // convert g to kg\n    const mediumCngEmissions = mediumInOperation * vehicleParams.mediumDutyAnnualMiles * VEHICLE_EMISSION_FACTORS.medium.cng / 1000;\n    const heavyCngEmissions = heavyInOperation * vehicleParams.heavyDutyAnnualMiles * VEHICLE_EMISSION_FACTORS.heavy.cng / 1000;\n    \n    const yearCngEmissions = lightCngEmissions + mediumCngEmissions + heavyCngEmissions;\n    \n    // Calculate emissions savings for this year\n    const yearEmissionsSaved = yearConventionalEmissions - yearCngEmissions;\n    \n    // Update totals\n    totalConventionalEmissions += yearConventionalEmissions;\n    totalCngEmissions += yearCngEmissions;\n    \n    // Track yearly and cumulative emissions saved\n    yearlyEmissionsSaved.push(Math.round(yearEmissionsSaved));\n    cumulativeEmissionsSavedToDate += yearEmissionsSaved;\n    cumulativeEmissionsSaved.push(Math.round(cumulativeEmissionsSavedToDate));\n  }\n  \n  // Calculate total CO2 reduction percentage\n  const co2Reduction = totalConventionalEmissions > 0 \n    ? ((totalConventionalEmissions - totalCngEmissions) / totalConventionalEmissions) * 100 \n    : 0;\n  \n  // Calculate cost per mile metrics\n  const costPerMileGasoline = fuelPrices.gasolinePrice / FUEL_EFFICIENCY.light.gasoline;\n  \n  // Calculate CNG price without business rate (electricity already included in base price)\n  const costPerMileCNG = fuelPrices.cngPrice / FUEL_EFFICIENCY.light.cng;\n  \n  const costReduction = ((costPerMileGasoline - costPerMileCNG) / costPerMileGasoline) * 100;\n  \n  // Total emissions saved in kg (convert to metric tons for display)\n  const totalEmissionsSaved = cumulativeEmissionsSaved.length > 0 \n    ? cumulativeEmissionsSaved[cumulativeEmissionsSaved.length - 1] \n    : 0;\n\n  return {\n    totalInvestment,\n    annualFuelSavings,\n    yearlySavings,\n    yearlyFuelSavings,\n    yearlyMaintenanceSavings,\n    yearlyTariffFees,\n    cumulativeSavings,\n    cumulativeInvestment,\n    paybackPeriod,\n    roi,\n    annualRateOfReturn,\n    netCashFlow,\n    co2Reduction,\n    yearlyEmissionsSaved,\n    cumulativeEmissionsSaved,\n    totalEmissionsSaved,\n    costPerMileGasoline,\n    costPerMileCNG,\n    costReduction,\n    vehicleDistribution: ensuredDistribution\n  };\n}\n","size_bytes":28965},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Formats a decimal payback period (in years) into \"X Years, X Months\" format\n * @param paybackPeriod The payback period in years (can be decimal, or -1 for \"Never\")\n * @returns Formatted string in \"X Years, X Months\" format with projection indicator if beyond time horizon\n */\nexport function formatPaybackPeriod(paybackPeriod: number): string {\n  // Handle invalid cases\n  if (isNaN(paybackPeriod) || paybackPeriod < 0) return \"Never\";\n  \n  const years = Math.floor(paybackPeriod);\n  const months = Math.round((paybackPeriod - years) * 12);\n  \n  // Handle case where months rounds up to 12\n  if (months === 12) {\n    return formatPaybackYearsMonths(years + 1, 0, years >= 15);\n  }\n  \n  return formatPaybackYearsMonths(years, months, years >= 15);\n}\n\n/**\n * Helper function to format years and months with projection indicator\n */\nfunction formatPaybackYearsMonths(years: number, months: number, isProjection: boolean): string {\n  const yearText = years === 1 ? 'Year' : 'Years';\n  const monthText = months === 1 ? 'Month' : 'Months';\n  \n  // Base formatting\n  const formattedPeriod = `${years} ${yearText}, ${months} ${monthText}`;\n  \n  // Add projection indicator if beyond typical analysis period\n  return isProjection ? `${formattedPeriod} (projected)` : formattedPeriod;\n}\n","size_bytes":1451},"client/src/pages/home.tsx":{"content":"import SidePanel from \"@/components/cng-calculator/SidePanel\";\nimport MainContent from \"@/components/cng-calculator/MainContent\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { useState, useCallback, useEffect } from \"react\";\n\nexport default function Home() {\n  const { sidebarCollapsed } = useCalculator();\n  const [sidebarWidth, setSidebarWidth] = useState(320); // Default 320px (md:w-80)\n  const [isResizing, setIsResizing] = useState(false);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    setIsResizing(true);\n  }, []);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isResizing) return;\n    \n    const newWidth = Math.min(Math.max(e.clientX, 240), 600); // Min 240px, Max 600px\n    setSidebarWidth(newWidth);\n  }, [isResizing]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsResizing(false);\n  }, []);\n\n  // Add global mouse listeners when resizing\n  useEffect(() => {\n    if (isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = 'col-resize';\n      document.body.style.userSelect = 'none';\n    } else {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = '';\n      document.body.style.userSelect = '';\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = '';\n      document.body.style.userSelect = '';\n    };\n  }, [isResizing, handleMouseMove, handleMouseUp]);\n  \n  return (\n    <div className=\"flex flex-col md:flex-row h-screen overflow-hidden\">\n      {!sidebarCollapsed && (\n        <>\n          <div \n            className=\"relative\"\n            style={{ width: `${sidebarWidth}px` }}\n          >\n            <SidePanel />\n            {/* Resize handle */}\n            <div\n              className=\"absolute top-0 right-0 w-1 h-full bg-gray-300 hover:bg-blue-400 cursor-col-resize transition-colors z-10\"\n              onMouseDown={handleMouseDown}\n              style={{ \n                backgroundColor: isResizing ? '#3b82f6' : undefined \n              }}\n            />\n          </div>\n        </>\n      )}\n      <MainContent />\n    </div>\n  );\n}\n","size_bytes":2428},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/calculator.ts":{"content":"// Vehicle parameters\nexport interface VehicleParameters {\n  lightDutyCount: number;\n  mediumDutyCount: number;\n  heavyDutyCount: number;\n  lightDutyCost: number;\n  mediumDutyCost: number;\n  heavyDutyCost: number;\n  lightDutyLifespan: number;  // Average lifespan in years\n  mediumDutyLifespan: number; // Average lifespan in years\n  heavyDutyLifespan: number;  // Average lifespan in years\n  lightDutyMPG: number;       // Miles per gallon\n  mediumDutyMPG: number;      // Miles per gallon \n  heavyDutyMPG: number;       // Miles per gallon\n  lightDutyAnnualMiles: number; // Annual miles driven\n  mediumDutyAnnualMiles: number; // Annual miles driven\n  heavyDutyAnnualMiles: number;  // Annual miles driven\n  lightDutyFuelType: 'gasoline' | 'diesel';   // Fuel type for light duty vehicles\n  mediumDutyFuelType: 'gasoline' | 'diesel';  // Fuel type for medium duty vehicles\n  heavyDutyFuelType: 'gasoline' | 'diesel';   // Fuel type for heavy duty vehicles\n}\n\n// Station configuration\nexport interface StationConfig {\n  stationType: \"fast\" | \"time\";\n  businessType: \"aglc\" | \"cgc\" | \"vng\";\n  turnkey: boolean; // Yes = upfront cost, No = financed cost\n  sizingMethod: \"total\" | \"peak\"; // Total vehicles vs peak year usage\n}\n\n// Fuel prices\nexport interface FuelPrices {\n  gasolinePrice: number;\n  dieselPrice: number;\n  cngPrice: number;\n  annualIncrease: number;\n}\n\n// Deployment strategies\nexport type DeploymentStrategy = \"immediate\" | \"phased\" | \"aggressive\" | \"deferred\" | \"manual\";\n\n// Vehicle distribution by year\nexport interface VehicleDistribution {\n  light: number;\n  medium: number;\n  heavy: number;\n  investment: number;\n}\n\n// Calculation results\nexport interface CalculationResults {\n  totalInvestment: number;\n  annualFuelSavings: number;\n  yearlySavings: number[];\n  yearlyFuelSavings: number[];\n  yearlyMaintenanceSavings: number[];\n  yearlyTariffFees: number[];\n  cumulativeSavings: number[];\n  cumulativeInvestment: number[];\n  paybackPeriod: number;\n  roi: number;\n  annualRateOfReturn: number;\n  netCashFlow: number;\n  co2Reduction: number;\n  yearlyEmissionsSaved: number[];\n  cumulativeEmissionsSaved: number[];\n  totalEmissionsSaved: number;\n  costPerMileGasoline: number;\n  costPerMileCNG: number;\n  costReduction: number;\n  vehicleDistribution: VehicleDistribution[];\n}\n","size_bytes":2298},"client/src/components/cng-calculator/AdditionalMetrics.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, AlertTriangle, Info } from \"lucide-react\";\nimport { MetricInfoTooltip } from \"./MetricInfoTooltip\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { calculateStationCost } from \"@/lib/calculator\";\nimport { \n  ResponsiveContainer, \n  AreaChart, \n  Area, \n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend,\n  ReferenceLine\n} from 'recharts';\n\ninterface AdditionalMetricsProps {\n  showCashflow: boolean;\n}\n\nexport default function AdditionalMetrics({ showCashflow }: AdditionalMetricsProps) {\n  const { \n    results, \n    deploymentStrategy, \n    timeHorizon, \n    vehicleParameters, \n    stationConfig,\n    fuelPrices \n  } = useCalculator();\n\n  // If no results yet, don't render anything\n  if (!results) return null;\n\n  // Format currency\n  const formatCurrency = (value: number) => {\n    return `$${Math.abs(value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Format emissions value (convert kg to metric tons)\n  const formatEmissions = (value: number) => {\n    const tons = value / 1000; // Convert kg to metric tons\n    return `${tons.toLocaleString(undefined, { maximumFractionDigits: 1 })} tons`;\n  };\n\n  // Calculate operational cost per mile for conventional vs CNG by vehicle type\n  const calculateCostPerMile = () => {\n    // Base fuel prices with annual increases applied for year 1\n    const yearMultiplier = Math.pow(1 + (fuelPrices.annualIncrease / 100), 0); // First year\n    const adjustedGasolinePrice = fuelPrices.gasolinePrice * yearMultiplier;\n    const adjustedDieselPrice = fuelPrices.dieselPrice * yearMultiplier;\n    \n    // CNG price calculation with electricity and business rate\n    const ELECTRICITY_COST_PER_GGE = 0.08;\n    const businessRate = stationConfig.businessType === 'cgc' ? 0.192 : 0.18;\n    const baseCngPrice = fuelPrices.cngPrice;\n    const cngWithElectricity = baseCngPrice + ELECTRICITY_COST_PER_GGE;\n    const cngWithBusinessRate = cngWithElectricity * (1 + businessRate);\n    const adjustedCngPrice = cngWithBusinessRate * yearMultiplier;\n    \n    // CNG efficiency loss\n    const CNG_LOSS = { light: 0.05, medium: 0.075, heavy: 0.10 };\n    \n    // Calculate cost per mile for each vehicle type\n    const lightGasCostPerMile = adjustedGasolinePrice / vehicleParameters.lightDutyMPG;\n    const lightCngCostPerMile = adjustedCngPrice / (vehicleParameters.lightDutyMPG * (1 - CNG_LOSS.light));\n    \n    const mediumDieselCostPerMile = adjustedDieselPrice / vehicleParameters.mediumDutyMPG;\n    const mediumCngCostPerMile = adjustedCngPrice / (vehicleParameters.mediumDutyMPG * (1 - CNG_LOSS.medium));\n    \n    const heavyDieselCostPerMile = adjustedDieselPrice / vehicleParameters.heavyDutyMPG;\n    const heavyCngCostPerMile = adjustedCngPrice / (vehicleParameters.heavyDutyMPG * (1 - CNG_LOSS.heavy));\n    \n    // Maintenance costs\n    const MAINTENANCE_COST = { gasoline: 0.47, diesel: 0.52, cng: 0.47 };\n    const DIESEL_DEDUCTION_PER_MILE = 0.05;\n    \n    return [\n      {\n        vehicleType: 'Light Duty',\n        conventionalFuel: lightGasCostPerMile + MAINTENANCE_COST.gasoline,\n        cngFuel: lightCngCostPerMile + MAINTENANCE_COST.cng,\n        fuelSavings: (lightGasCostPerMile - lightCngCostPerMile) + (MAINTENANCE_COST.gasoline - MAINTENANCE_COST.cng),\n        annualMiles: vehicleParameters.lightDutyAnnualMiles,\n        fuelType: 'Gasoline'\n      },\n      {\n        vehicleType: 'Medium Duty',\n        conventionalFuel: mediumDieselCostPerMile + MAINTENANCE_COST.diesel,\n        cngFuel: mediumCngCostPerMile + MAINTENANCE_COST.cng,\n        fuelSavings: (mediumDieselCostPerMile - mediumCngCostPerMile) + (MAINTENANCE_COST.diesel - MAINTENANCE_COST.cng) + DIESEL_DEDUCTION_PER_MILE,\n        annualMiles: vehicleParameters.mediumDutyAnnualMiles,\n        fuelType: 'Diesel'\n      },\n      {\n        vehicleType: 'Heavy Duty',\n        conventionalFuel: heavyDieselCostPerMile + MAINTENANCE_COST.diesel,\n        cngFuel: heavyCngCostPerMile + MAINTENANCE_COST.cng,\n        fuelSavings: (heavyDieselCostPerMile - heavyCngCostPerMile) + (MAINTENANCE_COST.diesel - MAINTENANCE_COST.cng) + DIESEL_DEDUCTION_PER_MILE,\n        annualMiles: vehicleParameters.heavyDutyAnnualMiles,\n        fuelType: 'Diesel'\n      }\n    ];\n  };\n\n  const operationalMetrics = calculateCostPerMile();\n\n  // Prepare data for emissions chart\n  const emissionsChartData = Array.from({ length: timeHorizon }, (_, i) => {\n    return {\n      year: `Year ${i + 1}`,\n      emissionsSaved: results.yearlyEmissionsSaved[i] / 1000 || 0, // Convert to metric tons\n      cumulative: results.cumulativeEmissionsSaved[i] / 1000 || 0 // Convert to metric tons\n    };\n  });\n\n  // Prepare data for operational metrics chart\n  const operationalChartData = operationalMetrics.map(metric => ({\n    ...metric,\n    annualConventionalCost: metric.conventionalFuel * metric.annualMiles,\n    annualCngCost: metric.cngFuel * metric.annualMiles,\n    annualSavings: metric.fuelSavings * metric.annualMiles\n  }));\n\n  // Strategy advantages and considerations\n  const strategyInsights = {\n    immediate: {\n      advantages: [\n        \"Maximizes immediate fuel savings\",\n        \"Simplifies implementation timeline\",\n        \"Lowest total project cost overall\",\n        \"Faster breakeven and higher ROI\"\n      ],\n      considerations: [\n        \"Requires significant upfront capital\",\n        \"May strain operational resources\",\n        \"Less flexibility to adjust based on results\",\n        \"Higher financial risk if benefits not realized\"\n      ]\n    },\n    phased: {\n      advantages: [\n        \"Reduces initial capital requirements\",\n        \"Allows for operational adjustments\",\n        \"Creates predictable annual budgeting\",\n        \"Spreads maintenance and training needs\"\n      ],\n      considerations: [\n        \"Delays maximum fuel savings potential\",\n        \"May extend total project timeline\",\n        \"Requires sustained organizational commitment\"\n      ]\n    },\n    aggressive: {\n      advantages: [\n        \"Captures savings potential earlier\",\n        \"Accelerates ROI timeline compared to phased\",\n        \"Demonstrates organizational commitment\",\n        \"Reduces long-term exposure to fuel price increases\"\n      ],\n      considerations: [\n        \"Higher initial capital requirements\",\n        \"Potential operational challenges during rapid transition\",\n        \"Less flexibility compared to phased approach\"\n      ]\n    },\n    deferred: {\n      advantages: [\n        \"Minimal initial capital outlay\",\n        \"Allows time for technology maturation\",\n        \"Provides learning opportunities with initial vehicles\",\n        \"Better suited for organizations with limited immediate funds\"\n      ],\n      considerations: [\n        \"Significantly delays fuel cost savings\",\n        \"May miss near-term fuel price advantages\",\n        \"Extends total project timeline\",\n        \"Lower overall ROI in early years\"\n      ]\n    },\n    manual: {\n      advantages: [\n        \"Fully customized to organizational needs\",\n        \"Can align with other capital planning cycles\",\n        \"Flexibility to address specific operational constraints\",\n        \"Accommodates detailed vehicle replacement schedules\"\n      ],\n      considerations: [\n        \"Requires detailed planning and expertise\",\n        \"May be less optimal than algorithmically-determined strategies\",\n        \"Requires rigorous timeline management\"\n      ]\n    }\n  };\n\n  // Calculate total emissions saved in tons\n  const totalEmissionsTons = results.totalEmissionsSaved / 1000;\n  \n  // Custom tooltip for the emissions chart\n  const EmissionsTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border shadow-sm rounded-md\">\n          <p className=\"text-sm font-medium\">{label}</p>\n          <p className=\"text-xs text-green-700\">\n            <span className=\"font-medium\">Annual: </span> \n            {payload[0].value.toFixed(1)} metric tons CO₂\n          </p>\n          <p className=\"text-xs text-blue-700\">\n            <span className=\"font-medium\">Cumulative: </span> \n            {payload[1].value.toFixed(1)} metric tons CO₂\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"additional-metrics\">\n      {/* Emissions Chart */}\n      <Card className=\"bg-white rounded-lg shadow mb-6 dark:bg-gray-800\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-2\">\n            CO₂ Emissions Reduction\n            <MetricInfoTooltip\n              title=\"CO₂ Emissions Reduction\"\n              description=\"This chart visualizes the estimated reduction in carbon dioxide emissions over the analysis period. It shows both annual savings and the cumulative impact of your CNG fleet transition.\"\n              calculation=\"Based on EPA emission factors: gasoline (8.887 kg CO₂/gallon), diesel (10.180 kg CO₂/gallon), CNG (5.511 kg CO₂/GGE). Annual emissions are calculated by multiplying fuel consumption by the appropriate emission factor.\"\n              affectingVariables={[\n                \"Vehicle count by type\",\n                \"Annual mileage assumptions\",\n                \"Vehicle MPG values\",\n                \"Deployment strategy timing\"\n              ]}\n              simpleDescription=\"Visual representation of annual and cumulative CO₂ emission reductions from your CNG fleet.\"\n            />\n          </h2>\n          <p className=\"text-sm text-gray-500 mb-4 dark:text-gray-400\">\n            Estimated reduction in carbon dioxide emissions over time\n          </p>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <span className=\"text-sm text-gray-500 dark:text-gray-400\">Total CO₂ Emissions Saved</span>\n              <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\">{formatEmissions(results.totalEmissionsSaved)}</div>\n            </div>\n            <div className=\"text-right\">\n              <span className=\"text-sm text-gray-500 dark:text-gray-400\">CO₂ Reduction Percentage</span>\n              <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">{results.co2Reduction.toFixed(1)}%</div>\n            </div>\n          </div>\n          \n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart\n                data={emissionsChartData}\n                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                <XAxis dataKey=\"year\" tick={{ fontSize: 12 }} />\n                <YAxis \n                  tickFormatter={(value) => `${value.toFixed(0)}`}\n                  tick={{ fontSize: 12 }}\n                  label={{ \n                    value: 'Metric Tons CO₂', \n                    angle: -90, \n                    position: 'insideLeft',\n                    style: { fontSize: '12px' }\n                  }}\n                />\n                <Tooltip content={<EmissionsTooltip />} />\n                <Legend />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"emissionsSaved\" \n                  stackId=\"1\"\n                  name=\"Annual Emissions Saved\"\n                  stroke=\"#22c55e\" \n                  fill=\"rgba(34, 197, 94, 0.2)\" \n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"cumulative\"\n                  name=\"Cumulative Emissions Saved\" \n                  stroke=\"#3b82f6\" \n                  fill=\"rgba(59, 130, 246, 0.2)\" \n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 mt-4\">\n            <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n              <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Equivalent Trees Planted</div>\n              <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                ~{Math.round(totalEmissionsTons * 16.5).toLocaleString()} trees\n              </div>\n            </div>\n            <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n              <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Equivalent Forest Area</div>\n              <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                ~{Math.round(totalEmissionsTons / 7.5).toLocaleString()} acres\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n        {/* Operational Metrics */}\n        <Card className=\"bg-white rounded-lg shadow dark:bg-gray-800\">\n          <CardContent className=\"p-5\">\n            <h3 className=\"text-lg font-semibold mb-3\">\n              Operational Metrics\n              <MetricInfoTooltip\n                title=\"Operational Metrics\"\n                description=\"These metrics provide a detailed breakdown of your operational costs and savings on a per-mile basis. They show the direct financial impact of switching from conventional fuels to CNG for your fleet.\"\n                calculation=\"Cost per Mile = Fuel Price ÷ Vehicle MPG. Cost Reduction = ((Gasoline Cost - CNG Cost) ÷ Gasoline Cost) × 100%. Annual Fuel Savings = Total fuel cost savings across all vehicles.\"\n                affectingVariables={[\n                  \"Fuel prices (gasoline, diesel, CNG)\",\n                  \"Vehicle MPG values by type\",\n                  \"Annual mileage assumptions\",\n                  \"Vehicle count by type\"\n                ]}\n                simpleDescription=\"Key metrics showing how CNG reduces your cost per mile compared to conventional fuels.\"\n              />\n            </h3>\n            {/* Operational Metrics Chart */}\n            <div className=\"h-64 mb-4\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart\n                  data={operationalChartData}\n                  margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"vehicleType\" \n                    tick={{ fontSize: 11 }}\n                    interval={0}\n                  />\n                  <YAxis \n                    tickFormatter={(value) => `$${value.toLocaleString()}`}\n                    tick={{ fontSize: 11 }}\n                    label={{ \n                      value: 'Annual Cost', \n                      angle: -90, \n                      position: 'insideLeft',\n                      style: { fontSize: '11px' }\n                    }}\n                  />\n                  <Tooltip \n                    formatter={(value: any, name: string) => [\n                      `$${value.toLocaleString()}`, \n                      name === 'annualConventionalCost' ? 'Conventional Fuel' : \n                      name === 'annualCngCost' ? 'CNG Cost' : 'Annual Savings'\n                    ]}\n                    labelFormatter={(label) => `${label} Vehicles`}\n                  />\n                  <Legend />\n                  <Bar \n                    dataKey=\"annualConventionalCost\" \n                    name=\"Conventional Fuel Cost\" \n                    fill=\"#ef4444\" \n                    opacity={0.8}\n                  />\n                  <Bar \n                    dataKey=\"annualCngCost\" \n                    name=\"CNG Cost\" \n                    fill=\"#3b82f6\" \n                    opacity={0.8}\n                  />\n                  <Bar \n                    dataKey=\"annualSavings\" \n                    name=\"Annual Savings\" \n                    fill=\"#22c55e\" \n                    opacity={0.8}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Summary metrics */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-xs text-gray-500 mb-1 dark:text-gray-300\">Total Annual Savings</div>\n                <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                  ${operationalChartData.reduce((sum, item) => sum + item.annualSavings, 0).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-xs text-gray-500 mb-1 dark:text-gray-300\">Best Performing Type</div>\n                <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                  {operationalChartData.reduce((best, current) => \n                    current.fuelSavings > best.fuelSavings ? current : best\n                  ).vehicleType}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Key Performance Summary */}\n        <Card className=\"bg-white rounded-lg shadow dark:bg-gray-800\">\n          <CardContent className=\"p-5\">\n            <h3 className=\"text-lg font-semibold mb-3\">\n              Key Performance Summary\n              <MetricInfoTooltip\n                title=\"Key Performance Summary\"\n                description=\"Summary of key financial and operational metrics for your CNG conversion project.\"\n                calculation=\"Based on calculated payback period, ROI, total investment, and operational cost savings.\"\n                affectingVariables={[\n                  \"Total fleet size and composition\",\n                  \"Fuel price differentials\", \n                  \"Annual mileage by vehicle type\",\n                  \"Deployment strategy timing\"\n                ]}\n                simpleDescription=\"High-level overview of your CNG conversion project performance.\"\n              />\n            </h3>\n            \n            {/* Key Performance Metrics Grid */}\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-xs text-gray-500 mb-1 dark:text-gray-300\">Payback Period</div>\n                <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                  {formatPaybackPeriod(results.paybackPeriod)}\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-xs text-gray-500 mb-1 dark:text-gray-300\">ROI</div>\n                <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                  {results.roi.toFixed(1)}%\n                </div>\n              </div>\n            </div>\n            \n            {/* Investment Breakdown */}\n            <div className=\"mb-4\">\n              <div className=\"bg-blue-50 p-4 rounded-lg dark:bg-blue-900/20\">\n                <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300 mb-3\">\n                  Investment\n                  <MetricInfoTooltip\n                    title=\"Investment Breakdown\"\n                    description=\"Detailed breakdown of capital investment required for your CNG conversion project.\"\n                    calculation=\"Vehicle Investment + Station Cost (with applicable tariffs for Time-fill AGL stations)\"\n                    affectingVariables={[\n                      \"Vehicle counts and conversion costs\",\n                      \"Station type (Fast-Fill/Time-Fill)\",\n                      \"Business type selection\",\n                      \"TurnKey vs Non-TurnKey option\"\n                    ]}\n                    simpleDescription=\"Total upfront capital required broken down by component.\"\n                  />\n                </div>\n                {(() => {\n                  const totalVehicleInvestment = results.vehicleDistribution.reduce((sum, dist) => sum + dist.investment, 0);\n                  const stationCost = calculateStationCost(stationConfig, vehicleParameters);\n                  const isTimeFillAgl = stationConfig.stationType === 'time' && (stationConfig.businessType === 'aglc' || stationConfig.businessType === 'vng');\n                  const monthlyTariffRate = 1.5 / 100; // 1.5% monthly for AGL Time-fill\n                  const annualTariffCost = isTimeFillAgl ? stationCost * monthlyTariffRate * 12 : 0;\n                  \n                  return (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-blue-600 dark:text-blue-400\">Vehicles (Inc)</span>\n                        <span className=\"text-sm font-semibold text-blue-800 dark:text-blue-200\">{formatCurrency(totalVehicleInvestment)}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-blue-600 dark:text-blue-400\">\n                          Station{isTimeFillAgl ? ' + Tariff' : ''}\n                          {isTimeFillAgl && (\n                            <div className=\"text-xs text-blue-500 dark:text-blue-300 mt-1\">\n                              ({formatCurrency(annualTariffCost)}/year tariff)\n                            </div>\n                          )}\n                        </span>\n                        <span className=\"text-sm font-semibold text-blue-800 dark:text-blue-200\">\n                          {formatCurrency(stationConfig.turnkey ? stationCost : (isTimeFillAgl ? annualTariffCost : stationCost))}\n                        </span>\n                      </div>\n                      <div className=\"border-t pt-2 border-blue-200 dark:border-blue-700\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Total Investment</span>\n                          <span className=\"text-lg font-bold text-blue-800 dark:text-blue-200\">\n                            {formatCurrency(results.totalInvestment)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })()}\n              </div>\n            </div>\n            \n            {/* Savings Summary */}\n            <div className=\"mb-4\">\n              <div className=\"bg-green-50 p-4 rounded-lg dark:bg-green-900/20\">\n                <div className=\"text-sm font-medium text-green-700 dark:text-green-300 mb-3\">\n                  Savings\n                  <MetricInfoTooltip\n                    title=\"Savings Summary\"\n                    description=\"Total savings generated from CNG conversion over the analysis period.\"\n                    calculation=\"Cumulative fuel and maintenance savings minus total investment\"\n                    affectingVariables={[\n                      \"Fuel price differentials\",\n                      \"Annual mileage by vehicle type\",\n                      \"Maintenance cost differences\",\n                      \"Deployment timeline\"\n                    ]}\n                    simpleDescription=\"Net financial benefit after accounting for all costs.\"\n                  />\n                </div>\n                {(() => {\n                  const totalSavingsOverHorizon = results.cumulativeSavings[results.cumulativeSavings.length - 1];\n                  const netSavings = totalSavingsOverHorizon - results.totalInvestment;\n                  \n                  return (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-green-600 dark:text-green-400\">Total Savings ({timeHorizon}-Year)</span>\n                        <span className=\"text-sm font-semibold text-green-800 dark:text-green-200\">{formatCurrency(totalSavingsOverHorizon)}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-green-600 dark:text-green-400\">Less: Total Investment</span>\n                        <span className=\"text-sm font-semibold text-red-600 dark:text-red-400\">({formatCurrency(results.totalInvestment)})</span>\n                      </div>\n                      <div className=\"border-t pt-2 border-green-200 dark:border-green-700\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">Net Benefit</span>\n                          <span className={`text-lg font-bold ${netSavings >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\n                            {formatCurrency(netSavings)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })()}\n              </div>\n            </div>\n            \n            {/* Additional Metrics */}\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-xs text-gray-500 mb-1 dark:text-gray-300\">Fleet Size</div>\n                <div className=\"text-lg font-bold text-gray-900 dark:text-gray-100\">\n                  {vehicleParameters.lightDutyCount + vehicleParameters.mediumDutyCount + vehicleParameters.heavyDutyCount} vehicles\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-xs text-gray-500 mb-1 dark:text-gray-300\">Annual Savings</div>\n                <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                  {formatCurrency(results.yearlySavings[results.yearlySavings.length - 1] || 0)}\n                </div>\n              </div>\n            </div>\n\n            {/* Deployment Strategy Summary */}\n            <div className=\"bg-blue-50 p-3 rounded-lg dark:bg-blue-900/20\">\n              <div className=\"text-xs text-blue-700 dark:text-blue-300 font-medium mb-1\">\n                {deploymentStrategy.charAt(0).toUpperCase() + deploymentStrategy.slice(1)} Deployment Strategy\n              </div>\n              <div className=\"text-sm text-blue-800 dark:text-blue-200\">\n                {(() => {\n                  const totalVehicles = vehicleParameters.lightDutyCount + vehicleParameters.mediumDutyCount + vehicleParameters.heavyDutyCount;\n                  \n                  if (deploymentStrategy === 'immediate') {\n                    return `All ${totalVehicles} vehicles converted immediately for maximum savings.`;\n                  } else if (deploymentStrategy === 'phased') {\n                    return `${Math.ceil(totalVehicles / timeHorizon)} vehicles converted annually over ${timeHorizon} years.`;\n                  } else if (deploymentStrategy === 'aggressive') {\n                    return `Front-loaded deployment to accelerate savings and reduce long-term fuel costs.`;\n                  } else if (deploymentStrategy === 'deferred') {\n                    return `Gradual conversion prioritizing later years to minimize upfront capital.`;\n                  } else {\n                    return `Custom deployment schedule tailored to operational requirements.`;\n                  }\n                })()}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27933},"client/src/components/cng-calculator/DeploymentTimeline.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { MetricInfoTooltip } from \"./MetricInfoTooltip\";\nimport { calculateStationCost } from \"@/lib/calculator\";\n\nexport default function DeploymentTimeline() {\n  const { \n    timeHorizon,\n    deploymentStrategy,\n    setDistributionStrategy,\n    updateDeploymentStrategy,\n    updateManualDistribution,\n    vehicleDistribution,\n    results,\n    stationConfig,\n    vehicleParameters\n  } = useCalculator();\n\n  // Format currency\n  const formatCurrency = (value: number) => {\n    return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Only show years up to the selected time horizon\n  const years = Array.from({ length: timeHorizon }, (_, i) => i + 1);\n\n  // Function to handle input change for manual distribution\n  const handleInputChange = (year: number, vehicleType: 'light' | 'medium' | 'heavy', value: string) => {\n    // Convert input to number\n    const numValue = parseInt(value) || 0;\n    \n    // Update the distribution\n    updateManualDistribution(year, {\n      [vehicleType]: numValue\n    });\n  };\n\n  return (\n    <Card className=\"bg-white rounded-lg shadow mb-6 deployment-timeline\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">Deployment Timeline</h2>\n          \n          {/* Timeline Controls */}\n          <div className=\"flex flex-wrap mt-3 sm:mt-0 gap-2\">\n            <Button\n              size=\"sm\"\n              variant={deploymentStrategy === 'manual' ? 'default' : 'outline'}\n              className={deploymentStrategy === 'manual' \n                ? \"px-3 py-1 text-xs rounded bg-blue-100 text-blue-800 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                : \"px-3 py-1 text-xs rounded bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"}\n              onClick={() => updateDeploymentStrategy('manual')}\n            >\n              Manual Distribution\n            </Button>\n            \n            {deploymentStrategy !== 'immediate' && (\n              <>\n                <Button\n                  size=\"sm\"\n                  variant={deploymentStrategy === 'phased' ? 'default' : 'outline'}\n                  className={deploymentStrategy === 'phased' \n                    ? \"px-3 py-1 text-xs rounded bg-blue-100 text-blue-800 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                    : \"px-3 py-1 text-xs rounded bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"}\n                  onClick={() => setDistributionStrategy('phased')}\n                >\n                  Even Distribution\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={deploymentStrategy === 'aggressive' ? 'default' : 'outline'}\n                  className={deploymentStrategy === 'aggressive' \n                    ? \"px-3 py-1 text-xs rounded bg-blue-100 text-blue-800 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                    : \"px-3 py-1 text-xs rounded bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"}\n                  onClick={() => setDistributionStrategy('aggressive')}\n                >\n                  Front-Loaded\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={deploymentStrategy === 'deferred' ? 'default' : 'outline'}\n                  className={deploymentStrategy === 'deferred' \n                    ? \"px-3 py-1 text-xs rounded bg-blue-100 text-blue-800 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\" \n                    : \"px-3 py-1 text-xs rounded bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"}\n                  onClick={() => setDistributionStrategy('deferred')}\n                >\n                  Back-Loaded\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {/* Timeline Visualization - Only show if we have results */}\n        {results && vehicleDistribution && (\n          <div className=\"timeline-scroll overflow-x-auto\">\n            <div className=\"min-w-max grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\n              {years.map((year) => {\n                // Make sure we have data for this year, default to empty values if not\n                const yearData = vehicleDistribution[year - 1] || { light: 0, medium: 0, heavy: 0, investment: 0 };\n                const { light, medium, heavy } = yearData;\n                let borderClass = \"vehicle-type-light\";\n                \n                if (medium >= light && medium >= heavy) {\n                  borderClass = \"vehicle-type-medium\";\n                } else if (heavy >= light && heavy >= medium) {\n                  borderClass = \"vehicle-type-heavy\";\n                }\n                \n                // Calculate year's financial data\n                const vehicleInvestment = yearData.investment || 0;\n                \n                // For year 1, also show station cost separately\n                const isFirstYear = year === 1;\n                // Calculate station cost properly using the calculator function\n                const calculatedStationCost = calculateStationCost(stationConfig, vehicleParameters);\n                // Station cost logic: \n                // - Turnkey: Show full station cost in Year 1 only\n                // - Non-turnkey: Show annual tariff fee in every year\n                let stationCost = 0;\n                if (stationConfig.turnkey) {\n                  stationCost = isFirstYear ? calculatedStationCost : 0;\n                } else {\n                  // Non-turnkey: Show annual tariff fee (available from results.yearlyTariffFees)\n                  stationCost = results.yearlyTariffFees[year - 1] || 0;\n                }\n                const totalYearInvestment = vehicleInvestment + stationCost;\n                \n                // Calculate cumulative savings up to this year\n                let cumulativeFuelSavings = 0;\n                let cumulativeMaintenanceSavings = 0;\n                let cumulativeTotalSavings = 0;\n                \n                for (let i = 0; i < year; i++) {\n                  cumulativeFuelSavings += results.yearlyFuelSavings[i] || 0;\n                  cumulativeMaintenanceSavings += results.yearlyMaintenanceSavings[i] || 0;\n                  cumulativeTotalSavings += results.yearlySavings[i] || 0;\n                }\n                \n                return (\n                  <div key={year} className={`year-block bg-white border rounded-lg shadow-sm p-3 ${borderClass}`}>\n                    <div className=\"text-sm font-medium text-gray-700 mb-2\">Year {year}</div>\n                    \n                    <div className=\"space-y-2 mb-3\">\n                      {deploymentStrategy === 'manual' ? (\n                        <>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-500\">Light Duty</span>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              value={light}\n                              onChange={(e) => handleInputChange(year, 'light', e.target.value)}\n                              className=\"text-xs w-16 h-6 p-1\"\n                            />\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-500\">Medium Duty</span>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              value={medium}\n                              onChange={(e) => handleInputChange(year, 'medium', e.target.value)}\n                              className=\"text-xs w-16 h-6 p-1\"\n                            />\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-500\">Heavy Duty</span>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              value={heavy}\n                              onChange={(e) => handleInputChange(year, 'heavy', e.target.value)}\n                              className=\"text-xs w-16 h-6 p-1\"\n                            />\n                          </div>\n                        </>\n                      ) : (\n                        <>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-500\">Light Duty</span>\n                            <span className=\"text-xs font-medium\">{light}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-500\">Medium Duty</span>\n                            <span className=\"text-xs font-medium\">{medium}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-xs text-gray-500\">Heavy Duty</span>\n                            <span className=\"text-xs font-medium\">{heavy}</span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                    \n                    <div className=\"border-t pt-3\">\n                      {/* Always show investment breakdown in hierarchical format */}\n                      {(vehicleInvestment > 0 || stationCost > 0) && (\n                        <>\n                          {/* Investment header */}\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-sm text-gray-700 font-medium\">Investment</span>\n                            <span></span>\n                          </div>\n                          {/* Investment breakdown - indented */}\n                          <div className=\"flex items-center justify-between ml-4 mb-1.5\">\n                            <span className=\"text-xs text-gray-500\">\n                              Vehicles (Inc)\n                              <MetricInfoTooltip\n                                title=\"Vehicle Investment\"\n                                description={`This is the total cost for ${light} light-duty, ${medium} medium-duty, and ${heavy} heavy-duty vehicles converted in Year ${year}.`}\n                                calculation={`Vehicle Investment = (${light} light-duty × $${(vehicleInvestment / (light || 1)).toLocaleString()}) + (${medium} medium-duty × $${(vehicleInvestment / (medium || 1)).toLocaleString()}) + (${heavy} heavy-duty × $${(vehicleInvestment / (heavy || 1)).toLocaleString()})`}\n                                affectingVariables={[\n                                  \"Vehicle counts (light, medium, heavy)\",\n                                  \"Incremental cost per vehicle type\",\n                                  \"Deployment strategy\"\n                                ]}\n                                simpleDescription=\"Cost of CNG vehicle conversion for this year\"\n                              />\n                            </span>\n                            <span className=\"text-xs font-medium\">{formatCurrency(vehicleInvestment)}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between ml-4 mb-2\">\n                            <span className=\"text-xs text-gray-500\">\n                              Station\n                              <MetricInfoTooltip\n                                title={stationConfig.turnkey ? \"Station Investment\" : \"Station Tariff Fee\"}\n                                description={stationConfig.turnkey \n                                  ? \"The upfront cost of building your CNG station. This is a one-time cost in Year 1 and includes all equipment, installation, and setup.\"\n                                  : `Annual tariff fee for non-turnkey station option. This is ${stationConfig.businessType === 'cgc' ? '1.6%' : '1.5%'} of the total station cost, charged annually.`\n                                }\n                                calculation={stationConfig.turnkey \n                                  ? \"Based on station type (Fast-Fill or Time-Fill), business type (AGLC, CGC, VNG), and required capacity to support your fleet's daily fuel consumption.\"\n                                  : `Annual Tariff = Total Station Cost (${formatCurrency(calculatedStationCost)}) × ${stationConfig.businessType === 'cgc' ? '1.6%' : '1.5%'} × 12 months`\n                                }\n                                affectingVariables={[\n                                  \"Station type (Fast-Fill or Time-Fill)\",\n                                  \"Business type (AGLC, CGC, VNG)\",\n                                  \"Total fleet size and composition\",\n                                  stationConfig.turnkey ? \"Turnkey option (Yes = upfront cost)\" : \"Non-turnkey annual tariff rate\"\n                                ]}\n                                simpleDescription={stationConfig.turnkey ? \"Cost of building the CNG fueling station\" : \"Annual fee for non-turnkey station financing\"}\n                              />\n                            </span>\n                            <span className=\"text-xs font-medium\">{formatCurrency(stationCost)}</span>\n                          </div>\n                        </>\n                      )}\n                      \n                      {/* Savings Section */}\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm text-gray-700 font-medium\">Savings</span>\n                        <span></span>\n                      </div>\n                      {/* Savings breakdown - indented */}\n                      <div className=\"flex items-center justify-between ml-4 mb-1.5\">\n                        <span className=\"text-xs text-gray-500\">\n                          Fuel\n                          <MetricInfoTooltip\n                            title=\"Cumulative Fuel Savings\"\n                            description={`Total fuel cost savings accumulated from Year 1 through Year ${year} from switching to CNG instead of gasoline/diesel.`}\n                            calculation=\"Cumulative Fuel Savings = Sum of annual fuel savings from Year 1 to current year\"\n                            affectingVariables={[\n                              \"Number of converted vehicles in operation each year\",\n                              \"Annual mileage per vehicle type\",\n                              \"Fuel prices (gasoline, diesel, CNG)\",\n                              \"Vehicle fuel efficiency (MPG)\"\n                            ]}\n                            simpleDescription=\"Total fuel cost reduction from CNG to date\"\n                          />\n                        </span>\n                        <span className=\"text-xs font-medium text-green-600\">{formatCurrency(cumulativeFuelSavings)}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between ml-4 mb-2\">\n                        <span className=\"text-xs text-gray-500\">\n                          Maintenance\n                          <MetricInfoTooltip\n                            title=\"Cumulative Maintenance Savings\"\n                            description={`Total maintenance cost savings accumulated from Year 1 through Year ${year} from reduced maintenance needs of CNG vehicles.`}\n                            calculation=\"Cumulative Maintenance Savings = Sum of annual maintenance savings from Year 1 to current year ($0.05 per mile for diesel vehicles)\"\n                            affectingVariables={[\n                              \"Number of converted diesel vehicles in operation each year\",\n                              \"Annual mileage per vehicle type\",\n                              \"Deployment timing and vehicle rollout schedule\"\n                            ]}\n                            simpleDescription=\"Total maintenance cost reduction to date\"\n                          />\n                        </span>\n                        <span className=\"text-xs font-medium text-green-600\">{formatCurrency(cumulativeMaintenanceSavings)}</span>\n                      </div>\n                      {/* Total Savings */}\n                      <div className=\"flex items-center justify-between border-t border-gray-200 pt-2\">\n                        <span className=\"text-sm text-gray-700 font-medium\">\n                          Total Savings\n                          <MetricInfoTooltip\n                            title=\"Total Cumulative Savings\"\n                            description={`Total savings accumulated from Year 1 through Year ${year} including fuel and maintenance savings, minus any operational costs.`}\n                            calculation={`Total Cumulative Savings = Cumulative Fuel Savings (${formatCurrency(cumulativeFuelSavings)}) + Cumulative Maintenance Savings (${formatCurrency(cumulativeMaintenanceSavings)}) - Station Operational Costs`}\n                            simpleDescription=\"Combined operating cost reduction to date\"\n                          />\n                        </span>\n                        <span className=\"text-sm font-semibold text-green-600\">{formatCurrency(cumulativeTotalSavings)}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":18403},"client/src/components/cng-calculator/FinancialAnalysis.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { calculateStationCost } from \"@/lib/calculator\";\nimport { MetricInfoTooltip } from \"./MetricInfoTooltip\";\nimport { \n  LineChart, \n  Line, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip as RechartsTooltip, \n  Legend, \n  ResponsiveContainer \n} from \"recharts\";\n\ntype FinancialAnalysisProps = {\n  showCashflow: boolean;\n  hideNegativeValues: boolean;\n};\n\nexport default function FinancialAnalysis({ showCashflow, hideNegativeValues }: FinancialAnalysisProps) {\n  const { results, timeHorizon, stationConfig } = useCalculator();\n\n  // If no results yet, don't render anything\n  if (!results) return null;\n\n  // Format currency\n  const formatCurrency = (value: number) => {\n    return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Calculate total vehicle investment across all years (sum of all distributed investments)\n  const totalVehicleInvestment = results.vehicleDistribution.reduce(\n    (sum, dist) => sum + dist.investment, 0\n  );\n\n  // For non-turnkey option, we need to calculate station cost separately since it's not included in totalInvestment\n  // This ensures we have the correct station cost to calculate LDC investment tariff\n  const { vehicleParameters, vehicleDistribution } = useCalculator();\n  \n  // Calculate appropriate station cost based on the current fleet configuration\n  const calculatedStationCost = calculateStationCost(stationConfig, vehicleParameters, vehicleDistribution);\n  \n  // For turnkey, station cost is included in total investment (the difference between total and vehicle investments)\n  // For non-turnkey, use the calculated station cost directly\n  const totalStationCost = stationConfig.turnkey \n    ? (results.totalInvestment - totalVehicleInvestment)  // Already included in totalInvestment\n    : calculatedStationCost;  // Calculate based on current fleet and station configuration\n  \n  console.log(\"Total station cost:\", totalStationCost, \"Vehicle Investment:\", totalVehicleInvestment, \"Total Investment:\", results.totalInvestment, \"TurnKey:\", stationConfig.turnkey);\n\n  // Prepare cash flow chart data\n  const cashFlowData = Array.from({ length: timeHorizon }, (_, i) => {\n    return {\n      year: `Year ${i + 1}`,\n      cumulativeInvestment: results.cumulativeInvestment[i],\n      cumulativeSavings: results.cumulativeSavings[i]\n    };\n  });\n  \n  // Prepare cost vs savings chart data\n  const costSavingsData = Array.from({ length: timeHorizon }, (_, i) => {\n    const vehicleInvestment = results.vehicleDistribution[i]?.investment || 0;\n    \n    // For turnkey=yes: Show station cost in first year as upfront payment\n    // For turnkey=no: Show NO station cost (it's financed via monthly LDC investment tariff)\n    const stationCost = (i === 0 && stationConfig.turnkey) ? totalStationCost : 0;\n    \n    // For non-turnkey: calculate LDC investment tariff rate\n    // This is a fixed monthly cost (percentage of station cost) paid throughout the analysis period\n    const monthlyTariffRate = stationConfig.businessType === 'aglc' ? 0.015 : 0.016;\n    const annualTariffRate = monthlyTariffRate * 12;\n    \n    // For non-turnkey: calculate annual LDC investment tariff\n    // This is applied for ALL years when non-turnkey is selected\n    const tariffCost = !stationConfig.turnkey ? totalStationCost * annualTariffRate : 0;\n    \n    return {\n      year: `Year ${i + 1}`,\n      vehicleInvestment: vehicleInvestment,\n      stationInvestment: stationCost,\n      financingCost: tariffCost, // Renamed but keeping key as financingCost for compatibility with the chart\n      savings: results.yearlySavings[i]\n    };\n  });\n\n  // Format for Recharts tooltips\n  const currencyFormatter = (value: number) => {\n    return `$${value.toLocaleString()}`;\n  };\n\n  // Calculate Y-axis domain for charts when hiding negative values\n  const getYAxisDomain = (data: any[], key: string) => {\n    if (!hideNegativeValues) return undefined; // Use default domain\n    \n    const values = data.map(item => item[key]).filter(val => val >= 0);\n    if (values.length === 0) return [0, 100]; // Fallback if no positive values\n    \n    const min = 0; // Always start from 0 for positive-only view\n    const max = Math.max(...values);\n    return [min, max * 1.1]; // Add 10% padding to max\n  };\n\n  // Get filtered data for charts when hiding negative values\n  const getFilteredChartData = (data: any[], valueKeys: string[]) => {\n    if (!hideNegativeValues) return data;\n    \n    return data.map(item => {\n      const filteredItem = { ...item };\n      valueKeys.forEach(key => {\n        if (filteredItem[key] < 0) {\n          filteredItem[key] = 0; // Set negative values to 0\n        }\n      });\n      return filteredItem;\n    });\n  };\n\n  // Prepare data for year-by-year vehicle investment chart (only used when showCashflow is false)\n  const vehicleInvestmentData = results.vehicleDistribution\n    .map((yearData, index) => {\n      // Base data with vehicle counts and investment\n      const data = {\n        year: `Year ${index + 1}`,\n        light: yearData.light,\n        medium: yearData.medium,\n        heavy: yearData.heavy,\n        vehicleInvestment: yearData.investment,\n      };\n      \n      // For Year 1 with Turnkey=Yes, add station cost as a separate value\n      if (index === 0 && stationConfig.turnkey) {\n        return {\n          ...data,\n          stationCost: totalStationCost,\n          // Total investment for this year is vehicle investment + station cost\n          totalInvestment: yearData.investment + totalStationCost\n        };\n      }\n      \n      // For all other years or when Turnkey=No, only include vehicle investment\n      return {\n        ...data,\n        stationCost: 0,\n        totalInvestment: yearData.investment\n      };\n    })\n    .filter(data => data.totalInvestment > 0); // Only show years with investments\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6 financial-analysis\">\n      {/* Cash Flow Chart - Only show when showCashflow is true */}\n      {showCashflow && (\n        <Card className=\"bg-white rounded-lg shadow dark:bg-gray-800\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">\n              Cash Flow Analysis\n              <MetricInfoTooltip\n                title=\"Cash Flow Analysis\"\n                description=\"This chart shows the cumulative investment versus cumulative savings over the selected time horizon. The intersection of these lines represents the payback point.\"\n                calculation=\"Chart plots Cumulative Investment and Cumulative Savings over time. Payback occurs when the green line (savings) crosses the red line (investment).\"\n                affectingVariables={[\n                  \"Vehicle costs and count\",\n                  \"Station configuration and payment method (TurnKey/Non-TurnKey)\",\n                  \"Fuel prices and annual increase rate\",\n                  \"Deployment strategy timing\"\n                ]}\n                simpleDescription=\"Tracks how your savings accumulate compared to your investment over time.\"\n              />\n            </h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart \n                  data={getFilteredChartData(cashFlowData, ['cumulativeInvestment', 'cumulativeSavings'])} \n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"year\" />\n                  <YAxis \n                    tickFormatter={currencyFormatter} \n                    domain={hideNegativeValues ? [0, 'dataMax'] : undefined}\n                  />\n                  <RechartsTooltip formatter={currencyFormatter} />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"cumulativeInvestment\" \n                    name=\"Cumulative Investment\"\n                    stroke=\"#ef4444\" \n                    fill=\"rgba(239, 68, 68, 0.1)\" \n                    activeDot={{ r: 8 }} \n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"cumulativeSavings\" \n                    name=\"Cumulative Savings\"\n                    stroke=\"#10b981\" \n                    fill=\"rgba(16, 185, 129, 0.1)\" \n                    activeDot={{ r: 8 }} \n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"mt-4 grid grid-cols-2 gap-4\">\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Payback Period</div>\n                <div className={`text-lg font-bold ${results.paybackPeriod < 0 ? 'text-red-600' : results.paybackPeriod > 15 ? 'text-amber-600' : 'text-blue-600'}`}>\n                  {formatPaybackPeriod(results.paybackPeriod)}\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Net Cash Flow ({timeHorizon}yr)</div>\n                <div className=\"text-lg font-bold text-green-600\">{formatCurrency(results.netCashFlow)}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Year-by-year Vehicle Investment Chart (only when showCashflow is false) */}\n      {!showCashflow && vehicleInvestmentData.length > 0 && (\n        <Card className=\"bg-white rounded-lg shadow dark:bg-gray-800\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">\n              Capital Investment Timeline\n              <MetricInfoTooltip\n                title=\"Capital Investment Timeline\" \n                description={stationConfig.turnkey ? \n                  \"This chart shows your complete capital investment distribution over the analysis period. For Year 1, it displays both vehicle and station investments as a stacked bar. For subsequent years, it shows only vehicle investments.\" :\n                  \"This chart shows your vehicle capital investment distribution over the analysis period. Station costs are not included as they are financed through the LDC tariff rather than being a direct capital investment.\"}\n                calculation={stationConfig.turnkey ? \n                  \"Stacked bars show vehicle count by type on the left axis. Stacked investment bars on the right axis show vehicle investment and station cost (Year 1 only).\" :\n                  \"Stacked bars show vehicle count by type on the left axis. Red bars on the right axis show vehicle investment amounts.\"}\n                affectingVariables={[\n                  \"Deployment strategy selection\",\n                  \"Vehicle costs by type\",\n                  \"Station configuration and payment method (TurnKey/Non-TurnKey)\",\n                  \"Fleet composition (light/medium/heavy duty mix)\"\n                ]}\n                simpleDescription={stationConfig.turnkey ? \n                  \"Year-by-year breakdown of your capital investments, including both vehicles and station infrastructure.\" :\n                  \"Year-by-year breakdown of your vehicle investments only (station costs financed separately).\"}\n              />\n            </h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                {stationConfig.turnkey ? (\n                  // For Turnkey=Yes, show stacked investment bars (vehicle + station)\n                  <BarChart data={vehicleInvestmentData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" />\n                    <YAxis yAxisId=\"count\" orientation=\"left\" label={{ value: 'Vehicle Count', angle: -90, position: 'insideLeft' }} />\n                    <YAxis yAxisId=\"investment\" orientation=\"right\" tickFormatter={currencyFormatter} />\n                    <RechartsTooltip \n                      formatter={(value, name) => {\n                        if (name === 'Vehicle Investment') return [formatCurrency(value as number), name];\n                        if (name === 'Station Investment') return [formatCurrency(value as number), name];\n                        if (name === 'Light-Duty') return [value, name];\n                        if (name === 'Medium-Duty') return [value, name]; \n                        if (name === 'Heavy-Duty') return [value, name];\n                        return [value, name];\n                      }}\n                      labelFormatter={(label) => `${label}`}\n                    />\n                    <Legend />\n                    {/* Vehicle Count Bars */}\n                    <Bar \n                      yAxisId=\"count\"\n                      dataKey=\"light\" \n                      name=\"Light-Duty\" \n                      fill=\"rgba(96, 165, 250, 0.7)\" \n                      stackId=\"vehicles\" \n                    />\n                    <Bar \n                      yAxisId=\"count\"\n                      dataKey=\"medium\" \n                      name=\"Medium-Duty\" \n                      fill=\"rgba(52, 211, 153, 0.7)\" \n                      stackId=\"vehicles\" \n                    />\n                    <Bar \n                      yAxisId=\"count\"\n                      dataKey=\"heavy\" \n                      name=\"Heavy-Duty\" \n                      fill=\"rgba(251, 146, 60, 0.7)\" \n                      stackId=\"vehicles\" \n                    />\n                    {/* Investment Bars - Stacked */}\n                    <Bar \n                      yAxisId=\"investment\"\n                      dataKey=\"vehicleInvestment\" \n                      name=\"Vehicle Investment\" \n                      fill=\"rgba(239, 68, 68, 0.7)\" \n                      stackId=\"investment\" \n                    />\n                    <Bar \n                      yAxisId=\"investment\"\n                      dataKey=\"stationCost\" \n                      name=\"Station Investment\" \n                      fill=\"rgba(59, 130, 246, 0.7)\" \n                      stackId=\"investment\" \n                    />\n                  </BarChart>\n                ) : (\n                  // For Turnkey=No, show only vehicle investment\n                  <BarChart data={vehicleInvestmentData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"year\" />\n                    <YAxis yAxisId=\"count\" orientation=\"left\" label={{ value: 'Vehicle Count', angle: -90, position: 'insideLeft' }} />\n                    <YAxis yAxisId=\"investment\" orientation=\"right\" tickFormatter={currencyFormatter} />\n                    <RechartsTooltip \n                      formatter={(value, name) => {\n                        if (name === 'Vehicle Investment') return [formatCurrency(value as number), name];\n                        if (name === 'Light-Duty') return [value, name];\n                        if (name === 'Medium-Duty') return [value, name]; \n                        if (name === 'Heavy-Duty') return [value, name];\n                        return [value, name];\n                      }}\n                      labelFormatter={(label) => `${label}`}\n                    />\n                    <Legend />\n                    {/* Vehicle Count Bars */}\n                    <Bar \n                      yAxisId=\"count\"\n                      dataKey=\"light\" \n                      name=\"Light-Duty\" \n                      fill=\"rgba(96, 165, 250, 0.7)\" \n                      stackId=\"vehicles\" \n                    />\n                    <Bar \n                      yAxisId=\"count\"\n                      dataKey=\"medium\" \n                      name=\"Medium-Duty\" \n                      fill=\"rgba(52, 211, 153, 0.7)\" \n                      stackId=\"vehicles\" \n                    />\n                    <Bar \n                      yAxisId=\"count\"\n                      dataKey=\"heavy\" \n                      name=\"Heavy-Duty\" \n                      fill=\"rgba(251, 146, 60, 0.7)\" \n                      stackId=\"vehicles\" \n                    />\n                    {/* Vehicle Investment Bar */}\n                    <Bar \n                      yAxisId=\"investment\"\n                      dataKey=\"vehicleInvestment\" \n                      name=\"Vehicle Investment\" \n                      fill=\"rgba(239, 68, 68, 0.7)\" \n                    />\n                  </BarChart>\n                )}\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Cost vs Savings Analysis */}\n      <Card className=\"bg-white rounded-lg shadow dark:bg-gray-800\">\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">\n            {showCashflow ? (\n              <>\n                Cost vs. Savings\n                <MetricInfoTooltip\n                  title=\"Cost vs. Savings Analysis\"\n                  description=\"This chart breaks down yearly costs versus savings for your CNG project. It shows how vehicle investments, station costs or tariffs, and resulting savings are distributed over time.\"\n                  calculation={stationConfig.turnkey \n                    ? \"Shows vehicle investments, station investment (year 1 only), and annual savings.\" \n                    : \"Shows vehicle investments, annual LDC tariff payments, and net savings after tariff costs.\"}\n                  affectingVariables={[\n                    \"Vehicle counts and costs\",\n                    \"Deployment strategy timing\",\n                    \"Station type and payment option (TurnKey/Non-TurnKey)\",\n                    \"Fuel prices and annual increase rate\"\n                  ]}\n                  simpleDescription=\"Year-by-year comparison of costs and savings from your CNG project.\"\n                />\n              </>\n            ) : (\n              <>\n                Investment Analysis\n                <MetricInfoTooltip\n                  title=\"Investment Analysis\"\n                  description={stationConfig.turnkey ? \n                    \"A breakdown of your total capital investment between vehicles and station costs. Provides insight into cost allocation and per-vehicle investment metrics.\" :\n                    \"An overview of your vehicle capital investment and associated station financing costs through the LDC investment tariff. With non-turnkey, only vehicle costs are direct capital investments.\"\n                  }\n                  calculation={stationConfig.turnkey ?\n                    \"Total Investment = Vehicle Investment + Station Investment. Per-Vehicle Cost = Total Investment / Total Vehicle Count.\" :\n                    \"Vehicle Investment = Total upfront vehicle costs. Station is financed via monthly LDC tariff at a rate of 1.5-1.6% of station cost (18-19.2% annually).\"\n                  }\n                  affectingVariables={[\n                    \"Vehicle counts and costs\",\n                    \"Station type and configuration\",\n                    \"Business type selection\",\n                    \"TurnKey option (Yes/No)\"\n                  ]}\n                  simpleDescription={stationConfig.turnkey ?\n                    \"Breakdown of your total upfront project investment across vehicles and infrastructure.\" :\n                    \"Summary of vehicle investments with station costs financed through monthly tariff payments.\"\n                  }\n                />\n              </>\n            )}\n          </h2>\n          \n          {/* Only show the bar chart when showCashflow is true */}\n          {showCashflow ? (\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart \n                  data={getFilteredChartData(costSavingsData, ['vehicleInvestment', 'stationInvestment', 'financingCost', 'savings'])} \n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"year\" />\n                  <YAxis \n                    tickFormatter={currencyFormatter} \n                    domain={hideNegativeValues ? [0, 'dataMax'] : undefined}\n                  />\n                  <RechartsTooltip formatter={currencyFormatter} />\n                  <Legend />\n                  <Bar \n                    dataKey=\"vehicleInvestment\" \n                    name=\"Vehicle Investment\"\n                    fill=\"rgba(239, 68, 68, 0.7)\" \n                    stackId=\"investment\"\n                  />\n                  {/* For turnkey option, show station investment in year 1 */}\n                  {stationConfig.turnkey && (\n                    <Bar \n                      dataKey=\"stationInvestment\" \n                      name=\"Station Investment\"\n                      fill=\"rgba(59, 130, 246, 0.7)\" \n                      stackId=\"investment\"\n                    />\n                  )}\n                  {/* For non-turnkey, show LDC investment tariff in all years */}\n                  {!stationConfig.turnkey && (\n                    <Bar \n                      dataKey=\"financingCost\" \n                      name=\"LDC Investment Tariff\"\n                      fill=\"rgba(101, 67, 33, 0.8)\" \n                      stackId=\"expenses\"\n                    />\n                  )}\n                  <Bar \n                    dataKey=\"savings\" \n                    name={stationConfig.turnkey ? \"Savings\" : \"Net Savings\"}\n                    fill=\"rgba(16, 185, 129, 0.7)\" \n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          ) : (\n            // When showCashflow is false, show simplified investment breakdown\n            <div className=\"h-64 flex items-center justify-center\">\n              <div className=\"text-center w-full max-w-md\">\n                {stationConfig.turnkey ? (\n                  // For turnkey, show the breakdown of vehicles vs station as a capital investment\n                  <>\n                    <div className=\"text-4xl font-bold text-blue-600 dark:text-blue-400 mb-2\">\n                      {formatCurrency(results.totalInvestment)}\n                    </div>\n                    <div className=\"text-base text-gray-500 dark:text-gray-400 mb-5\">\n                      Total Capital Investment\n                    </div>\n                    \n                    <div className=\"flex justify-center gap-10 mb-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-semibold text-gray-800 dark:text-gray-200\">\n                          {formatCurrency(totalVehicleInvestment)}\n                        </div>\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400 flex items-center justify-center\">\n                          <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-2\"></div>\n                          Vehicles ({Math.round((totalVehicleInvestment / results.totalInvestment) * 100)}%)\n                        </div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-semibold text-gray-800 dark:text-gray-200\">\n                          {formatCurrency(results.totalInvestment - totalVehicleInvestment)}\n                        </div>\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400 flex items-center justify-center\">\n                          <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n                          Station ({Math.round(((results.totalInvestment - totalVehicleInvestment) / results.totalInvestment) * 100)}%)\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-full w-full max-w-md mx-auto overflow-hidden\">\n                      <div \n                        className=\"h-full bg-blue-500 rounded-full\" \n                        style={{ \n                          width: `${Math.round((totalVehicleInvestment / results.totalInvestment) * 100)}%` \n                        }}\n                      ></div>\n                    </div>\n                  </>\n                ) : (\n                  // For non-turnkey, show vehicle investment and station financing info\n                  <>\n                    <div className=\"text-4xl font-bold text-blue-600 dark:text-blue-400 mb-2\">\n                      {formatCurrency(totalVehicleInvestment)}\n                    </div>\n                    <div className=\"text-base text-gray-500 dark:text-gray-400 mb-5\">\n                      Vehicle Capital Investment\n                    </div>\n                    \n                    <div className=\"p-3 mt-2 rounded-lg border mb-2 w-full\" \n                      style={{ \n                        backgroundColor: 'rgba(101, 67, 33, 0.1)', \n                        borderColor: 'rgba(101, 67, 33, 0.3)'\n                      }}>\n                      <div className=\"text-sm font-medium mb-1 dark:text-amber-200\" style={{ color: '#654321' }}>\n                        LDC Investment Tariff (Non-TurnKey)\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                          <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Monthly Rate:</span>\n                          <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                            {(stationConfig.businessType === 'aglc' || stationConfig.businessType === 'vng' ? 1.5 : 1.6).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Station Cost:</span>\n                          <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                            {formatCurrency(totalStationCost)}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Annual Rate:</span>\n                          <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                            {(stationConfig.businessType === 'aglc' || stationConfig.businessType === 'vng' ? 18 : 19.2).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Annual Cost:</span>\n                          <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                            {formatCurrency(totalStationCost * (stationConfig.businessType === 'aglc' || stationConfig.businessType === 'vng' ? 0.18 : 0.192))}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n          \n          <div className=\"mt-4 grid grid-cols-2 gap-4\">\n            {/* Always show the payback period regardless of showCashflow value */}\n            <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n              <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Payback Period</div>\n              <div className={`text-lg font-bold ${results.paybackPeriod < 0 ? 'text-red-600' : results.paybackPeriod > 15 ? 'text-amber-600' : 'text-blue-600'}`}>\n                {formatPaybackPeriod(results.paybackPeriod)}\n              </div>\n            </div>\n            \n            {/* Show ROI metrics only when showCashflow is true */}\n            {showCashflow ? (\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">{timeHorizon}-Year ROI</div>\n                <div className=\"text-lg font-bold text-green-600\">{Math.round(results.roi)}%</div>\n              </div>\n            ) : (\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Total Vehicles</div>\n                <div className=\"text-lg font-bold text-blue-600\">\n                  {results.vehicleDistribution.reduce((total, year) => \n                    total + year.light + year.medium + year.heavy, 0)}\n                </div>\n              </div>\n            )}\n            \n            {/* Show Annual Rate of Return only when showCashflow is true */}\n            {showCashflow && (\n              <div className=\"bg-gray-50 p-3 rounded-lg dark:bg-gray-700\">\n                <div className=\"text-sm text-gray-500 mb-1 dark:text-gray-300\">Annual Rate of Return</div>\n                <div className=\"text-lg font-bold text-blue-600\">{results.annualRateOfReturn.toFixed(1)}%</div>\n              </div>\n            )}\n            \n            {/* Show financing information for non-turnkey option only when relevant */}\n            {!stationConfig.turnkey && showCashflow && (\n              <div className={`${showCashflow ? \"col-span-2\" : \"\"} p-3 rounded-lg border dark:bg-gray-800/50 dark:border-gray-700`} \n                style={{ \n                  backgroundColor: 'rgba(101, 67, 33, 0.1)', \n                  borderColor: 'rgba(101, 67, 33, 0.3)'\n                }}>\n                <div className=\"text-sm font-medium mb-1 dark:text-amber-200\" style={{ color: '#654321' }}>\n                  LDC Investment Tariff (Non-TurnKey Option)\n                </div>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Monthly Fee:</span>\n                    <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                      {(stationConfig.businessType === 'aglc' ? 1.5 : 1.6).toFixed(1)}%\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Station Cost:</span>\n                    <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                      {formatCurrency(totalStationCost)}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  <div>\n                    <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Annual Fee:</span>\n                    <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                      {(stationConfig.businessType === 'aglc' ? 18 : 19.2).toFixed(1)}%\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-xs dark:text-amber-300\" style={{ color: '#755c3b' }}>Annual Cost:</span>\n                    <span className=\"text-sm font-semibold ml-1 dark:text-gray-200\">\n                      {formatCurrency(costSavingsData[0].financingCost)}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"text-xs mt-1 dark:text-amber-200\" style={{ color: '#654321' }}>\n                  Note: LDC investment tariff applies a monthly fee of {(stationConfig.businessType === 'aglc' ? 1.5 : 1.6).toFixed(1)}% on the station cost throughout the analysis period.\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":32113},"client/src/components/cng-calculator/FleetConfiguration.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { MetricInfoTooltip } from \"./MetricInfoTooltip\";\n\ninterface FleetConfigurationProps {\n  showCashflow: boolean;\n}\n\nexport default function FleetConfiguration({ showCashflow }: FleetConfigurationProps) {\n  const { \n    vehicleParameters,\n    stationConfig,\n    results,\n    timeHorizon,\n    deploymentStrategy,\n    vehicleDistribution\n  } = useCalculator();\n\n  // Calculate vehicle distribution percentages (use manual distribution totals if in manual mode)\n  const getActualVehicleCounts = () => {\n    if (deploymentStrategy === 'manual' && vehicleDistribution) {\n      // Sum up totals from manual distribution\n      const totals = vehicleDistribution.reduce(\n        (acc, year) => ({\n          light: acc.light + (year.light || 0),\n          medium: acc.medium + (year.medium || 0),\n          heavy: acc.heavy + (year.heavy || 0)\n        }),\n        { light: 0, medium: 0, heavy: 0 }\n      );\n      return totals;\n    }\n    // For non-manual strategies, use original parameters\n    return {\n      light: vehicleParameters.lightDutyCount,\n      medium: vehicleParameters.mediumDutyCount,\n      heavy: vehicleParameters.heavyDutyCount\n    };\n  };\n\n  const actualCounts = getActualVehicleCounts();\n  const totalVehicles = actualCounts.light + actualCounts.medium + actualCounts.heavy;\n  \n  const lightDutyPercentage = totalVehicles > 0 \n    ? Math.round((actualCounts.light / totalVehicles) * 100) \n    : 0;\n  \n  const mediumDutyPercentage = totalVehicles > 0 \n    ? Math.round((actualCounts.medium / totalVehicles) * 100) \n    : 0;\n  \n  const heavyDutyPercentage = totalVehicles > 0 \n    ? Math.round((actualCounts.heavy / totalVehicles) * 100) \n    : 0;\n\n  // Vehicle costs (CNG conversion costs)\n  const lightDutyCost = 15000;\n  const mediumDutyCost = 15000;\n  const heavyDutyCost = 50000;\n\n  // Total vehicle investment (use actual counts from manual distribution if applicable)\n  const totalVehicleInvestment = \n    (actualCounts.light * lightDutyCost) +\n    (actualCounts.medium * mediumDutyCost) +\n    (actualCounts.heavy * heavyDutyCost);\n\n  // Calculate GGE (Gasoline Gallon Equivalent) per day for station sizing (use actual counts)\n  const dailyGGE = \n    (actualCounts.light * 2.5) + \n    (actualCounts.medium * 6) + \n    (actualCounts.heavy * 15);\n  \n  // Get capacity tier for pricing\n  const getCapacityTier = () => {\n    if (dailyGGE < 200) return 'small';\n    if (dailyGGE < 500) return 'medium';\n    if (dailyGGE < 800) return 'large';\n    return 'xlarge';\n  };\n  \n  const tier = getCapacityTier();\n  \n  // Tiered pricing based on capacity\n  const getStationCost = () => {\n    const baseCosts = {\n      fast: {\n        small: 1800000,    // $1.8M for small fast-fill\n        medium: 2200000,   // $2.2M for medium fast-fill\n        large: 2700000,    // $2.7M for large fast-fill\n        xlarge: 3100000    // $3.1M for extra large fast-fill\n      },\n      time: {\n        small: 491000,     // $491K for small time-fill\n        medium: 1200000,   // $1.2M for medium time-fill\n        large: 2100000,    // $2.1M for large time-fill\n        xlarge: 3500000    // $3.5M for extra large time-fill\n      }\n    };\n    \n    // Get base cost from the pricing tiers\n    const baseCost = baseCosts[stationConfig.stationType][tier];\n    \n    // Apply business type adjustment\n    const businessMultiplier = stationConfig.businessType === 'cgc' ? 0.95 : 1.0;\n    \n    // Apply turnkey markup\n    const turnkeyMultiplier = stationConfig.turnkey ? 1.2 : 1.0; // 20% markup for turnkey\n    \n    return Math.round(baseCost * businessMultiplier * turnkeyMultiplier);\n  };\n\n  const stationCost = getStationCost();\n  const totalInvestment = totalVehicleInvestment + stationCost;\n\n  // Format currency\n  const formatCurrency = (value: number) => {\n    return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  return (\n    <Card className=\"bg-white rounded-lg shadow mb-6 dark:bg-gray-800\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Fleet Configuration</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {/* Vehicle Distribution */}\n          <div className=\"bg-gray-50 p-4 rounded-lg dark:bg-gray-700\">\n            <h3 className=\"text-sm font-medium text-gray-700 mb-3 dark:text-gray-200\">Vehicle Distribution</h3>\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-2\"></div>\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Light Duty ({actualCounts.light})\n                </span>\n              </div>\n              <span className=\"text-sm font-medium dark:text-gray-200\">{lightDutyPercentage}%</span>\n            </div>\n            <div className=\"h-2 w-full bg-gray-200 dark:bg-gray-600 rounded-full mb-3\">\n              <div \n                className=\"h-2 bg-blue-500 rounded-full\" \n                style={{ width: `${lightDutyPercentage}%` }}\n              ></div>\n            </div>\n            \n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2\"></div>\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Medium Duty ({actualCounts.medium})\n                </span>\n              </div>\n              <span className=\"text-sm font-medium dark:text-gray-200\">{mediumDutyPercentage}%</span>\n            </div>\n            <div className=\"h-2 w-full bg-gray-200 dark:bg-gray-600 rounded-full mb-3\">\n              <div \n                className=\"h-2 bg-green-500 rounded-full\" \n                style={{ width: `${mediumDutyPercentage}%` }}\n              ></div>\n            </div>\n            \n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Heavy Duty ({actualCounts.heavy})\n                </span>\n              </div>\n              <span className=\"text-sm font-medium dark:text-gray-200\">{heavyDutyPercentage}%</span>\n            </div>\n            <div className=\"h-2 w-full bg-gray-200 dark:bg-gray-600 rounded-full\">\n              <div \n                className=\"h-2 bg-red-500 rounded-full\" \n                style={{ width: `${heavyDutyPercentage}%` }}\n              ></div>\n            </div>\n          </div>\n          \n          {/* Total Investment */}\n          <div className=\"bg-gray-50 p-4 rounded-lg dark:bg-gray-700\">\n            <h3 className=\"text-sm font-medium text-gray-700 mb-3 dark:text-gray-200\">\n              Total Investment\n              <MetricInfoTooltip\n                title=\"Total Investment\"\n                description=\"The total estimated capital required for the project over the analysis period. Includes vehicle costs and potentially the station cost upfront if TurnKey is selected.\"\n                calculation=\"Total Vehicle Investment + (Station Cost if TurnKey = Yes)\"\n                affectingVariables={[\n                  \"Vehicle counts and costs\",\n                  \"Station type (Fast-Fill/Time-Fill)\",\n                  \"Business type (Gas LDC selection)\",\n                  \"TurnKey option (Yes/No)\",\n                  \"Deployment strategy timing\"\n                ]}\n                simpleDescription=\"Total upfront capital required for the project.\"\n              />\n            </h3>\n            <div className=\"flex flex-col\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Vehicles (incremental)</span>\n                <span className=\"text-sm font-medium dark:text-gray-200\">{formatCurrency(totalVehicleInvestment)}</span>\n              </div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Station</span>\n                <span className=\"text-sm font-medium dark:text-gray-200\">{formatCurrency(stationCost)}</span>\n              </div>\n              <div className=\"flex items-center justify-between pt-2 border-t dark:border-gray-600\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-200\">Total</span>\n                <span className=\"text-sm font-bold text-gray-900 dark:text-white\">{formatCurrency(totalInvestment)}</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Key Metrics */}\n          <div className=\"bg-gray-50 p-4 rounded-lg dark:bg-gray-700\">\n            <h3 className=\"text-sm font-medium text-gray-700 mb-3 dark:text-gray-200\">Key Metrics</h3>\n            {/* Payback Period - always show */}\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Payback Period\n                <MetricInfoTooltip\n                  title=\"Payback Period\"\n                  description=\"The estimated time (in years and months) it takes for the cumulative savings generated by the project to equal the total initial investment. Investment basis and savings calculation differ based on the TurnKey option.\"\n                  calculation=\"Time t where Cumulative Savings(t) >= Cumulative Investment(t). If TurnKey=Yes: Investment includes vehicles + station upfront. If TurnKey=No: Investment includes only vehicles upfront.\"\n                  affectingVariables={[\n                    \"Vehicle parameters (counts, costs, MPG, lifespan)\",\n                    \"Station configuration (type, business type, TurnKey option)\",\n                    \"Fuel prices and annual increase rate\",\n                    \"Deployment strategy timing\"\n                  ]}\n                  simpleDescription=\"Time until your investment is fully recovered from savings.\"\n                />\n              </span>\n              <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\n                {results ? formatPaybackPeriod(results.paybackPeriod) : '-'}\n              </span>\n            </div>\n            \n            {/* ROI - only show when showCashflow is true */}\n            {showCashflow && (\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  {timeHorizon}-Year ROI\n                  <MetricInfoTooltip\n                    title=\"Return on Investment\"\n                    description=\"The total net profit (or loss) over the selected Time Horizon, expressed as a percentage of the total investment. Investment basis and savings calculation differ based on the TurnKey option.\"\n                    calculation=\"ROI = (Cumulative Savings at Horizon - Total Investment) / Total Investment * 100\"\n                    affectingVariables={[\n                      \"All factors affecting payback period\",\n                      \"Time horizon length\"\n                    ]}\n                    simpleDescription=\"Percentage return on your total investment over the analysis period.\"\n                  />\n                </span>\n                <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">\n                  {results ? `${Math.round(results.roi)}%` : '-'}\n                </span>\n              </div>\n            )}\n            \n            {/* Annual Fuel Savings - only show when showCashflow is true */}\n            {showCashflow && (\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Annual Fuel Savings\n                  <MetricInfoTooltip\n                    title=\"Annual Fuel Savings\"\n                    description=\"The average net savings generated per year over the entire time horizon. Includes fuel and maintenance savings, minus the LDC tariff if applicable.\"\n                    calculation=\"Average Annual Net Savings = Cumulative Savings at Horizon / Time Horizon\"\n                    affectingVariables={[\n                      \"Fuel prices and annual increase\",\n                      \"Vehicle MPG and annual mileage\",\n                      \"Vehicle counts by type\",\n                      \"Deployment strategy timing\",\n                      \"LDC tariff (if TurnKey = No)\"\n                    ]}\n                    simpleDescription=\"Average yearly savings from lower fuel and maintenance costs.\"\n                  />\n                </span>\n                <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">\n                  {results ? formatCurrency(results.annualFuelSavings) : '-'}\n                </span>\n              </div>\n            )}\n            \n            {/* CO2 Reduction - always show */}\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                CO₂ Reduction\n                <MetricInfoTooltip\n                  title=\"CO₂ Reduction\"\n                  description=\"The estimated percentage reduction in CO₂ emissions over the time horizon compared to running the same fleet on conventional fuels.\"\n                  calculation=\"CO2 Reduction % = ((Total Baseline Emissions - Total CNG Emissions) / Total Baseline Emissions) * 100\"\n                  affectingVariables={[\n                    \"Vehicle counts by type\",\n                    \"Vehicle MPG values\",\n                    \"Annual mileage assumptions\",\n                    \"Emission factors for each fuel type\",\n                    \"Deployment strategy timing\"\n                  ]}\n                  simpleDescription=\"Percentage reduction in carbon dioxide emissions compared to conventional fuels.\"\n                />\n              </span>\n              <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">\n                {results ? `${results.co2Reduction.toFixed(1)}%` : '-'}\n              </span>\n            </div>\n            \n            {/* Total Vehicles - show when showCashflow is false */}\n            {!showCashflow && (\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Total Vehicles</span>\n                <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\n                  {totalVehicles}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15009},"client/src/components/cng-calculator/FuelPrices.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { Info } from \"lucide-react\";\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport default function FuelPrices() {\n  const { fuelPrices, updateFuelPrices } = useCalculator();\n\n  // Calculate fuel savings percentages\n  const cngVsGasolineSavings = Math.round(((fuelPrices.gasolinePrice - fuelPrices.cngPrice) / fuelPrices.gasolinePrice) * 100 * 10) / 10;\n  const cngVsDieselSavings = Math.round(((fuelPrices.dieselPrice - fuelPrices.cngPrice) / fuelPrices.dieselPrice) * 100 * 10) / 10;\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-md p-3 space-y-3\">\n      {/* Gasoline Price */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Gasoline Price ($/gallon)\n        </label>\n        <div className=\"flex items-center\">\n          <input\n            type=\"number\"\n            className=\"block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n            min=\"0\"\n            step=\"0.01\"\n            value={fuelPrices.gasolinePrice}\n            onChange={(e) => \n              updateFuelPrices({ \n                ...fuelPrices, \n                gasolinePrice: parseFloat(e.target.value) || 0 \n              })\n            }\n          />\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"ml-2 text-gray-500 dark:text-gray-400 cursor-help\">\n                  <Info size={18} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Current gasoline price per gallon</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </div>\n\n      {/* Diesel Price */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Diesel Price ($/gallon)\n        </label>\n        <div className=\"flex items-center\">\n          <input\n            type=\"number\"\n            className=\"block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n            min=\"0\"\n            step=\"0.01\"\n            value={fuelPrices.dieselPrice}\n            onChange={(e) => \n              updateFuelPrices({ \n                ...fuelPrices, \n                dieselPrice: parseFloat(e.target.value) || 0 \n              })\n            }\n          />\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"ml-2 text-gray-500 dark:text-gray-400 cursor-help\">\n                  <Info size={18} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Current diesel price per gallon</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </div>\n\n      {/* CNG Price */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          CNG Price ($/GGE)\n        </label>\n        <div className=\"flex items-center\">\n          <input\n            type=\"number\"\n            className=\"block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n            min=\"0\"\n            step=\"0.01\"\n            value={fuelPrices.cngPrice}\n            onChange={(e) => \n              updateFuelPrices({ \n                ...fuelPrices, \n                cngPrice: parseFloat(e.target.value) || 0 \n              })\n            }\n          />\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"ml-2 text-gray-500 dark:text-gray-400 cursor-help\">\n                  <Info size={18} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>CNG price per gasoline gallon equivalent (GGE)</p>\n                <p className=\"text-xs text-gray-400 mt-1\">Note: Electricity costs are included in this price</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </div>\n\n      {/* Annual Fuel Price Increase */}\n      <div className=\"border-t pt-3 mt-3\">\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n          Annual Fuel Price Increase (%)\n        </label>\n        <div className=\"flex items-center\">\n          <input\n            type=\"number\"\n            className=\"block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n            min=\"0\"\n            max=\"20\"\n            step=\"0.1\"\n            value={fuelPrices.annualIncrease}\n            onChange={(e) => \n              updateFuelPrices({ \n                ...fuelPrices, \n                annualIncrease: parseFloat(e.target.value) || 0 \n              })\n            }\n          />\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"ml-2 text-gray-500 dark:text-gray-400 cursor-help\">\n                  <Info size={18} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Estimated annual percentage increase in fuel prices</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </div>\n\n      {/* Fuel Price Comparison */}\n      <div className=\"border-t pt-3 mt-3\">\n        <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Fuel Price Comparison</h3>\n        <div className=\"bg-gray-50 dark:bg-gray-700 p-2 rounded\">\n          <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>CNG Savings vs. Gasoline</span>\n            <span className=\"font-medium text-green-600 dark:text-green-400\">{cngVsGasolineSavings}%</span>\n          </div>\n          <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n            <span>CNG Savings vs. Diesel</span>\n            <span className=\"font-medium text-green-600 dark:text-green-400\">{cngVsDieselSavings}%</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6687},"client/src/components/cng-calculator/GlobalSettings.tsx":{"content":"import { useState } from \"react\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { useComparison } from \"@/contexts/ComparisonContext\";\nimport { Info, BarChart3, Plus, Truck, Eye, EyeOff, Edit3 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\n\nexport default function GlobalSettings() {\n  const { \n    timeHorizon,\n    deploymentStrategy, \n    vehicleParameters,\n    updateTimeHorizon,\n    updateDeploymentStrategy,\n    updateVehicleParameters,\n    results,\n    hideNegativeValues,\n    toggleHideNegativeValues\n  } = useCalculator();\n\n  const { \n    addComparisonItem, \n    isInComparison,\n    comparisonItems,\n    canAddMoreComparisons\n  } = useComparison();\n\n  const [showCustomNameDialog, setShowCustomNameDialog] = useState(false);\n  const [customName, setCustomName] = useState(\"\");\n\n  // Strategy descriptions\n  const strategyDescriptions = {\n    immediate: \"All vehicles are purchased at the beginning of Year 1.\",\n    phased: \"Evenly distributes vehicle purchases across the selected time horizon.\",\n    aggressive: \"Front-loads the majority of purchases in the first few years.\",\n    deferred: \"Back-loads the majority of purchases in the later years.\",\n    manual: \"Manually distribute vehicles across the timeline.\"\n  };\n\n  const handleAddToComparison = () => {\n    if (results && canAddMoreComparisons()) {\n      addComparisonItem(deploymentStrategy, results);\n    }\n  };\n\n  const handleAddWithCustomName = () => {\n    if (results && canAddMoreComparisons() && customName.trim()) {\n      addComparisonItem(deploymentStrategy, results, customName.trim());\n      setCustomName(\"\");\n      setShowCustomNameDialog(false);\n    }\n  };\n\n  // Count how many of the current strategy type are already in comparison\n  const currentStrategyCount = comparisonItems.filter(item => item.strategy === deploymentStrategy).length;\n  const canAddCurrentStrategy = canAddMoreComparisons() && (deploymentStrategy === 'manual' || !isInComparison(deploymentStrategy));\n\n  // Check if manual deployment is selected\n  const isManualMode = deploymentStrategy === 'manual';\n\n  return (\n    <div className=\"bg-white rounded-md p-3 space-y-3\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-sm font-medium text-gray-700\">Calculation Settings</h3>\n        \n        <div className=\"flex flex-col gap-1 min-w-0\">\n          {/* Add to comparison button */}\n          {results && canAddCurrentStrategy && (\n            <>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleAddToComparison}\n                className=\"w-full flex items-center justify-center gap-1 text-xs h-7 px-2\"\n              >\n                <Plus className=\"h-3 w-3\" />\n                <span>Add to Comparison</span>\n              </Button>\n              \n              {/* Add with custom name for manual strategies or when multiple allowed */}\n              {(deploymentStrategy === 'manual' || currentStrategyCount > 0) && (\n                <Dialog open={showCustomNameDialog} onOpenChange={setShowCustomNameDialog}>\n                  <DialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"w-full flex items-center justify-center gap-1 text-xs h-7 px-2\"\n                      title=\"Add with custom name\"\n                    >\n                      <Edit3 className=\"h-3 w-3\" />\n                      <span>Add with Name</span>\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Add to Comparison with Custom Name</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Custom Name for this Strategy\n                        </label>\n                        <Input\n                          value={customName}\n                          onChange={(e) => setCustomName(e.target.value)}\n                          placeholder={`Enter name for ${deploymentStrategy} strategy...`}\n                          maxLength={50}\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          This helps identify different variations when comparing multiple {deploymentStrategy} strategies.\n                        </p>\n                      </div>\n                      <div className=\"flex justify-end gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => setShowCustomNameDialog(false)}\n                          size=\"sm\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          onClick={handleAddWithCustomName}\n                          disabled={!customName.trim()}\n                          size=\"sm\"\n                        >\n                          Add to Comparison\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </>\n          )}\n          \n          {/* Status indicators */}\n          {results && currentStrategyCount > 0 && (\n            <Badge variant=\"outline\" className=\"text-xs h-6 flex items-center justify-center gap-1 border-blue-500 text-blue-500 w-full\">\n              <BarChart3 className=\"h-3 w-3\" />\n              <span>\n                {currentStrategyCount === 1 ? 'In comparison' : `${currentStrategyCount} added`}\n              </span>\n            </Badge>\n          )}\n          \n          {/* Max comparisons reached indicator */}\n          {!canAddMoreComparisons() && (\n            <Badge variant=\"outline\" className=\"text-xs h-6 flex items-center justify-center gap-1 border-gray-400 text-gray-600 w-full\">\n              <Info className=\"h-3 w-3\" />\n              <span>Max comparisons (6)</span>\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      {/* Vehicle Counts Section */}\n      <div className=\"border-b border-gray-200 pb-3\">\n        <div className=\"flex items-center mb-2\">\n          <Truck className=\"h-4 w-4 mr-1 text-gray-600\" />\n          <h4 className=\"text-sm font-medium text-gray-700\">Fleet Configuration</h4>\n        </div>\n        \n        {/* Notice for manual mode */}\n        {isManualMode && (\n          <div className=\"bg-amber-50 border border-amber-200 rounded-md p-2 mb-3\">\n            <p className=\"text-xs text-amber-700\">\n              In Manual Distribution Mode, vehicle counts are managed in the Deployment Timeline section.\n            </p>\n          </div>\n        )}\n\n        {/* Vehicle Counts - Hidden in manual mode */}\n        {!isManualMode && (\n          <div className=\"grid grid-cols-3 gap-2\">\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                Light Duty\n              </label>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"number\"\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n                  min=\"0\"\n                  value={vehicleParameters.lightDutyCount}\n                  onChange={(e) => updateVehicleParameters({ \n                    ...vehicleParameters, \n                    lightDutyCount: parseInt(e.target.value) || 0 \n                  })}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                Medium Duty\n              </label>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"number\"\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n                  min=\"0\"\n                  value={vehicleParameters.mediumDutyCount}\n                  onChange={(e) => updateVehicleParameters({ \n                    ...vehicleParameters, \n                    mediumDutyCount: parseInt(e.target.value) || 0 \n                  })}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                Heavy Duty\n              </label>\n              <div className=\"flex items-center\">\n                <input\n                  type=\"number\"\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n                  min=\"0\"\n                  value={vehicleParameters.heavyDutyCount}\n                  onChange={(e) => updateVehicleParameters({ \n                    ...vehicleParameters, \n                    heavyDutyCount: parseInt(e.target.value) || 0 \n                  })}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Time Horizon */}\n      <div className=\"pt-2\">\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          Time Horizon\n        </label>\n        <div className=\"flex space-x-2\">\n          {[10, 15].map((years) => (\n            <Button\n              key={years}\n              variant={timeHorizon === years ? \"default\" : \"outline\"}\n              className={timeHorizon === years \n                ? \"px-3 py-1 text-sm bg-blue-600 text-white dark:bg-blue-500 dark:text-white rounded shadow hover:bg-blue-700 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:ring-offset-2 dark:focus:ring-offset-gray-800\" \n                : \"px-3 py-1 text-sm bg-gray-200 text-gray-700 dark:bg-gray-600 dark:text-gray-100 rounded shadow hover:bg-gray-300 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"}\n              onClick={() => updateTimeHorizon(years)}\n            >\n              {years} Years\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Deployment Strategy */}\n      <div className=\"pt-2\">\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          Deployment Strategy\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"ml-2 inline-block text-gray-500 dark:text-gray-400 cursor-help\">\n                  <Info size={16} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent className=\"w-60\">\n                <p className=\"text-xs\">Choose how to distribute vehicle purchases over time. Select \"Manual Distribution\" to enter your own quantities in the timeline below.</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </label>\n        <select\n          className=\"block w-full rounded-md border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm\"\n          value={deploymentStrategy}\n          onChange={(e) => updateDeploymentStrategy(e.target.value as any)}\n        >\n          <option value=\"immediate\">Immediate Purchase</option>\n          <option value=\"phased\">Phased (Even Distribution)</option>\n          <option value=\"aggressive\">Aggressive Early</option>\n          <option value=\"deferred\">Deferred (Late Heavy)</option>\n          <option value=\"manual\">Manual Distribution</option>\n        </select>\n        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n          {strategyDescriptions[deploymentStrategy]}\n        </p>\n      </div>\n\n      {/* Chart Display Options */}\n      <div className=\"pt-2\">\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          Chart Display Options\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"ml-2 inline-block text-gray-500 dark:text-gray-400 cursor-help\">\n                  <Info size={16} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent className=\"w-60\">\n                <p className=\"text-xs\">Toggle to hide negative values from all charts. This adjusts the Y-axis scale to focus only on positive ROI periods.</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </label>\n        <Button\n          variant={hideNegativeValues ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={toggleHideNegativeValues}\n          className={`w-full flex items-center justify-center gap-2 text-sm ${\n            hideNegativeValues \n              ? \"bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500\" \n              : \"bg-gray-100 text-gray-700 hover:bg-gray-200 focus:ring-2 focus:ring-blue-500\"\n          }`}\n        >\n          {hideNegativeValues ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n          {hideNegativeValues ? \"Show All Values\" : \"Hide Negative Values\"}\n        </Button>\n        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n          {hideNegativeValues \n            ? \"Charts show only positive values with adjusted scale\"\n            : \"Charts show complete data including negative values\"\n          }\n        </p>\n      </div>\n\n      {/* Tip for comparison */}\n      {comparisonItems.length > 0 && (\n        <div className=\"pt-2 text-xs text-gray-500 dark:text-gray-400\">\n          <p className=\"italic\">\n            Tip: You can compare up to 6 different strategies to analyze ROI and environmental benefits.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14423},"client/src/components/cng-calculator/MainContent.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { useComparison } from \"@/contexts/ComparisonContext\";\nimport { useDarkMode } from \"@/contexts/DarkModeContext\";\nimport { useTooltips } from \"@/contexts/TooltipContext\";\nimport FleetConfiguration from \"./FleetConfiguration\";\nimport DeploymentTimeline from \"./DeploymentTimeline\";\nimport FinancialAnalysis from \"./FinancialAnalysis\";\nimport AdditionalMetrics from \"./AdditionalMetrics\";\nimport StrategyComparison from \"./StrategyComparison\";\nimport SensitivityAnalysis from \"./SensitivityAnalysis\";\nimport { TooltipToggle } from \"./TooltipToggle\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, PanelLeft, PanelRight, Moon, Sun } from \"lucide-react\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\n\nexport default function MainContent() {\n  const { deploymentStrategy, results, vehicleParameters, stationConfig, fuelPrices, timeHorizon, hideNegativeValues } = useCalculator();\n  const { darkMode, toggleDarkMode } = useDarkMode();\n  const [showCashflow, setShowCashflow] = useState(true);\n  const [isExporting, setIsExporting] = useState(false);\n  const contentRef = useRef<HTMLDivElement>(null);\n  \n  // Function to handle PDF export\n  const handleExportPDF = async () => {\n    if (!results) return;\n    \n    try {\n      setIsExporting(true);\n      \n      // Create a date string for the report\n      const date = new Date().toLocaleDateString('en-US', { \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n      \n      // Initialize PDF document (A4 size in portrait for better layout)\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4'\n      });\n      \n      // Page dimensions\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 15;\n      const contentWidth = pageWidth - (margin * 2);\n      \n      // ==================== TITLE PAGE ====================\n      \n      // Add title page background\n      pdf.setFillColor(darkMode ? 35 : 240, darkMode ? 41 : 245, darkMode ? 47 : 250);\n      pdf.rect(0, 0, pageWidth, pageHeight, 'F');\n      \n      // Draw header bar\n      pdf.setFillColor(darkMode ? 50 : 220, darkMode ? 55 : 225, darkMode ? 60 : 230);\n      pdf.rect(0, 0, pageWidth, 40, 'F');\n      \n      // Header text\n      pdf.setFontSize(24);\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.text('CNG Fleet Analysis Report', margin, margin + 10);\n      \n      // Strategy information\n      pdf.setFontSize(18);\n      pdf.setTextColor(darkMode ? 230 : 40, darkMode ? 230 : 40, darkMode ? 230 : 40);\n      pdf.text(`${strategyTitles[deploymentStrategy]}`, margin, margin + 35);\n      \n      pdf.setFontSize(12);\n      pdf.setTextColor(darkMode ? 200 : 80, darkMode ? 200 : 80, darkMode ? 200 : 80);\n      pdf.text(`${strategyTaglines[deploymentStrategy]}`, margin, margin + 45);\n      \n      // Generate date\n      pdf.text(`Generated on ${date}`, margin, margin + 55);\n      \n      // Fleet information box\n      const boxY = margin + 65;\n      pdf.setDrawColor(darkMode ? 70 : 200, darkMode ? 70 : 200, darkMode ? 70 : 200);\n      pdf.setFillColor(darkMode ? 50 : 245, darkMode ? 55 : 250, darkMode ? 60 : 255);\n      pdf.roundedRect(margin, boxY, contentWidth, 45, 3, 3, 'FD');\n      \n      // Fleet details\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.setFontSize(14);\n      pdf.text('Fleet Composition:', margin + 5, boxY + 12);\n      \n      pdf.setFontSize(11);\n      const vehicleY = boxY + 20;\n      const col1X = margin + 10;\n      const col2X = margin + 70;\n      const col3X = margin + 130;\n      \n      // Labels\n      pdf.setTextColor(darkMode ? 200 : 80, darkMode ? 200 : 80, darkMode ? 200 : 80);\n      pdf.text('Light-Duty:', col1X, vehicleY + 10);\n      pdf.text('Medium-Duty:', col2X, vehicleY + 10);\n      pdf.text('Heavy-Duty:', col3X, vehicleY + 10);\n      \n      // Values \n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.setFontSize(14);\n      pdf.text(`${vehicleParameters.lightDutyCount}`, col1X + 35, vehicleY + 10);\n      pdf.text(`${vehicleParameters.mediumDutyCount}`, col2X + 41, vehicleY + 10);\n      pdf.text(`${vehicleParameters.heavyDutyCount}`, col3X + 35, vehicleY + 10);\n      \n      // Station information box\n      const stationBoxY = boxY + 55;\n      pdf.setDrawColor(darkMode ? 70 : 200, darkMode ? 70 : 200, darkMode ? 70 : 200);\n      pdf.setFillColor(darkMode ? 50 : 245, darkMode ? 55 : 250, darkMode ? 60 : 255);\n      pdf.roundedRect(margin, stationBoxY, contentWidth, 50, 3, 3, 'FD');\n      \n      // Station details\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.setFontSize(14);\n      pdf.text('Station Configuration:', margin + 5, stationBoxY + 12);\n      \n      pdf.setFontSize(11);\n      const stationDetailY = stationBoxY + 25;\n      \n      // Left column - labels\n      pdf.setTextColor(darkMode ? 200 : 80, darkMode ? 200 : 80, darkMode ? 200 : 80);\n      pdf.text('Station Type:', margin + 10, stationDetailY);\n      pdf.text('Business Type:', margin + 10, stationDetailY + 10);\n      pdf.text('Payment Option:', margin + 10, stationDetailY + 20);\n      \n      // Right column - values\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.text(`${stationConfig.stationType === 'fast' ? 'Fast-Fill' : 'Time-Fill'}`, margin + 50, stationDetailY);\n      pdf.text(`${stationConfig.businessType === 'aglc' ? 'Alternative Gas & Light Company' : 'Clean Gas Corporation'}`, margin + 50, stationDetailY + 10);\n      pdf.text(`${stationConfig.turnkey ? 'TurnKey (Upfront)' : 'Financed'}`, margin + 50, stationDetailY + 20);\n      \n      // Key Metrics\n      const metricsBoxY = stationBoxY + 60;\n      pdf.setDrawColor(darkMode ? 70 : 200, darkMode ? 70 : 200, darkMode ? 70 : 200);\n      pdf.setFillColor(darkMode ? 50 : 245, darkMode ? 55 : 250, darkMode ? 60 : 255);\n      pdf.roundedRect(margin, metricsBoxY, contentWidth, 90, 3, 3, 'FD');\n      \n      // Metrics header\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.setFontSize(14);\n      pdf.text('Key Financial & Environmental Metrics', margin + 5, metricsBoxY + 12);\n      \n      // Create metrics in a 2x5 grid layout\n      const metrics = [\n        { name: 'Total Investment', value: `$${results.totalInvestment.toLocaleString()}` },\n        { name: 'Payback Period', value: results.paybackPeriod < 0 ? 'Never' : `${Math.floor(results.paybackPeriod)} years, ${Math.round((results.paybackPeriod % 1) * 12)} months` },\n        { name: 'ROI', value: `${Math.round(results.roi)}%` },\n        { name: 'Annual Rate of Return', value: `${results.annualRateOfReturn.toFixed(1)}%` },\n        { name: 'Annual Fuel Savings', value: `$${results.annualFuelSavings.toLocaleString()}` },\n        { name: 'Net Cash Flow', value: `$${results.netCashFlow.toLocaleString()}` },\n        { name: 'CO₂ Reduction', value: `${results.co2Reduction.toLocaleString()} kg` },\n        { name: 'Cost Per Mile (Gasoline)', value: `$${results.costPerMileGasoline.toFixed(3)}` },\n        { name: 'Cost Per Mile (CNG)', value: `$${results.costPerMileCNG.toFixed(3)}` },\n        { name: 'Cost Reduction', value: `${results.costReduction.toFixed(1)}%` }\n      ];\n      \n      // Layout metrics in two columns with clear spacing\n      const colWidth = contentWidth / 2;\n      const metricX1 = margin + 10;\n      const metricX2 = margin + 10 + colWidth;\n      const metricValueOffset = 62;\n      \n      pdf.setFontSize(10);\n      metrics.forEach((metric, index) => {\n        const col = index < 5 ? 0 : 1;\n        const row = index % 5;\n        const x = col === 0 ? metricX1 : metricX2;\n        const y = metricsBoxY + 30 + (row * 12);\n        \n        pdf.setTextColor(darkMode ? 200 : 80, darkMode ? 200 : 80, darkMode ? 200 : 80);\n        pdf.text(metric.name + ':', x, y);\n        \n        pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n        pdf.text(metric.value, x + metricValueOffset, y);\n      });\n      \n      // ==================== FINANCIAL ANALYSIS PAGE ====================\n      pdf.addPage();\n      \n      // Add page background\n      pdf.setFillColor(darkMode ? 35 : 240, darkMode ? 41 : 245, darkMode ? 47 : 250);\n      pdf.rect(0, 0, pageWidth, pageHeight, 'F');\n      \n      // Draw header bar\n      pdf.setFillColor(darkMode ? 50 : 220, darkMode ? 55 : 225, darkMode ? 60 : 230);\n      pdf.rect(0, 0, pageWidth, 30, 'F');\n      \n      // Page header\n      pdf.setFontSize(16);\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.text('Financial Analysis', margin, margin + 5);\n      \n      // Capture the financial analysis card\n      const financialEl = document.querySelector('.financial-analysis');\n      if (financialEl) {\n        const canvas = await html2canvas(financialEl as HTMLElement, {\n          scale: 1.5,\n          useCORS: true,\n          allowTaint: true,\n          backgroundColor: darkMode ? '#1f2937' : '#ffffff'\n        });\n        \n        const imgWidth = contentWidth;\n        const imgHeight = (canvas.height * imgWidth) / canvas.width;\n        \n        // Add the financial charts\n        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', margin, 40, imgWidth, imgHeight);\n      }\n      \n      // ==================== DEPLOYMENT TIMELINE PAGE ====================\n      pdf.addPage();\n      \n      // Add page background\n      pdf.setFillColor(darkMode ? 35 : 240, darkMode ? 41 : 245, darkMode ? 47 : 250);\n      pdf.rect(0, 0, pageWidth, pageHeight, 'F');\n      \n      // Draw header bar\n      pdf.setFillColor(darkMode ? 50 : 220, darkMode ? 55 : 225, darkMode ? 60 : 230);\n      pdf.rect(0, 0, pageWidth, 30, 'F');\n      \n      // Page header\n      pdf.setFontSize(16);\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.text('Deployment Timeline', margin, margin + 5);\n      \n      // Capture just the deployment timeline\n      const timelineEl = document.querySelector('.deployment-timeline');\n      if (timelineEl) {\n        const canvas = await html2canvas(timelineEl as HTMLElement, {\n          scale: 1.5,\n          useCORS: true,\n          allowTaint: true,\n          backgroundColor: darkMode ? '#1f2937' : '#ffffff'\n        });\n        \n        const imgWidth = contentWidth;\n        const imgHeight = (canvas.height * imgWidth) / canvas.width;\n        \n        // Use full page width for the timeline\n        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', margin, 40, imgWidth, imgHeight);\n      }\n      \n      // ==================== EMISSIONS & ADDITIONAL METRICS PAGE ====================\n      pdf.addPage();\n      \n      // Add page background\n      pdf.setFillColor(darkMode ? 35 : 240, darkMode ? 41 : 245, darkMode ? 47 : 250);\n      pdf.rect(0, 0, pageWidth, pageHeight, 'F');\n      \n      // Draw header bar\n      pdf.setFillColor(darkMode ? 50 : 220, darkMode ? 55 : 225, darkMode ? 60 : 230);\n      pdf.rect(0, 0, pageWidth, 30, 'F');\n      \n      // Page header\n      pdf.setFontSize(16);\n      pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n      pdf.text('Environmental Impact & Additional Metrics', margin, margin + 5);\n      \n      // Capture the additional metrics section\n      const metricsEl = document.querySelector('.additional-metrics');\n      if (metricsEl) {\n        const canvas = await html2canvas(metricsEl as HTMLElement, {\n          scale: 1.5,\n          useCORS: true,\n          allowTaint: true,\n          backgroundColor: darkMode ? '#1f2937' : '#ffffff'\n        });\n        \n        const imgWidth = contentWidth;\n        const imgHeight = (canvas.height * imgWidth) / canvas.width;\n        \n        // Position environmental metrics on its own page\n        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', margin, 40, imgWidth, imgHeight);\n      }\n      \n      // ==================== SENSITIVITY ANALYSIS PAGE ====================\n      \n      // Get the sensitivity analysis element if it exists\n      const sensitivityEl = document.querySelector('.sensitivity-analysis');\n      if (sensitivityEl) {\n        pdf.addPage();\n        \n        // Add page background\n        pdf.setFillColor(darkMode ? 35 : 240, darkMode ? 41 : 245, darkMode ? 47 : 250);\n        pdf.rect(0, 0, pageWidth, pageHeight, 'F');\n        \n        // Draw header bar\n        pdf.setFillColor(darkMode ? 50 : 220, darkMode ? 55 : 225, darkMode ? 60 : 230);\n        pdf.rect(0, 0, pageWidth, 30, 'F');\n        \n        // Page header\n        pdf.setFontSize(16);\n        pdf.setTextColor(darkMode ? 255 : 0, darkMode ? 255 : 0, darkMode ? 255 : 0);\n        pdf.text('Sensitivity Analysis', margin, margin + 5);\n        \n        const canvas = await html2canvas(sensitivityEl as HTMLElement, {\n          scale: 1.5,\n          useCORS: true,\n          allowTaint: true,\n          backgroundColor: darkMode ? '#1f2937' : '#ffffff'\n        });\n        \n        const imgWidth = contentWidth;\n        const imgHeight = (canvas.height * imgWidth) / canvas.width;\n        \n        // Add the sensitivity analysis\n        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', margin, 40, imgWidth, imgHeight);\n      }\n      \n      // Save the PDF with a descriptive filename\n      pdf.save(`CNG_Analysis_${deploymentStrategy}_${date.replace(/[\\s,]+/g, '_')}.pdf`);\n      \n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      alert('There was an error generating the PDF. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  // Strategy titles and taglines\n  const strategyTitles = {\n    immediate: \"Immediate Purchase Strategy\",\n    phased: \"Phased Deployment Strategy\",\n    aggressive: \"Aggressive Early Strategy\",\n    deferred: \"Deferred Deployment Strategy\",\n    manual: \"Custom Deployment Strategy\"\n  };\n\n  const strategyTaglines = {\n    immediate: \"Full upfront investment for maximum savings potential\",\n    phased: \"Balanced approach with steady investment over time\",\n    aggressive: \"Front-loaded investment to accelerate savings\",\n    deferred: \"Gradual deployment with heavier investment in later years\",\n    manual: \"Customized deployment based on your specific needs\"\n  };\n\n  const { toggleSidebar, sidebarCollapsed } = useCalculator();\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6\" ref={contentRef}>\n      {/* Strategy Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-col md:flex-row md:justify-between md:items-center\">\n          <div className=\"flex items-center gap-3\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              className=\"h-8 w-8 bg-transparent\"\n              onClick={toggleSidebar}\n              title={sidebarCollapsed ? \"Show Sidebar\" : \"Hide Sidebar\"}\n            >\n              {sidebarCollapsed ? (\n                <PanelRight className=\"h-4 w-4\" />\n              ) : (\n                <PanelLeft className=\"h-4 w-4\" />\n              )}\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                {strategyTitles[deploymentStrategy]}\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                {strategyTaglines[deploymentStrategy]} • <span className=\"text-green-600 text-sm\">Auto-updating</span>\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center mt-3 md:mt-0 space-x-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"cashflowToggle\" className=\"mr-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Show Cash Flow\n              </Label>\n              <Switch\n                id=\"cashflowToggle\"\n                checked={showCashflow}\n                onCheckedChange={setShowCashflow}\n                className=\"data-[state=checked]:bg-blue-500\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"darkModeToggle\" className=\"mr-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                {darkMode ? \"Light Mode\" : \"Dark Mode\"}\n              </Label>\n              <Switch\n                id=\"darkModeToggle\"\n                checked={darkMode}\n                onCheckedChange={toggleDarkMode}\n                className=\"dark-mode-transition data-[state=checked]:bg-blue-500\"\n              />\n              <span className=\"ml-1\">\n                {darkMode ? (\n                  <Sun size={18} className=\"text-amber-500 dark:text-amber-300\" />\n                ) : (\n                  <Moon size={18} className=\"text-blue-800 dark:text-blue-300\" />\n                )}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <TooltipToggle />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content sections */}\n      <FleetConfiguration showCashflow={showCashflow} />\n      \n      <DeploymentTimeline />\n      \n      {results && (\n        <>\n          <FinancialAnalysis showCashflow={showCashflow} hideNegativeValues={hideNegativeValues} />\n          \n          <AdditionalMetrics showCashflow={showCashflow} />\n          \n          {/* Advanced Analysis Tabs */}\n          <div className=\"mb-6\">\n            <Tabs defaultValue=\"comparison\" className=\"w-full\">\n              <TabsList className=\"w-full bg-gray-100 dark:bg-gray-800 p-1 mb-4\">\n                <TabsTrigger value=\"comparison\" className=\"flex-1 py-2 dark:data-[state=active]:bg-blue-600 dark:data-[state=active]:text-white\">Strategy Comparison</TabsTrigger>\n                <TabsTrigger value=\"sensitivity\" className=\"flex-1 py-2 dark:data-[state=active]:bg-blue-600 dark:data-[state=active]:text-white\">Sensitivity Analysis</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"comparison\" className=\"mt-0\">\n                <StrategyComparison />\n              </TabsContent>\n              \n              <TabsContent value=\"sensitivity\" className=\"mt-0\">\n                <SensitivityAnalysis hideNegativeValues={hideNegativeValues} />\n              </TabsContent>\n            </Tabs>\n          </div>\n          \n          {/* Export/Save Actions */}\n          <div className=\"flex flex-wrap justify-end gap-3 mt-6\">\n            <Button \n              variant=\"outline\" \n              className=\"inline-flex items-center dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600 dark:border-gray-600\"\n              onClick={handleExportPDF}\n              disabled={isExporting}\n            >\n              {isExporting ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-2 h-5 w-5 text-gray-500 dark:text-gray-300\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Generating PDF...\n                </>\n              ) : (\n                <>\n                  <Download className=\"h-5 w-5 mr-2\" />\n                  Export PDF\n                </>\n              )}\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":19978},"client/src/components/cng-calculator/MetricInfoTooltip.tsx":{"content":"import React from \"react\";\nimport { Info } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { useTooltips } from \"@/contexts/TooltipContext\";\n\ninterface MetricInfoTooltipProps {\n  title: string;\n  description: string;\n  calculation?: string;\n  affectingVariables?: string[];\n  simpleDescription?: string; // Simple description when detailed tooltips are off\n}\n\nexport function MetricInfoTooltip({\n  title,\n  description,\n  calculation,\n  affectingVariables,\n  simpleDescription,\n}: MetricInfoTooltipProps) {\n  const { showDetailedTooltips } = useTooltips();\n  \n  // If simple description is not provided, use the full description\n  const tooltipDescription = !showDetailedTooltips && simpleDescription \n    ? simpleDescription \n    : description;\n\n  return (\n    <TooltipProvider>\n      <Tooltip delayDuration={300}>\n        <TooltipTrigger asChild>\n          <div className=\"inline-flex items-center cursor-help ml-1\">\n            <Info size={16} className=\"text-gray-500 hover:text-gray-700\" />\n          </div>\n        </TooltipTrigger>\n        <TooltipContent side=\"right\" className={showDetailedTooltips ? \"max-w-md p-4\" : \"p-3\"}>\n          <div className=\"space-y-2\">\n            <h4 className=\"font-semibold text-sm\">{title}</h4>\n            <p className=\"text-xs text-gray-600\">{tooltipDescription}</p>\n            \n            {showDetailedTooltips && calculation && (\n              <>\n                <h5 className=\"font-medium text-xs mt-2\">Calculation:</h5>\n                <p className=\"text-xs text-gray-600\">{calculation}</p>\n              </>\n            )}\n            \n            {showDetailedTooltips && affectingVariables && affectingVariables.length > 0 && (\n              <>\n                <h5 className=\"font-medium text-xs mt-2\">Affecting Factors:</h5>\n                <ul className=\"text-xs text-gray-600 list-disc pl-4\">\n                  {affectingVariables.map((variable, index) => (\n                    <li key={index}>{variable}</li>\n                  ))}\n                </ul>\n              </>\n            )}\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","size_bytes":2220},"client/src/components/cng-calculator/MultiVariableAnalysis.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { MetricInfoTooltip } from \"./MetricInfoTooltip\";\n\n// Type for sensitivity variables\ntype SensitivityVariable = \n  | \"gasolinePrice\" \n  | \"dieselPrice\" \n  | \"cngPrice\" \n  | \"lightDutyCost\"\n  | \"mediumDutyCost\"\n  | \"heavyDutyCost\"\n  | \"annualMiles\";\n\n// Variable settings and labels\nconst variableConfig = {\n  gasolinePrice: {\n    label: \"Gasoline Price ($/gallon)\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  },\n  dieselPrice: {\n    label: \"Diesel Price ($/gallon)\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  },\n  cngPrice: {\n    label: \"CNG Price ($/GGE)\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  },\n  lightDutyCost: {\n    label: \"Light Duty Vehicle Cost\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  },\n  mediumDutyCost: {\n    label: \"Medium Duty Vehicle Cost\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  },\n  heavyDutyCost: {\n    label: \"Heavy Duty Vehicle Cost\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  },\n  annualMiles: {\n    label: \"Annual Miles Driven\",\n    min: -50,\n    max: 50,\n    step: 10,\n    defaultValue: 0,\n    weight: 1\n  }\n};\n\n// Component for the heat map\nconst HeatMapVisualization = ({ \n  xVariable, \n  yVariable, \n  heatMapData, \n  xValues, \n  yValues, \n  metric\n}: { \n  xVariable: SensitivityVariable; \n  yVariable: SensitivityVariable; \n  heatMapData: number[][]; \n  xValues: number[];\n  yValues: number[];\n  metric: 'payback' | 'roi' | 'netCashFlow';\n}) => {\n  const [selectedCell, setSelectedCell] = useState<{x: number, y: number, value: number} | null>(null);\n  \n  // Color functions for different metrics\n  const getPaybackColor = (value: number, min: number, max: number) => {\n    // Lower payback period is better (green), higher is worse (red)\n    const normalized = (value - min) / (max - min); // 0 to 1\n    const inversed = 1 - normalized; // 1 to 0 (best to worst)\n    \n    // RGB values for the gradient from red to yellow to green\n    const r = inversed <= 0.5 ? 255 : Math.floor(255 * (1 - (inversed - 0.5) * 2));\n    const g = inversed >= 0.5 ? 255 : Math.floor(255 * inversed * 2);\n    const b = 0;\n    \n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  \n  const getRoiColor = (value: number, min: number, max: number) => {\n    // Higher ROI is better (green), lower is worse (red)\n    const normalized = (value - min) / (max - min); // 0 to 1\n    \n    // RGB values for the gradient from red to yellow to green\n    const r = normalized <= 0.5 ? 255 : Math.floor(255 * (1 - (normalized - 0.5) * 2));\n    const g = normalized >= 0.5 ? 255 : Math.floor(255 * normalized * 2);\n    const b = 0;\n    \n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  \n  const getCashFlowColor = (value: number, min: number, max: number) => {\n    // Higher cash flow is better (green), lower is worse (red)\n    const normalized = (value - min) / (max - min); // 0 to 1\n    \n    // RGB values for the gradient from red to yellow to green\n    const r = normalized <= 0.5 ? 255 : Math.floor(255 * (1 - (normalized - 0.5) * 2));\n    const g = normalized >= 0.5 ? 255 : Math.floor(255 * normalized * 2);\n    const b = 0;\n    \n    return `rgb(${r}, ${g}, ${b})`;\n  };\n  \n  // Find min and max values for color scaling\n  const allValues = heatMapData.flat().filter(value => !isNaN(value));\n  const minValue = Math.min(...allValues);\n  const maxValue = Math.max(...allValues);\n  \n  // Format values for display\n  const formatValue = (value: number): string => {\n    if (metric === 'payback') {\n      return formatPaybackPeriod(value);\n    } else if (metric === 'roi') {\n      return `${value.toFixed(1)}%`;\n    } else {\n      return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    }\n  };\n  \n  // Get appropriate color function based on the metric\n  const getColorForValue = (value: number) => {\n    if (metric === 'payback') {\n      return getPaybackColor(value, minValue, maxValue);\n    } else if (metric === 'roi') {\n      return getRoiColor(value, minValue, maxValue);\n    } else {\n      return getCashFlowColor(value, minValue, maxValue);\n    }\n  };\n  \n  return (\n    <div className=\"mt-4\">\n      <div className=\"heat-map-container relative bg-gray-100 rounded-lg p-4\">\n        {/* Y-axis labels */}\n        <div className=\"absolute top-4 left-0 flex flex-col h-[calc(100%-32px)] justify-between text-xs text-right pr-2\">\n          {yValues.map((value, idx) => (\n            <div key={idx} style={{ top: `${(idx / (yValues.length - 1)) * 100}%` }}>\n              {value > 0 ? `+${value}%` : `${value}%`}\n            </div>\n          ))}\n        </div>\n        \n        {/* X-axis labels */}\n        <div className=\"absolute bottom-0 left-16 flex w-[calc(100%-64px)] justify-between text-xs\">\n          {xValues.map((value, idx) => (\n            <div key={idx} style={{ left: `${(idx / (xValues.length - 1)) * 100}%` }}>\n              {value > 0 ? `+${value}%` : `${value}%`}\n            </div>\n          ))}\n        </div>\n        \n        {/* Heat map grid */}\n        <div className=\"heat-map ml-16 mt-2 mb-8 grid gap-0.5 overflow-hidden\"\n          style={{\n            gridTemplateColumns: `repeat(${xValues.length || 1}, minmax(20px, 1fr))`,\n            gridTemplateRows: `repeat(${yValues.length || 1}, minmax(20px, 1fr))`,\n            width: \"calc(100% - 16px)\",\n            height: \"350px\",\n            aspectRatio: (xValues.length || 1) / (yValues.length || 1) > 0 ? (xValues.length || 1) / (yValues.length || 1) : 1,\n            maxWidth: \"100%\"\n          }}>\n          {heatMapData.map((row, rowIdx) => (\n            row.map((value, colIdx) => (\n              <div\n                key={`${rowIdx}-${colIdx}`}\n                className=\"heat-map-cell relative cursor-pointer transition-colors hover:scale-105\"\n                style={{\n                  backgroundColor: getColorForValue(value),\n                  width: '100%',\n                  height: '100%',\n                }}\n                onClick={() => setSelectedCell({\n                  x: colIdx,\n                  y: rowIdx,\n                  value: value\n                })}\n                title={`${xVariable} ${xValues[colIdx]}%, ${yVariable} ${yValues[rowIdx]}%: ${formatValue(value)}`}\n              />\n            ))\n          ))}\n        </div>\n        \n        {/* Axis labels */}\n        <div className=\"flex justify-between items-center mt-4\">\n          <div className=\"text-xs text-gray-500\">\n            <div className=\"mb-1 font-medium\">{variableConfig[yVariable].label} (Y-axis)</div>\n          </div>\n          <div className=\"text-xs text-gray-500\">\n            <div className=\"mb-1 font-medium\">{variableConfig[xVariable].label} (X-axis)</div>\n          </div>\n        </div>\n        \n        {/* Legend */}\n        <div className=\"mt-6\">\n          <div className=\"text-xs font-medium mb-2\">Legend</div>\n          <div className=\"flex items-center\">\n            <div className=\"w-full h-4 rounded-md\" style={{\n              background: metric === 'payback'\n                ? 'linear-gradient(to right, #ff0000, #ffff00, #00ff00)'\n                : 'linear-gradient(to right, #ff0000, #ffff00, #00ff00)'\n            }}></div>\n          </div>\n          <div className=\"flex justify-between text-xs mt-1\">\n            <span>{metric === 'payback' ? 'Longer Payback' : 'Worse'}</span>\n            <span>Neutral</span>\n            <span>{metric === 'payback' ? 'Shorter Payback' : 'Better'}</span>\n          </div>\n        </div>\n        \n        {/* Selected cell info */}\n        {selectedCell && (\n          <div className=\"mt-4 p-3 bg-white border rounded-md shadow-sm\">\n            <div className=\"text-sm font-medium mb-2\">Selected Point Details</div>\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div className=\"text-gray-600\">{variableConfig[xVariable].label}</div>\n              <div className=\"font-medium\">{xValues[selectedCell.x] > 0 ? `+${xValues[selectedCell.x]}%` : `${xValues[selectedCell.x]}%`}</div>\n              \n              <div className=\"text-gray-600\">{variableConfig[yVariable].label}</div>\n              <div className=\"font-medium\">{yValues[selectedCell.y] > 0 ? `+${yValues[selectedCell.y]}%` : `${yValues[selectedCell.y]}%`}</div>\n              \n              <div className=\"text-gray-600 border-t pt-1 mt-1\">\n                {metric === 'payback' ? 'Payback Period' : metric === 'roi' ? 'ROI' : 'Net Cash Flow'}\n              </div>\n              <div className=\"font-medium border-t pt-1 mt-1\">{formatValue(selectedCell.value)}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default function MultiVariableAnalysis({ hideNegativeValues = false }: { hideNegativeValues?: boolean }) {\n  const { \n    vehicleParameters, \n    stationConfig, \n    fuelPrices, \n    timeHorizon, \n    deploymentStrategy,\n    results,\n  } = useCalculator();\n  \n  // Selected variables for the analysis\n  const [primaryVariable, setPrimaryVariable] = useState<SensitivityVariable>(\"gasolinePrice\");\n  const [secondaryVariable, setSecondaryVariable] = useState<SensitivityVariable>(\"cngPrice\");\n  const [tertiaryVariable, setTertiaryVariable] = useState<SensitivityVariable | null>(null);\n  \n  // Variable weights (used when multiple variables are active)\n  const [variableWeights, setVariableWeights] = useState<Record<SensitivityVariable, number>>({\n    gasolinePrice: 1,\n    dieselPrice: 1,\n    cngPrice: 1,\n    lightDutyCost: 1,\n    mediumDutyCost: 1,\n    heavyDutyCost: 1,\n    annualMiles: 1\n  });\n  \n  // Selected metric\n  const [activeMetric, setActiveMetric] = useState<\"payback\" | \"roi\" | \"netCashFlow\">(\"payback\");\n  \n  // Heat map data\n  const [heatMapData, setHeatMapData] = useState<number[][]>([]);\n  const [xValues, setXValues] = useState<number[]>([]);\n  const [yValues, setYValues] = useState<number[]>([]);\n  \n  // Calculate heat map data when variables or results change\n  useEffect(() => {\n    if (!results) return;\n    \n    // Generate x and y axis values\n    const primarySteps = Math.floor((variableConfig[primaryVariable].max - variableConfig[primaryVariable].min) / variableConfig[primaryVariable].step) + 1;\n    const secondarySteps = Math.floor((variableConfig[secondaryVariable].max - variableConfig[secondaryVariable].min) / variableConfig[secondaryVariable].step) + 1;\n    \n    const xAxisValues = [];\n    for (let i = 0; i < primarySteps; i++) {\n      const percentage = variableConfig[primaryVariable].min + (i * variableConfig[primaryVariable].step);\n      xAxisValues.push(percentage);\n    }\n    \n    const yAxisValues = [];\n    for (let i = 0; i < secondarySteps; i++) {\n      const percentage = variableConfig[secondaryVariable].min + (i * variableConfig[secondaryVariable].step);\n      yAxisValues.push(percentage);\n    }\n    \n    // Store x and y values for reference\n    setXValues(xAxisValues);\n    setYValues(yAxisValues.slice().reverse()); // Reverse y-values to have min at bottom, max at top\n    \n    // Generate heat map data\n    const heatData: number[][] = [];\n    \n    for (let y = 0; y < secondarySteps; y++) {\n      const row: number[] = [];\n      const secondaryPercentage = variableConfig[secondaryVariable].min + (y * variableConfig[secondaryVariable].step);\n      \n      for (let x = 0; x < primarySteps; x++) {\n        const primaryPercentage = variableConfig[primaryVariable].min + (x * variableConfig[primaryVariable].step);\n        \n        // Calculate modified values\n        const primaryModifiedValue = calculateModifiedValue(primaryVariable, primaryPercentage);\n        const secondaryModifiedValue = calculateModifiedValue(secondaryVariable, secondaryPercentage);\n        \n        // Calculate result for this combination\n        const result = calculateCombinedResult(\n          primaryVariable, primaryModifiedValue,\n          secondaryVariable, secondaryModifiedValue,\n          tertiaryVariable\n        );\n        \n        // Store the metric value for the heatmap, filtering negatives if requested\n        let metricValue: number;\n        if (activeMetric === 'payback') {\n          metricValue = result.paybackPeriod;\n        } else if (activeMetric === 'roi') {\n          metricValue = result.roi;\n        } else {\n          metricValue = result.netCashFlow;\n        }\n        \n        // Apply negative value filtering\n        if (hideNegativeValues && metricValue < 0) {\n          metricValue = 0;\n        }\n        \n        row.push(metricValue);\n      }\n      \n      // Note: we reverse the rows to match the y-axis orientation\n      heatData.unshift(row);\n    }\n    \n    setHeatMapData(heatData);\n    \n  }, [primaryVariable, secondaryVariable, tertiaryVariable, variableWeights, activeMetric, results]);\n  \n  // Calculate the modified value for a single variable\n  const calculateModifiedValue = (variable: SensitivityVariable, percentage: number) => {\n    switch (variable) {\n      case \"gasolinePrice\":\n        return fuelPrices.gasolinePrice * (1 + percentage / 100);\n      case \"dieselPrice\":\n        return fuelPrices.dieselPrice * (1 + percentage / 100);\n      case \"cngPrice\":\n        return fuelPrices.cngPrice * (1 + percentage / 100);\n      case \"lightDutyCost\":\n      case \"mediumDutyCost\":\n      case \"heavyDutyCost\":\n      case \"annualMiles\":\n        // These would need appropriate base values from the context\n        return (1 + percentage / 100);\n      default:\n        return 0;\n    }\n  };\n  \n  // Calculate combined result for multiple variables\n  const calculateCombinedResult = (\n    primaryVar: SensitivityVariable, primaryVal: number,\n    secondaryVar: SensitivityVariable, secondaryVal: number,\n    tertiaryVar: SensitivityVariable | null\n  ) => {\n    // For simplicity, we'll focus on primary and secondary variables for now\n    let basePayback = results?.paybackPeriod || 0;\n    let baseRoi = results?.roi || 0;\n    let baseNetCashFlow = results?.netCashFlow || 0;\n    \n    // Calculate impact factors for each variable\n    const primaryImpact = calculateVariableImpact(primaryVar, primaryVal);\n    const secondaryImpact = calculateVariableImpact(secondaryVar, secondaryVal);\n    \n    // Combine impacts with weights\n    const primaryWeight = variableWeights[primaryVar];\n    const secondaryWeight = variableWeights[secondaryVar];\n    const totalWeight = primaryWeight + secondaryWeight;\n    \n    const combinedPaybackFactor = \n      ((primaryImpact.paybackFactor * primaryWeight) + \n       (secondaryImpact.paybackFactor * secondaryWeight)) / totalWeight;\n      \n    const combinedRoiFactor = \n      ((primaryImpact.roiFactor * primaryWeight) + \n       (secondaryImpact.roiFactor * secondaryWeight)) / totalWeight;\n       \n    const combinedCashFlowFactor = \n      ((primaryImpact.cashFlowFactor * primaryWeight) + \n       (secondaryImpact.cashFlowFactor * secondaryWeight)) / totalWeight;\n    \n    return {\n      paybackPeriod: Math.max(0.5, basePayback * combinedPaybackFactor),\n      roi: Math.max(0, baseRoi * combinedRoiFactor),\n      netCashFlow: baseNetCashFlow * combinedCashFlowFactor\n    };\n  };\n  \n  // Calculate impact factors for a single variable\n  const calculateVariableImpact = (variable: SensitivityVariable, modifiedValue: number) => {\n    let paybackFactor = 1.0;\n    let roiFactor = 1.0;\n    let cashFlowFactor = 1.0;\n    \n    switch (variable) {\n      case \"gasolinePrice\":\n        // Higher gas price improves CNG financials\n        paybackFactor = modifiedValue / fuelPrices.gasolinePrice > 1 ? \n          1 / (modifiedValue / fuelPrices.gasolinePrice) : modifiedValue / fuelPrices.gasolinePrice;\n        roiFactor = modifiedValue / fuelPrices.gasolinePrice;\n        cashFlowFactor = modifiedValue / fuelPrices.gasolinePrice;\n        break;\n      case \"dieselPrice\":\n        // Higher diesel price improves CNG financials\n        paybackFactor = modifiedValue / fuelPrices.dieselPrice > 1 ? \n          1 / (modifiedValue / fuelPrices.dieselPrice) : modifiedValue / fuelPrices.dieselPrice;\n        roiFactor = modifiedValue / fuelPrices.dieselPrice;\n        cashFlowFactor = modifiedValue / fuelPrices.dieselPrice;\n        break;\n      case \"cngPrice\":\n        // Higher CNG price worsens financials\n        paybackFactor = fuelPrices.cngPrice / modifiedValue > 1 ? \n          fuelPrices.cngPrice / modifiedValue : 1 / (fuelPrices.cngPrice / modifiedValue);\n        roiFactor = fuelPrices.cngPrice / modifiedValue;\n        cashFlowFactor = fuelPrices.cngPrice / modifiedValue;\n        break;\n      // For the simplified model, we'll use a basic linear relationship for other variables\n      default:\n        paybackFactor = 1 / modifiedValue;\n        roiFactor = modifiedValue;\n        cashFlowFactor = modifiedValue;\n    }\n    \n    return { paybackFactor, roiFactor, cashFlowFactor };\n  };\n  \n  // Handle weight change for a variable\n  const handleWeightChange = (variable: SensitivityVariable, weight: number) => {\n    setVariableWeights(prev => ({\n      ...prev,\n      [variable]: weight\n    }));\n  };\n  \n  // Format currency\n  const formatCurrency = (value: number) => {\n    return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n  \n  return (\n    <Card className=\"bg-white rounded-lg shadow mb-6\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">\n          Multi-Variable Analysis\n          <MetricInfoTooltip\n            title=\"Multi-Variable Analysis\"\n            description=\"This advanced analysis examines how combinations of two variables simultaneously impact your financial metrics. The heat map visualization shows the interaction effects across different percentage changes.\"\n            calculation=\"Each cell in the heat map represents a unique combination of X and Y variable changes, color-coded to show the resulting impact on your selected metric (payback period, ROI, or net cash flow).\"\n            affectingVariables={[\n              \"Primary variable (X-axis)\",\n              \"Secondary variable (Y-axis)\",\n              \"Selected financial metric\",\n              \"Baseline project configuration\"\n            ]}\n            simpleDescription=\"Visualize how combinations of two variables interact to affect your project outcomes.\"\n          />\n        </h2>\n        \n        {results ? (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              {/* Variable Selection */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Variable Selection</h3>\n                \n                {/* Primary Variable (X-axis) */}\n                <div className=\"mb-4\">\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Primary Variable (X-axis)\n                  </Label>\n                  <Select \n                    value={primaryVariable} \n                    onValueChange={(value) => setPrimaryVariable(value as SensitivityVariable)}\n                  >\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Select primary variable\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(variableConfig).map(([key, config]) => (\n                        <SelectItem key={key} value={key}>{config.label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  \n                  {/* Weight slider for primary variable */}\n                  <div className=\"mt-2\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-xs text-gray-500\">Weight</span>\n                      <span className=\"text-xs font-medium\">{variableWeights[primaryVariable]}x</span>\n                    </div>\n                    <Slider \n                      value={[variableWeights[primaryVariable]]} \n                      min={0.5} \n                      max={2} \n                      step={0.1} \n                      onValueChange={(values) => handleWeightChange(primaryVariable, values[0])}\n                    />\n                  </div>\n                </div>\n                \n                {/* Secondary Variable (Y-axis) */}\n                <div className=\"mb-4\">\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Secondary Variable (Y-axis)\n                  </Label>\n                  <Select \n                    value={secondaryVariable} \n                    onValueChange={(value) => setSecondaryVariable(value as SensitivityVariable)}\n                  >\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Select secondary variable\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(variableConfig)\n                        .filter(([key]) => key !== primaryVariable)\n                        .map(([key, config]) => (\n                          <SelectItem key={key} value={key}>{config.label}</SelectItem>\n                        ))\n                      }\n                    </SelectContent>\n                  </Select>\n                  \n                  {/* Weight slider for secondary variable */}\n                  <div className=\"mt-2\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-xs text-gray-500\">Weight</span>\n                      <span className=\"text-xs font-medium\">{variableWeights[secondaryVariable]}x</span>\n                    </div>\n                    <Slider \n                      value={[variableWeights[secondaryVariable]]} \n                      min={0.5} \n                      max={2} \n                      step={0.1} \n                      onValueChange={(values) => handleWeightChange(secondaryVariable, values[0])}\n                    />\n                  </div>\n                </div>\n                \n                {/* Optional Tertiary Variable */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Label className=\"block text-sm font-medium text-gray-700\">\n                      Tertiary Variable (Optional)\n                    </Label>\n                    <Checkbox\n                      checked={tertiaryVariable !== null}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          // Find first available variable \n                          const available = Object.keys(variableConfig).find(\n                            key => key !== primaryVariable && key !== secondaryVariable\n                          );\n                          if (available) {\n                            setTertiaryVariable(available as SensitivityVariable);\n                          }\n                        } else {\n                          setTertiaryVariable(null);\n                        }\n                      }}\n                    />\n                  </div>\n                  \n                  {tertiaryVariable && (\n                    <>\n                      <Select \n                        value={tertiaryVariable} \n                        onValueChange={(value) => setTertiaryVariable(value as SensitivityVariable)}\n                      >\n                        <SelectTrigger className=\"w-full\">\n                          <SelectValue placeholder=\"Select tertiary variable\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {Object.entries(variableConfig)\n                            .filter(([key]) => key !== primaryVariable && key !== secondaryVariable)\n                            .map(([key, config]) => (\n                              <SelectItem key={key} value={key}>{config.label}</SelectItem>\n                            ))\n                          }\n                        </SelectContent>\n                      </Select>\n                      \n                      {/* Weight slider for tertiary variable */}\n                      <div className=\"mt-2\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <span className=\"text-xs text-gray-500\">Weight</span>\n                          <span className=\"text-xs font-medium\">{variableWeights[tertiaryVariable]}x</span>\n                        </div>\n                        <Slider \n                          value={[variableWeights[tertiaryVariable]]} \n                          min={0.5} \n                          max={2} \n                          step={0.1} \n                          onValueChange={(values) => handleWeightChange(tertiaryVariable, values[0])}\n                        />\n                      </div>\n                    </>\n                  )}\n                </div>\n                \n                {/* Current base values */}\n                <div className=\"mt-6\">\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Current Base Values</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">Payback Period</span>\n                      <span className=\"text-xs font-medium\">{formatPaybackPeriod(results.paybackPeriod)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">ROI ({timeHorizon} Years)</span>\n                      <span className=\"text-xs font-medium\">{Math.round(results.roi)}%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">Net Cash Flow</span>\n                      <span className=\"text-xs font-medium\">{formatCurrency(results.netCashFlow)}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Heat Map Visualization */}\n              <div className=\"bg-gray-50 p-4 rounded-lg col-span-1 md:col-span-2\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <h3 className=\"text-sm font-medium text-gray-700\">Variable Interaction Heat Map</h3>\n                  <div className=\"flex border rounded-md overflow-hidden\">\n                    <button \n                      className={`px-3 py-1 text-xs ${activeMetric === 'payback' ? 'bg-blue-500 text-white' : 'bg-gray-100'}`}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        setActiveMetric('payback');\n                      }}\n                    >\n                      Payback\n                    </button>\n                    <button \n                      className={`px-3 py-1 text-xs ${activeMetric === 'roi' ? 'bg-blue-500 text-white' : 'bg-gray-100'}`}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        setActiveMetric('roi');\n                      }}\n                    >\n                      ROI\n                    </button>\n                    <button \n                      className={`px-3 py-1 text-xs ${activeMetric === 'netCashFlow' ? 'bg-blue-500 text-white' : 'bg-gray-100'}`}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        setActiveMetric('netCashFlow');\n                      }}\n                    >\n                      Cash Flow\n                    </button>\n                  </div>\n                </div>\n                \n                <HeatMapVisualization\n                  xVariable={primaryVariable}\n                  yVariable={secondaryVariable}\n                  heatMapData={heatMapData}\n                  xValues={xValues}\n                  yValues={yValues}\n                  metric={activeMetric}\n                />\n                \n                <div className=\"mt-4 text-xs text-gray-500 leading-relaxed\">\n                  <p>This heat map shows how combinations of {variableConfig[primaryVariable].label} (X-axis) and {variableConfig[secondaryVariable].label} (Y-axis) impact your financial outcomes.</p>\n                  <p>Click on any cell to see detailed values for that combination.</p>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center py-10\">\n            <p className=\"text-gray-500\">Complete your fleet configuration to view multi-variable analysis.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":29470},"client/src/components/cng-calculator/SensitivityAnalysis.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { MetricInfoTooltip } from \"./MetricInfoTooltip\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer, ReferenceLine } from \"recharts\";\n\n// Type for sensitivity variable\ntype SensitivityVariable = \n  | \"gasolinePrice\" \n  | \"dieselPrice\" \n  | \"cngPrice\" \n  | \"lightDutyCost\"\n  | \"mediumDutyCost\"\n  | \"heavyDutyCost\"\n  | \"annualMiles\";\n\n// Variable settings\nconst variableConfig = {\n  gasolinePrice: {\n    label: \"Gasoline Price ($/gallon)\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  },\n  dieselPrice: {\n    label: \"Diesel Price ($/gallon)\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  },\n  cngPrice: {\n    label: \"CNG Price ($/GGE)\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  },\n  lightDutyCost: {\n    label: \"Light Duty Vehicle Cost\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  },\n  mediumDutyCost: {\n    label: \"Medium Duty Vehicle Cost\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  },\n  heavyDutyCost: {\n    label: \"Heavy Duty Vehicle Cost\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  },\n  annualMiles: {\n    label: \"Annual Miles Driven\",\n    min: -50,\n    max: 50,\n    step: 5,\n    defaultValue: 0,\n  }\n};\n\nexport default function SensitivityAnalysis({ hideNegativeValues = false }: { hideNegativeValues?: boolean }) {\n  const { \n    vehicleParameters, \n    stationConfig, \n    fuelPrices, \n    timeHorizon, \n    deploymentStrategy,\n    results,\n  } = useCalculator();\n\n  // State for selected variable and its variation percentage\n  const [selectedVariable, setSelectedVariable] = useState<SensitivityVariable>(\"gasolinePrice\");\n  const [variationPercentage, setVariationPercentage] = useState(0);\n  const [sensitivityData, setSensitivityData] = useState<any[]>([]);\n  const [activeMetric, setActiveMetric] = useState<\"payback\" | \"roi\" | \"netCashFlow\">(\"payback\");\n\n  // Labels for the metrics\n  const metricLabels = {\n    payback: \"Payback Period (Years)\",\n    roi: \"ROI (%)\",\n    netCashFlow: \"Net Cash Flow ($)\"\n  };\n\n  // Calculate sensitivity data whenever selected variable or variation changes\n  useEffect(() => {\n    if (!results) return;\n\n    // Generate data points for sensitivity analysis\n    const dataPoints = [];\n    \n    // Create points from min to max based on step size\n    const config = variableConfig[selectedVariable];\n    const steps = Math.floor((config.max - config.min) / config.step) + 1;\n    \n    for (let i = 0; i < steps; i++) {\n      const percentage = config.min + (i * config.step);\n      const modifiedValue = calculateModifiedValue(selectedVariable, percentage);\n      const result = calculateModifiedResult(selectedVariable, modifiedValue);\n      \n      dataPoints.push({\n        percentage,\n        payback: result.paybackPeriod,\n        roi: result.roi,\n        netCashFlow: result.netCashFlow,\n        // Calculate scaled cash flow for visualization on the same chart\n        netCashFlowScaled: result.netCashFlow / 10000,\n        label: `${percentage > 0 ? '+' : ''}${percentage}%`\n      });\n    }\n    \n    setSensitivityData(dataPoints);\n    \n    // Highlight the current selected variation\n    setVariationPercentage(Math.min(Math.max(variationPercentage, config.min), config.max));\n    \n  }, [selectedVariable, results, vehicleParameters, stationConfig, fuelPrices, timeHorizon, deploymentStrategy]);\n\n  // Calculate the modified value based on the selected variable and percentage\n  const calculateModifiedValue = (variable: SensitivityVariable, percentage: number) => {\n    // Convert percentage to ratio for calculations\n    const modificationRatio = 1 + percentage / 100;\n    \n    // Different calculation based on variable type\n    switch (variable) {\n      case \"gasolinePrice\":\n        return fuelPrices.gasolinePrice * modificationRatio;\n      case \"dieselPrice\":\n        return fuelPrices.dieselPrice * modificationRatio;\n      case \"cngPrice\":\n        return fuelPrices.cngPrice * modificationRatio;\n      case \"lightDutyCost\":\n      case \"mediumDutyCost\":\n      case \"heavyDutyCost\":\n      case \"annualMiles\":\n        // For vehicle costs and annual miles, we just return the ratio\n        // The calculation logic in calculateModifiedResult will handle these appropriately\n        return modificationRatio;\n      default:\n        return 1.0; // Default to no change\n    }\n  };\n\n  // Simulate the modified result\n  // In a real implementation, this would call the actual calculation functions\n  const calculateModifiedResult = (variable: SensitivityVariable, modifiedValue: number) => {\n    // This is a simplified model but with corrected business logic\n    // A comprehensive implementation would need to update inputs and recalculate completely\n    \n    let basePayback = results?.paybackPeriod || 0;\n    let baseRoi = results?.roi || 0;\n    let baseNetCashFlow = results?.netCashFlow || 0;\n    \n    // Effects vary by variable type based on business logic\n    let paybackFactor = 1.0;\n    let roiFactor = 1.0;\n    let cashFlowFactor = 1.0;\n    \n    // Calculate the ratio for proper scaling\n    let ratio = 1.0;\n\n    switch (variable) {\n      case \"gasolinePrice\":\n        // Higher gas price improves CNG financials (shorter payback, higher ROI, better cash flow)\n        ratio = modifiedValue / fuelPrices.gasolinePrice;\n        // Payback period is inversely proportional - higher gas prices = shorter payback\n        paybackFactor = 1 / ratio;\n        // ROI and cash flow are directly proportional\n        roiFactor = ratio; \n        cashFlowFactor = ratio;\n        break;\n        \n      case \"dieselPrice\":\n        // Higher diesel price improves CNG financials (shorter payback, higher ROI, better cash flow)\n        ratio = modifiedValue / fuelPrices.dieselPrice;\n        // Payback period is inversely proportional\n        paybackFactor = 1 / ratio;\n        // ROI and cash flow are directly proportional\n        roiFactor = ratio;\n        cashFlowFactor = ratio;\n        break;\n        \n      case \"cngPrice\":\n        // Higher CNG price worsens financials (longer payback, lower ROI, worse cash flow)\n        ratio = modifiedValue / fuelPrices.cngPrice;\n        // Payback period is directly proportional - higher CNG prices = longer payback\n        paybackFactor = ratio;\n        // ROI and cash flow are inversely proportional\n        roiFactor = 1 / ratio;\n        cashFlowFactor = 1 / ratio;\n        break;\n        \n      case \"lightDutyCost\":\n      case \"mediumDutyCost\":\n      case \"heavyDutyCost\":\n        // Higher vehicle costs worsen financials (longer payback, lower ROI, worse cash flow)\n        ratio = modifiedValue; // Already a ratio in this case (percentage change)\n        // Payback period is directly proportional - higher costs = longer payback\n        paybackFactor = ratio;\n        // ROI and cash flow are inversely proportional\n        roiFactor = 1 / ratio;\n        cashFlowFactor = 1 / ratio;\n        break;\n        \n      case \"annualMiles\":\n        // More miles driven improves financials (shorter payback, higher ROI, better cash flow)\n        ratio = modifiedValue; // Already a ratio in this case\n        // Payback period is inversely proportional - more miles = more savings = shorter payback\n        paybackFactor = 1 / ratio;\n        // ROI and cash flow are directly proportional\n        roiFactor = ratio;\n        cashFlowFactor = ratio;\n        break;\n        \n      default:\n        // Shouldn't reach here, but keep as fallback\n        paybackFactor = 1.0;\n        roiFactor = 1.0;\n        cashFlowFactor = 1.0;\n    }\n    \n    return {\n      paybackPeriod: Math.max(0.5, basePayback * paybackFactor),\n      roi: Math.max(0, baseRoi * roiFactor),\n      netCashFlow: baseNetCashFlow * cashFlowFactor\n    };\n  };\n\n  // Format currency\n  const formatCurrency = (value: number) => {\n    return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  // Format for chart tooltips\n  const formatTooltipValue = (value: number, name: string) => {\n    if (name === \"payback\") {\n      return formatPaybackPeriod(value);\n    } else if (name === \"roi\") {\n      return `${Math.round(value)}%`;\n    } else if (name === \"netCashFlow\") {\n      return formatCurrency(value);\n    } else if (name === \"netCashFlowScaled\") {\n      // Convert scaled value back to original for display\n      return formatCurrency(value * 10000);\n    }\n    return value;\n  };\n  \n  // Get the calculated values at current variation\n  const getCurrentValueForVariable = () => {\n    if (!results) return null;\n    \n    // For exact calculation at the current variation percentage\n    if (variationPercentage !== 0) {\n      // Calculate the exact modified value and result for the current percentage\n      const modifiedValue = calculateModifiedValue(selectedVariable, variationPercentage);\n      const result = calculateModifiedResult(selectedVariable, modifiedValue);\n      \n      return {\n        payback: formatPaybackPeriod(result.paybackPeriod),\n        roi: Math.round(result.roi) + \"%\",\n        netCashFlow: formatCurrency(result.netCashFlow)\n      };\n    }\n    \n    // For baseline (0% variation), use the original results\n    return {\n      payback: formatPaybackPeriod(results.paybackPeriod),\n      roi: Math.round(results.roi) + \"%\",\n      netCashFlow: formatCurrency(results.netCashFlow)\n    };\n  }\n  \n  // State to store impact values\n  const [variationImpact, setVariationImpact] = useState<{ payback: string; roi: string; netCashFlow: string } | null>(null);\n  \n  // Update impact values when variables change\n  useEffect(() => {\n    if (!results) return;\n    setVariationImpact(getCurrentValueForVariable());\n  }, [variationPercentage, selectedVariable, results, fuelPrices, vehicleParameters, stationConfig]);\n\n  return (\n    <Card className=\"bg-white rounded-lg shadow mb-6 sensitivity-analysis\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">\n          Sensitivity Analysis\n          <MetricInfoTooltip\n            title=\"Sensitivity Analysis\"\n            description=\"This analysis allows you to visualize how changes in key variables affect your financial outcomes. Adjust the slider to see how modifications to the selected variable impact payback period, ROI, and net cash flow.\"\n            calculation=\"The chart plots how payback period (left axis) and ROI/cash flow (right axis) change when the selected variable is adjusted up or down by a percentage.\"\n            affectingVariables={[\n              \"Selected variable (fuel prices, vehicle costs, or annual mileage)\",\n              \"Baseline project configuration\",\n              \"Time horizon for analysis\"\n            ]}\n            simpleDescription=\"See how changes to key variables affect your financial results.\"\n          />\n        </h2>\n        \n        {results ? (\n          <>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              {/* Variable Selection */}\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Variable Selection</h3>\n                <div className=\"mb-4\">\n                  <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Variable</Label>\n                  <Select \n                    value={selectedVariable} \n                    onValueChange={(value) => setSelectedVariable(value as SensitivityVariable)}\n                  >\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Select variable\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gasolinePrice\">Gasoline Price ($/gallon)</SelectItem>\n                      <SelectItem value=\"dieselPrice\">Diesel Price ($/gallon)</SelectItem>\n                      <SelectItem value=\"cngPrice\">CNG Price ($/GGE)</SelectItem>\n                      <SelectItem value=\"lightDutyCost\">Light Duty Vehicle Cost</SelectItem>\n                      <SelectItem value=\"mediumDutyCost\">Medium Duty Vehicle Cost</SelectItem>\n                      <SelectItem value=\"heavyDutyCost\">Heavy Duty Vehicle Cost</SelectItem>\n                      <SelectItem value=\"annualMiles\">Annual Miles Driven</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {/* Variable Slider */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Label className=\"block text-sm font-medium text-gray-700\">Variation (%)</Label>\n                    <span className=\"text-sm font-medium\">{variationPercentage > 0 ? '+' : ''}{variationPercentage}%</span>\n                  </div>\n                  <Slider\n                    value={[variationPercentage]}\n                    min={variableConfig[selectedVariable].min}\n                    max={variableConfig[selectedVariable].max}\n                    step={variableConfig[selectedVariable].step}\n                    onValueChange={(values) => {\n                      const newPercentage = values[0];\n                      setVariationPercentage(newPercentage);\n                      \n                      // Immediately update the impact values for responsive UI\n                      if (results) {\n                        const modifiedValue = calculateModifiedValue(selectedVariable, newPercentage);\n                        const result = calculateModifiedResult(selectedVariable, modifiedValue);\n                        setVariationImpact({\n                          payback: formatPaybackPeriod(result.paybackPeriod),\n                          roi: Math.round(result.roi) + \"%\",\n                          netCashFlow: formatCurrency(result.netCashFlow)\n                        });\n                      }\n                    }}\n                    className=\"mb-2\"\n                  />\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>{variableConfig[selectedVariable].min}%</span>\n                    <span>0%</span>\n                    <span>+{variableConfig[selectedVariable].max}%</span>\n                  </div>\n                </div>\n                \n                {/* Base Value Display */}\n                <div className=\"mt-6\">\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Current Base Values</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">Payback Period</span>\n                      <span className=\"text-xs font-medium\">{formatPaybackPeriod(results.paybackPeriod)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">{timeHorizon}-Year ROI</span>\n                      <span className=\"text-xs font-medium\">{Math.round(results.roi)}%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">Net Cash Flow</span>\n                      <span className=\"text-xs font-medium\">{formatCurrency(results.netCashFlow)}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Sensitivity Chart - Combined Metrics */}\n              <div className=\"bg-gray-50 p-4 rounded-lg col-span-1 md:col-span-2\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <h3 className=\"text-sm font-medium text-gray-700\">Sensitivity Impact</h3>\n                </div>\n                \n                <div className=\"h-72\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={sensitivityData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"label\" />\n                      <YAxis \n                        yAxisId=\"payback\"\n                        label={{ value: 'Payback (Years)', angle: -90, position: 'insideLeft' }} \n                        domain={hideNegativeValues ? [0, 'dataMax'] : ['auto', 'auto']}\n                      />\n                      <YAxis \n                        yAxisId=\"roi\"\n                        orientation=\"right\"\n                        label={{ value: 'ROI & Cash Flow', angle: 90, position: 'insideRight' }} \n                        domain={hideNegativeValues ? [0, 'dataMax'] : ['auto', 'auto']}\n                        tickFormatter={(value) => `${value}%`}\n                      />\n                      <RechartsTooltip formatter={formatTooltipValue} />\n                      <Legend />\n                      \n                      {/* Payback Line */}\n                      <Line \n                        yAxisId=\"payback\"\n                        type=\"monotone\" \n                        dataKey=\"payback\" \n                        name=\"Payback Period\" \n                        stroke=\"#3b82f6\" \n                        strokeWidth={2}\n                        dot={{ r: 3 }}\n                        activeDot={{ r: 6 }} \n                      />\n                      \n                      {/* ROI Line */}\n                      <Line \n                        yAxisId=\"roi\"\n                        type=\"monotone\" \n                        dataKey=\"roi\" \n                        name=\"ROI %\" \n                        stroke=\"#10b981\" \n                        strokeWidth={2}\n                        dot={{ r: 3 }}\n                        activeDot={{ r: 6 }} \n                      />\n                      \n                      {/* Cash Flow Line - scaled to fit on ROI axis */}\n                      <Line \n                        yAxisId=\"roi\"\n                        type=\"monotone\" \n                        dataKey=\"netCashFlowScaled\" \n                        name=\"Cash Flow (scaled)\" \n                        stroke=\"#f97316\" \n                        strokeWidth={2}\n                        dot={{ r: 3 }}\n                        activeDot={{ r: 6 }}\n                      />\n                      \n                      <ReferenceLine \n                        yAxisId=\"payback\"\n                        x={variationPercentage > 0 ? `+${variationPercentage}%` : `${variationPercentage}%`} \n                        stroke=\"red\" \n                        strokeDasharray=\"3 3\" \n                        label={{ value: \"Selected\", position: \"top\", fill: \"red\", fontSize: 10 }}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n                \n                <div className=\"flex justify-center mt-2 text-xs text-gray-500\">\n                  <div className=\"flex items-center mr-4\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-1\"></div>\n                    <span>Payback Period</span>\n                  </div>\n                  <div className=\"flex items-center mr-4\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full mr-1\"></div>\n                    <span>ROI %</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-3 h-3 bg-orange-500 rounded-full mr-1\"></div>\n                    <span>Cash Flow (scaled)</span>\n                  </div>\n                </div>\n                \n                {/* Impact Values Display */}\n                {variationImpact && variationPercentage !== 0 && (\n                  <div className=\"mt-4 bg-blue-50 p-4 rounded-md border border-blue-100\">\n                    <h3 className=\"text-sm font-medium text-blue-800 mb-2\">\n                      Impact at {variationPercentage > 0 ? '+' : ''}{variationPercentage}% {variableConfig[selectedVariable].label}\n                    </h3>\n                    <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                      <div>\n                        <div className=\"text-gray-600\">Payback Period</div>\n                        <div className=\"font-medium text-blue-600\">{variationImpact.payback}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-600\">{timeHorizon}-Year ROI</div>\n                        <div className=\"font-medium text-green-600\">{variationImpact.roi}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-600\">Net Cash Flow</div>\n                        <div className=\"font-medium text-purple-600\">{variationImpact.netCashFlow}</div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"mt-4 text-xs text-gray-500 leading-relaxed\">\n                  <p>This analysis shows how changes in {variableConfig[selectedVariable].label} affect your financial outcomes. The current position (0%) represents your baseline scenario.</p>\n                  <p>Drag the slider to see how different percentage variations impact the key metrics.</p>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-center py-10\">\n            <p className=\"text-gray-500\">Complete your fleet configuration to view sensitivity analysis.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":22162},"client/src/components/cng-calculator/SidePanel.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronDown, RefreshCw } from \"lucide-react\";\nimport VehicleParameters from \"./VehicleParameters\";\nimport StationConfiguration from \"./StationConfiguration\";\nimport FuelPrices from \"./FuelPrices\";\nimport GlobalSettings from \"./GlobalSettings\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\n\nexport default function SidePanel() {\n  \n  const [openSections, setOpenSections] = useState({\n    globalSettings: false,\n    vehicleParams: false,\n    stationConfig: false,\n    fuelPrices: false,\n  });\n\n  const toggleSection = (section: keyof typeof openSections) => {\n    setOpenSections((prev) => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  return (\n    <div className=\"w-full h-full bg-white shadow-lg overflow-y-auto dark-mode-transition dark:bg-gray-800\">\n      {/* Side Panel Header */}\n      <div className=\"p-4 bg-blue-800 text-white dark:bg-blue-900\">\n        <h1 className=\"text-xl font-bold\">CNG Fleet Calculator</h1>\n        <p className=\"text-sm text-blue-100 mt-1\">Optimize your fleet conversion strategy</p>\n      </div>\n\n      {/* Collapsible Sections */}\n      <div className=\"p-4 space-y-4\">\n        {/* Global Settings Section */}\n        <div className=\"mb-4\">\n          <button\n            type=\"button\"\n            className=\"flex items-center justify-between w-full px-4 py-2 text-left text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:text-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark-mode-transition\"\n            onClick={() => toggleSection(\"globalSettings\")}\n            aria-expanded={openSections.globalSettings}\n          >\n            <span className=\"font-medium\">Global Settings</span>\n            <ChevronDown\n              className={`w-5 h-5 transition-transform duration-200 ${\n                openSections.globalSettings ? \"rotate-180\" : \"\"\n              }`}\n            />\n          </button>\n          <div\n            className={`mt-2 ${openSections.globalSettings ? \"\" : \"hidden\"}`}\n          >\n            <GlobalSettings />\n          </div>\n        </div>\n\n        {/* Vehicle Parameters Section */}\n        <div className=\"mb-4\">\n          <button\n            type=\"button\"\n            className=\"flex items-center justify-between w-full px-4 py-2 text-left text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:text-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark-mode-transition\"\n            onClick={() => toggleSection(\"vehicleParams\")}\n            aria-expanded={openSections.vehicleParams}\n          >\n            <span className=\"font-medium\">Vehicle Parameters</span>\n            <ChevronDown\n              className={`w-5 h-5 transition-transform duration-200 ${\n                openSections.vehicleParams ? \"rotate-180\" : \"\"\n              }`}\n            />\n          </button>\n          <div\n            className={`mt-2 ${openSections.vehicleParams ? \"\" : \"hidden\"}`}\n          >\n            <VehicleParameters />\n          </div>\n        </div>\n\n        {/* Station Configuration Section */}\n        <div className=\"mb-4\">\n          <button\n            type=\"button\"\n            className=\"flex items-center justify-between w-full px-4 py-2 text-left text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:text-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark-mode-transition\"\n            onClick={() => toggleSection(\"stationConfig\")}\n            aria-expanded={openSections.stationConfig}\n          >\n            <span className=\"font-medium\">Station Configuration</span>\n            <ChevronDown\n              className={`w-5 h-5 transition-transform duration-200 ${\n                openSections.stationConfig ? \"rotate-180\" : \"\"\n              }`}\n            />\n          </button>\n          <div\n            className={`mt-2 ${openSections.stationConfig ? \"\" : \"hidden\"}`}\n          >\n            <StationConfiguration />\n          </div>\n        </div>\n\n        {/* Fuel Prices Section */}\n        <div className=\"mb-4\">\n          <button\n            type=\"button\"\n            className=\"flex items-center justify-between w-full px-4 py-2 text-left text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:text-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark-mode-transition\"\n            onClick={() => toggleSection(\"fuelPrices\")}\n            aria-expanded={openSections.fuelPrices}\n          >\n            <span className=\"font-medium\">Fuel Prices</span>\n            <ChevronDown\n              className={`w-5 h-5 transition-transform duration-200 ${\n                openSections.fuelPrices ? \"rotate-180\" : \"\"\n              }`}\n            />\n          </button>\n          <div className={`mt-2 ${openSections.fuelPrices ? \"\" : \"hidden\"}`}>\n            <FuelPrices />\n          </div>\n        </div>\n\n        {/* Auto-update indicator */}\n        <div className=\"flex items-center justify-center gap-2 p-3 mt-4 bg-gray-100 rounded-lg dark:bg-gray-700 dark-mode-transition\">\n          <RefreshCw size={18} className=\"text-green-600 animate-spin animate-once animate-duration-1000\" />\n          <span className=\"text-sm text-gray-600 dark:text-gray-300\">Calculations update automatically</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5485},"client/src/components/cng-calculator/StationConfiguration.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { calculateStationCost } from \"@/lib/calculator\";\n\nexport default function StationConfiguration() {\n  const { \n    stationConfig, \n    updateStationConfig,\n    vehicleParameters,\n    vehicleDistribution\n  } = useCalculator();\n\n  // Determine vehicle counts based on sizing method for display\n  let vehicleCounts: { lightDutyCount: number, mediumDutyCount: number, heavyDutyCount: number };\n  \n  if (stationConfig.sizingMethod === 'peak' && vehicleDistribution) {\n    // Use peak year vehicle counts from deployment strategy\n    let maxLight = 0;\n    let maxMedium = 0;\n    let maxHeavy = 0;\n\n    vehicleDistribution.forEach(year => {\n      maxLight = Math.max(maxLight, year.light || 0);\n      maxMedium = Math.max(maxMedium, year.medium || 0);\n      maxHeavy = Math.max(maxHeavy, year.heavy || 0);\n    });\n\n    vehicleCounts = {\n      lightDutyCount: maxLight,\n      mediumDutyCount: maxMedium,\n      heavyDutyCount: maxHeavy\n    };\n  } else {\n    // Use total vehicle counts (default behavior)\n    vehicleCounts = {\n      lightDutyCount: vehicleParameters.lightDutyCount,\n      mediumDutyCount: vehicleParameters.mediumDutyCount,\n      heavyDutyCount: vehicleParameters.heavyDutyCount\n    };\n  }\n\n  // Calculate annual GGE (Gasoline Gallon Equivalent) consumption for display\n  // Formula: (Annual Miles / (MPG × CNG Efficiency Factor)) × Vehicle Count\n  \n  // CNG efficiency factors (fuel economy reduction)\n  const cngEfficiencyFactors = {\n    light: 0.95,    // 95% efficiency (5% reduction)\n    medium: 0.925,  // 92.5% efficiency (7.5% reduction)  \n    heavy: 0.90     // 90% efficiency (10% reduction)\n  };\n  \n  // Calculate annual GGE per vehicle type\n  const lightAnnualGGE = vehicleParameters.lightDutyAnnualMiles / (vehicleParameters.lightDutyMPG * cngEfficiencyFactors.light);\n  const mediumAnnualGGE = vehicleParameters.mediumDutyAnnualMiles / (vehicleParameters.mediumDutyMPG * cngEfficiencyFactors.medium);\n  const heavyAnnualGGE = vehicleParameters.heavyDutyAnnualMiles / (vehicleParameters.heavyDutyMPG * cngEfficiencyFactors.heavy);\n  \n  // Total annual GGE consumption for the fleet\n  const annualGGE = \n    (vehicleCounts.lightDutyCount * lightAnnualGGE) + \n    (vehicleCounts.mediumDutyCount * mediumAnnualGGE) + \n    (vehicleCounts.heavyDutyCount * heavyAnnualGGE);\n  \n  // Max capacity reference points for annual consumption\n  const maxCapacity = stationConfig.stationType === 'fast' ? 365000 : 292000; // in GGE per year (1000/800 daily × 365)\n  const capacityPercentage = Math.min(Math.round((annualGGE / maxCapacity) * 100), 100);\n  \n  // Get capacity tier for pricing based on annual GGE consumption\n  const getCapacityTier = () => {\n    if (annualGGE < 73000) return 'small';        // < 200 GGE/day equivalent\n    if (annualGGE < 182135) return 'medium';      // 200-499 GGE/day equivalent\n    if (annualGGE < 291635) return 'large';       // 500-799 GGE/day equivalent\n    return 'xlarge';                              // 800+ GGE/day equivalent\n  };\n  \n  // Use centralized station cost calculation\n  const getStationCost = () => {\n    return calculateStationCost(stationConfig, vehicleParameters, vehicleDistribution);\n  };\n\n  return (\n    <div className=\"bg-white rounded-md p-3 space-y-3\">\n      {/* Station Type */}\n      <div>\n        <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Station Type</Label>\n        <RadioGroup \n          className=\"grid grid-cols-2 gap-3\"\n          value={stationConfig.stationType}\n          onValueChange={(value) => updateStationConfig({...stationConfig, stationType: value as 'fast' | 'time'})}\n        >\n          <div className=\"relative\">\n            <RadioGroupItem value=\"fast\" id=\"stationTypeFast\" className=\"absolute opacity-0\" />\n            <Label \n              htmlFor=\"stationTypeFast\" \n              className=\"flex flex-col items-center p-3 bg-gray-50 border rounded-md cursor-pointer hover:bg-blue-50 data-[state=checked]:bg-blue-50 data-[state=checked]:border-blue-500\"\n            >\n              <span className=\"text-sm font-medium\">Fast-Fill</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Quick refueling, higher cost</span>\n            </Label>\n          </div>\n          <div className=\"relative\">\n            <RadioGroupItem value=\"time\" id=\"stationTypeTime\" className=\"absolute opacity-0\" />\n            <Label \n              htmlFor=\"stationTypeTime\" \n              className=\"flex flex-col items-center p-3 bg-gray-50 border rounded-md cursor-pointer hover:bg-blue-50 data-[state=checked]:bg-blue-50 data-[state=checked]:border-blue-500\"\n            >\n              <span className=\"text-sm font-medium\">Time-Fill</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Overnight refueling, lower cost</span>\n            </Label>\n          </div>\n        </RadioGroup>\n      </div>\n      \n      {/* Business Type */}\n      <div className=\"border-t pt-3 mt-3\">\n        <Label className=\"block text-sm font-medium text-gray-700 mb-2\">GAS LDC</Label>\n        <Select \n          value={stationConfig.businessType} \n          onValueChange={(value) => updateStationConfig({...stationConfig, businessType: value as 'aglc' | 'cgc' | 'vng'})}\n        >\n          <SelectTrigger className=\"w-full\">\n            <SelectValue placeholder=\"Select GAS LDC\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"aglc\">AGLC (Atlanta Gas Light Company)</SelectItem>\n            <SelectItem value=\"cgc\">CGC (Chattanooga Gas Company)</SelectItem>\n            <SelectItem value=\"vng\">VNG (Virginia Natural Gas)</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      {/* Station Capacity */}\n      <div className=\"border-t pt-3 mt-3\">\n        <div className=\"flex items-center justify-between\">\n          <Label className=\"block text-sm font-medium text-gray-700\">Station Capacity</Label>\n          <span className=\"text-sm font-medium text-blue-600\">\n            {Math.round(annualGGE).toLocaleString()} GGE/year ({getCapacityTier().toUpperCase()})\n          </span>\n        </div>\n        <Progress value={capacityPercentage} className=\"h-2 mt-2\" />\n        <p className=\"text-xs text-gray-500 mt-1\">\n          {stationConfig.sizingMethod === 'peak' ? \n            `Peak year vehicles: ${vehicleCounts.lightDutyCount} Light, ${vehicleCounts.mediumDutyCount} Medium, ${vehicleCounts.heavyDutyCount} Heavy (w/ CNG efficiency: 95%/92.5%/90%)` :\n            `Total vehicles: ${vehicleCounts.lightDutyCount} Light, ${vehicleCounts.mediumDutyCount} Medium, ${vehicleCounts.heavyDutyCount} Heavy (w/ CNG efficiency: 95%/92.5%/90%)`\n          }\n        </p>\n      </div>\n      \n      {/* Station Sizing Method */}\n      <div className=\"border-t pt-3 mt-3\">\n        <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Station Sizing Method</Label>\n        <RadioGroup \n          className=\"grid grid-cols-1 gap-3\"\n          value={stationConfig.sizingMethod}\n          onValueChange={(value) => updateStationConfig({...stationConfig, sizingMethod: value as 'total' | 'peak'})}\n        >\n          <div className=\"relative\">\n            <RadioGroupItem value=\"total\" id=\"sizingTotal\" className=\"absolute opacity-0\" />\n            <Label \n              htmlFor=\"sizingTotal\" \n              className=\"flex flex-col items-start p-3 bg-gray-50 border rounded-md cursor-pointer hover:bg-blue-50 data-[state=checked]:bg-blue-50 data-[state=checked]:border-blue-500\"\n            >\n              <span className=\"text-sm font-medium\">Total Vehicle Count</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Size station for all {vehicleParameters.lightDutyCount + vehicleParameters.mediumDutyCount + vehicleParameters.heavyDutyCount} vehicles from day one</span>\n            </Label>\n          </div>\n          <div className=\"relative\">\n            <RadioGroupItem value=\"peak\" id=\"sizingPeak\" className=\"absolute opacity-0\" />\n            <Label \n              htmlFor=\"sizingPeak\" \n              className=\"flex flex-col items-start p-3 bg-gray-50 border rounded-md cursor-pointer hover:bg-blue-50 data-[state=checked]:bg-blue-50 data-[state=checked]:border-blue-500\"\n            >\n              <span className=\"text-sm font-medium\">Peak Year Usage</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Size station for peak year: {vehicleCounts.lightDutyCount + vehicleCounts.mediumDutyCount + vehicleCounts.heavyDutyCount} vehicles max</span>\n            </Label>\n          </div>\n        </RadioGroup>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          {stationConfig.sizingMethod === 'total' \n            ? \"Station will be sized for maximum capacity regardless of deployment timeline\" \n            : \"Station will be sized for the peak year of your deployment strategy\"}\n        </p>\n      </div>\n      \n      {/* Turnkey Option */}\n      <div className=\"border-t pt-3 mt-3\">\n        <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Turnkey Option</Label>\n        <RadioGroup \n          className=\"grid grid-cols-2 gap-3\"\n          value={stationConfig.turnkey ? \"yes\" : \"no\"}\n          onValueChange={(value) => updateStationConfig({...stationConfig, turnkey: value === \"yes\"})}\n        >\n          <div className=\"relative\">\n            <RadioGroupItem value=\"yes\" id=\"turnkeyYes\" className=\"absolute opacity-0\" />\n            <Label \n              htmlFor=\"turnkeyYes\" \n              className=\"flex flex-col items-center p-3 bg-gray-50 border rounded-md cursor-pointer hover:bg-blue-50 data-[state=checked]:bg-blue-50 data-[state=checked]:border-blue-500\"\n            >\n              <span className=\"text-sm font-medium\">Yes</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Pay cost upfront</span>\n            </Label>\n          </div>\n          <div className=\"relative\">\n            <RadioGroupItem value=\"no\" id=\"turnkeyNo\" className=\"absolute opacity-0\" />\n            <Label \n              htmlFor=\"turnkeyNo\" \n              className=\"flex flex-col items-center p-3 bg-gray-50 border rounded-md cursor-pointer hover:bg-blue-50 data-[state=checked]:bg-blue-50 data-[state=checked]:border-blue-500\"\n            >\n              <span className=\"text-sm font-medium\">No</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Leveraging LDC investment tariff</span>\n            </Label>\n          </div>\n        </RadioGroup>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          {stationConfig.turnkey \n            ? \"Station cost is paid upfront as a single investment\" \n            : `Station uses LDC investment tariff with monthly fee of ${stationConfig.businessType === 'cgc' ? '1.6%' : '1.5%'} over the analysis period`}\n        </p>\n      </div>\n\n      {/* Cost Estimate */}\n      <div className=\"border-t pt-3 mt-3\">\n        <div className=\"flex items-center justify-between\">\n          <Label className=\"block text-sm font-medium text-gray-700\">Estimated Station Cost</Label>\n          <span className=\"text-sm font-medium text-gray-900\">${getStationCost().toLocaleString()}</span>\n        </div>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          {stationConfig.turnkey \n            ? \"Includes installation and equipment (paid upfront)\" \n            : \"Includes installation and equipment (LDC investment tariff)\"}\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11714},"client/src/components/cng-calculator/StrategyComparison.tsx":{"content":"import { useState } from \"react\";\nimport { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { useComparison } from \"@/contexts/ComparisonContext\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { formatPaybackPeriod } from \"@/lib/utils\";\nimport { \n  AreaChart, \n  Area, \n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend,\n  ResponsiveContainer,\n  ReferenceLine\n} from 'recharts';\nimport { X, Plus, BarChart2, TrendingUp, Zap, Leaf } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function StrategyComparison() {\n  const { results, deploymentStrategy, calculateResults } = useCalculator();\n  const { \n    comparisonItems, \n    addComparisonItem, \n    removeComparisonItem, \n    clearComparisonItems, \n    isInComparison \n  } = useComparison();\n  \n  const [activeTab, setActiveTab] = useState(\"roi\");\n\n  // If there are no items to compare, don't render\n  if (comparisonItems.length === 0) {\n    return null;\n  }\n\n  // Prepare comparison data for ROI chart\n  const prepareROIData = () => {\n    const data = [];\n\n    // Find the max time horizon among all strategies\n    const maxTimeHorizon = Math.max(\n      ...comparisonItems.map(item => item.results.cumulativeSavings.length)\n    );\n\n    for (let i = 0; i < maxTimeHorizon; i++) {\n      const yearData: any = { year: `Year ${i + 1}` };\n      \n      comparisonItems.forEach(item => {\n        // Add ROI data for each strategy\n        if (i < item.results.cumulativeSavings.length) {\n          const netCashFlow = item.results.cumulativeSavings[i] - item.results.cumulativeInvestment[i];\n          yearData[item.strategyName] = netCashFlow;\n        } else {\n          yearData[item.strategyName] = null; // Use null for missing data points\n        }\n      });\n      \n      data.push(yearData);\n    }\n\n    return data;\n  };\n\n  // Prepare comparison data for CO2 emissions\n  const prepareEmissionsData = () => {\n    const data = [];\n\n    // Find the max time horizon among all strategies\n    const maxTimeHorizon = Math.max(\n      ...comparisonItems.map(item => item.results.cumulativeEmissionsSaved.length)\n    );\n\n    for (let i = 0; i < maxTimeHorizon; i++) {\n      const yearData: any = { year: `Year ${i + 1}` };\n      \n      comparisonItems.forEach(item => {\n        // Add emissions data for each strategy (convert to metric tons)\n        if (i < item.results.cumulativeEmissionsSaved.length) {\n          yearData[item.strategyName] = item.results.cumulativeEmissionsSaved[i] / 1000;\n        } else {\n          yearData[item.strategyName] = null; // Use null for missing data points\n        }\n      });\n      \n      data.push(yearData);\n    }\n\n    return data;\n  };\n\n  // Prepare comparison data for investment timeline\n  const prepareInvestmentData = () => {\n    const data = [];\n\n    // Find the max time horizon among all strategies\n    const maxTimeHorizon = Math.max(\n      ...comparisonItems.map(item => item.results.cumulativeInvestment.length)\n    );\n\n    for (let i = 0; i < maxTimeHorizon; i++) {\n      const yearData: any = { year: `Year ${i + 1}` };\n      \n      comparisonItems.forEach(item => {\n        // Add cumulative investment data for each strategy\n        if (i < item.results.cumulativeInvestment.length) {\n          yearData[item.strategyName] = item.results.cumulativeInvestment[i];\n        } else {\n          yearData[item.strategyName] = null; // Use null for missing data points\n        }\n      });\n      \n      data.push(yearData);\n    }\n\n    return data;\n  };\n\n  // Prepare comparison data for savings\n  const prepareSavingsData = () => {\n    const data = [];\n\n    // Find the max time horizon among all strategies\n    const maxTimeHorizon = Math.max(\n      ...comparisonItems.map(item => item.results.cumulativeSavings.length)\n    );\n\n    for (let i = 0; i < maxTimeHorizon; i++) {\n      const yearData: any = { year: `Year ${i + 1}` };\n      \n      comparisonItems.forEach(item => {\n        // Add cumulative savings data for each strategy\n        if (i < item.results.cumulativeSavings.length) {\n          yearData[item.strategyName] = item.results.cumulativeSavings[i];\n        } else {\n          yearData[item.strategyName] = null; // Use null for missing data points\n        }\n      });\n      \n      data.push(yearData);\n    }\n\n    return data;\n  };\n\n  // Generate color for each strategy\n  const getStrategyColor = (index: number) => {\n    const colors = ['#3b82f6', '#22c55e', '#f97316', '#8b5cf6'];\n    return colors[index % colors.length];\n  };\n\n  // Custom tooltip for the charts\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border shadow-sm rounded-md\">\n          <p className=\"text-sm font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <div key={index} className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: entry.color }}\n              ></div>\n              <p className=\"text-xs\">\n                <span className=\"font-medium\">{entry.name}: </span>\n                {activeTab === 'emissions' \n                  ? `${entry.value?.toFixed(1)} metric tons CO₂` \n                  : `$${entry.value?.toLocaleString()}`\n                }\n              </p>\n            </div>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Format Y axis labels\n  const formatYAxis = (value: number) => {\n    if (activeTab === 'emissions') {\n      return `${value} tons`;\n    }\n    \n    if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$${(value / 1000).toFixed(0)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n\n  return (\n    <Card className=\"mt-6 bg-white rounded-lg shadow mb-6\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">Strategy Comparison</h2>\n          <div className=\"flex space-x-2\">\n            {/* Add current strategy button - updated logic */}\n            {results && (deploymentStrategy === 'manual' || !isInComparison(deploymentStrategy)) && comparisonItems.length < 6 && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => addComparisonItem(deploymentStrategy, results)}\n                className=\"flex items-center gap-1\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Add Current</span>\n              </Button>\n            )}\n            \n            {/* Clear all button */}\n            {comparisonItems.length > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={clearComparisonItems}\n                className=\"text-gray-500\"\n              >\n                Clear All\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Strategy badges with improved organization */}\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {comparisonItems.map((item, index) => (\n              <Badge \n                key={item.id} \n                variant=\"outline\" \n                className=\"pl-2 flex items-center gap-1 border-2 relative\"\n                style={{ borderColor: getStrategyColor(index) }}\n              >\n                <span \n                  style={{ color: getStrategyColor(index) }}\n                  className=\"text-sm font-medium\"\n                >\n                  {item.strategyName}\n                </span>\n                {item.customName && (\n                  <span className=\"text-xs text-gray-500\">\n                    ({item.strategy})\n                  </span>\n                )}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"h-5 w-5 ml-1 text-gray-400 hover:text-gray-700\"\n                  onClick={() => removeComparisonItem(item.id)}\n                >\n                  <X className=\"h-3 w-3\" />\n                </Button>\n              </Badge>\n            ))}\n          </div>\n          \n          {comparisonItems.length > 0 && (\n            <div className=\"text-xs text-gray-500 flex items-center justify-between\">\n              <span>Comparing {comparisonItems.length} strategies (max 6)</span>\n              <span className=\"text-blue-600\">\n                Hover over chart lines to see detailed metrics\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Comparison Tabs */}\n        <Tabs defaultValue=\"roi\" value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid grid-cols-4 mb-4\">\n            <TabsTrigger value=\"roi\" className=\"flex items-center gap-1\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Net Cash Flow</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"investment\" className=\"flex items-center gap-1\">\n              <BarChart2 className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Investment</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"savings\" className=\"flex items-center gap-1\">\n              <Zap className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Savings</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"emissions\" className=\"flex items-center gap-1\">\n              <Leaf className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Emissions</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* ROI Tab */}\n          <TabsContent value=\"roi\" className=\"pt-2\">\n            <div className=\"h-64 sm:h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart\n                  data={prepareROIData()}\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis dataKey=\"year\" />\n                  <YAxis tickFormatter={formatYAxis} />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                  {comparisonItems.map((item, index) => (\n                    <Line\n                      key={item.id}\n                      type=\"monotone\"\n                      dataKey={item.strategyName}\n                      stroke={getStrategyColor(index)}\n                      activeDot={{ r: 6 }}\n                      strokeWidth={2}\n                    />\n                  ))}\n                  <ReferenceLine y={0} stroke=\"#000\" strokeDasharray=\"3 3\" />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n            <p className=\"text-sm text-gray-500 mt-4\">\n              Comparison of cumulative net cash flow (total savings minus total investment) over time for different strategies. \n              The point where a line crosses above zero represents the payback period.\n            </p>\n          </TabsContent>\n\n          {/* Investment Tab */}\n          <TabsContent value=\"investment\" className=\"pt-2\">\n            <div className=\"h-64 sm:h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart\n                  data={prepareInvestmentData()}\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis dataKey=\"year\" />\n                  <YAxis tickFormatter={formatYAxis} />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                  {comparisonItems.map((item, index) => (\n                    <Area\n                      key={item.id}\n                      type=\"monotone\"\n                      dataKey={item.strategyName}\n                      stroke={getStrategyColor(index)}\n                      fill={`${getStrategyColor(index)}33`}\n                      strokeWidth={2}\n                    />\n                  ))}\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n            <p className=\"text-sm text-gray-500 mt-4\">\n              Comparison of cumulative investment over time for different strategies.\n              Immediate deployment requires higher upfront investment, while phased approaches spread costs over time.\n            </p>\n          </TabsContent>\n\n          {/* Savings Tab */}\n          <TabsContent value=\"savings\" className=\"pt-2\">\n            <div className=\"h-64 sm:h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart\n                  data={prepareSavingsData()}\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis dataKey=\"year\" />\n                  <YAxis tickFormatter={formatYAxis} />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                  {comparisonItems.map((item, index) => (\n                    <Area\n                      key={item.id}\n                      type=\"monotone\"\n                      dataKey={item.strategyName}\n                      stroke={getStrategyColor(index)}\n                      fill={`${getStrategyColor(index)}33`}\n                      strokeWidth={2}\n                    />\n                  ))}\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n            <p className=\"text-sm text-gray-500 mt-4\">\n              Comparison of cumulative savings over time for different strategies.\n              Strategies with more vehicles deployed earlier will accumulate savings faster.\n            </p>\n          </TabsContent>\n\n          {/* Emissions Tab */}\n          <TabsContent value=\"emissions\" className=\"pt-2\">\n            <div className=\"h-64 sm:h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart\n                  data={prepareEmissionsData()}\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n                  <XAxis dataKey=\"year\" />\n                  <YAxis tickFormatter={formatYAxis} />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                  {comparisonItems.map((item, index) => (\n                    <Area\n                      key={item.id}\n                      type=\"monotone\"\n                      dataKey={item.strategyName}\n                      stroke={getStrategyColor(index)}\n                      fill={`${getStrategyColor(index)}33`}\n                      strokeWidth={2}\n                    />\n                  ))}\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n            <p className=\"text-sm text-gray-500 mt-4\">\n              Comparison of cumulative CO₂ emissions saved (in metric tons) over time for different strategies.\n              Strategies with more vehicles deployed earlier will have greater environmental benefits.\n            </p>\n          </TabsContent>\n        </Tabs>\n\n        {/* Comparison Summary */}\n        <div className=\"mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {comparisonItems.map((item, index) => (\n            <div \n              key={item.id} \n              className=\"bg-gray-50 p-4 rounded-lg border-t-4\" \n              style={{ borderColor: getStrategyColor(index) }}\n            >\n              <div className=\"text-sm font-medium mb-2\" style={{ color: getStrategyColor(index) }}>\n                {item.strategyName}\n              </div>\n              <div className=\"space-y-2 text-xs\">\n                {/* Vehicle Counts - First show total counts */}\n                <div className=\"border-b border-gray-200 pb-1 mb-1\">\n                  <div className=\"font-medium text-gray-700 mb-1\">Vehicle Counts:</div>\n                  <div className=\"grid grid-cols-3 gap-1\">\n                    <div>\n                      <span className=\"text-gray-500\">Light:</span>\n                      <span className=\"font-medium ml-1\">\n                        {item.results.vehicleDistribution.reduce((sum, year) => sum + year.light, 0)}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Med:</span>\n                      <span className=\"font-medium ml-1\">\n                        {item.results.vehicleDistribution.reduce((sum, year) => sum + year.medium, 0)}\n                      </span>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Heavy:</span>\n                      <span className=\"font-medium ml-1\">\n                        {item.results.vehicleDistribution.reduce((sum, year) => sum + year.heavy, 0)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Strategy-specific parameters if available */}\n                {item.strategy === 'phased' && (\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-gray-500\">Phased:</span>\n                    <span className=\"font-medium\">25% per year</span>\n                  </div>\n                )}\n                {item.strategy === 'aggressive' && (\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-gray-500\">Aggressive:</span>\n                    <span className=\"font-medium\">50% year 1</span>\n                  </div>\n                )}\n                {item.strategy === 'deferred' && (\n                  <div className=\"flex justify-between mb-1\">\n                    <span className=\"text-gray-500\">Deferred:</span>\n                    <span className=\"font-medium\">Starts year 3</span>\n                  </div>\n                )}\n\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Payback:</span>\n                  <span className=\"font-medium\">{formatPaybackPeriod(item.results.paybackPeriod)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">ROI:</span>\n                  <span className=\"font-medium\">{item.results.roi.toFixed(1)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">Total Investment:</span>\n                  <span className=\"font-medium\">${item.results.totalInvestment.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-500\">CO₂ Saved:</span>\n                  <span className=\"font-medium\">{(item.results.totalEmissionsSaved / 1000).toFixed(1)} tons</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":19484},"client/src/components/cng-calculator/TimeHorizonSelector.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Info } from \"lucide-react\";\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport default function TimeHorizonSelector() {\n  const { timeHorizon, updateTimeHorizon } = useCalculator();\n  \n  return (\n    <div className=\"bg-white rounded-md p-3\">\n      <div className=\"mb-3\">\n        <div className=\"flex justify-between items-center mb-1\">\n          <Label className=\"text-sm font-medium text-gray-700\">Time Horizon</Label>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div className=\"text-gray-500 cursor-help\">\n                  <Info size={16} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Select the analysis period (10 or 15 years) for your fleet conversion</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n        <Select \n          value={timeHorizon.toString()} \n          onValueChange={(value) => updateTimeHorizon(parseInt(value))}\n        >\n          <SelectTrigger className=\"w-full text-sm\">\n            <SelectValue placeholder=\"Select time horizon\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"10\">10 Years</SelectItem>\n            <SelectItem value=\"15\">15 Years</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n}","size_bytes":1683},"client/src/components/cng-calculator/TooltipToggle.tsx":{"content":"import { HelpCircle } from \"lucide-react\";\nimport { useTooltips } from \"@/contexts/TooltipContext\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport function TooltipToggle() {\n  const { showDetailedTooltips, toggleDetailedTooltips } = useTooltips();\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleDetailedTooltips}\n            className={showDetailedTooltips \n              ? \"bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300\" \n              : \"dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-gray-100\"}\n          >\n            <HelpCircle className=\"h-5 w-5\" />\n            <span className=\"sr-only\">\n              {showDetailedTooltips ? \"Disable detailed tooltips\" : \"Enable detailed tooltips\"}\n            </span>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent side=\"bottom\">\n          <p>{showDetailedTooltips ? \"Disable detailed tooltips\" : \"Enable detailed tooltips\"}</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","size_bytes":1247},"client/src/components/cng-calculator/VehicleParameters.tsx":{"content":"import { useCalculator } from \"@/contexts/CalculatorContext\";\nimport { Info, DollarSign, Clock, Gauge, Navigation } from \"lucide-react\";\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function VehicleParameters() {\n  const { \n    vehicleParameters, \n    updateVehicleParameters\n  } = useCalculator();\n\n  // Format cost input with dollar sign and commas\n  const formatCost = (cost: number): string => {\n    return cost.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  // Parse cost input removing non-numeric characters\n  const parseCost = (value: string): number => {\n    return parseInt(value.replace(/[^0-9]/g, \"\")) || 0;\n  };\n\n  // Parse number input (for MPG and Lifespan)\n  const parseNumber = (value: string): number => {\n    return parseInt(value) || 0;\n  };\n\n  return (\n    <div className=\"bg-white rounded-md p-3 space-y-3\">\n      <Tabs defaultValue=\"costs\">\n        <TabsList className=\"w-full mb-3\">\n          <TabsTrigger value=\"costs\" className=\"flex-1\">Vehicle Costs</TabsTrigger>\n          <TabsTrigger value=\"specs\" className=\"flex-1\">Vehicle Specs</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"costs\">\n          <div className=\"space-y-3\">\n            <div className=\"mb-3\">\n              <h3 className=\"text-sm font-medium text-gray-700\">Vehicle Costs</h3>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Adjust the default cost for converting each type of vehicle to CNG\n              </p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                Incremental Light Duty Vehicle Cost\n              </label>\n              <div className=\"flex items-center\">\n                <div className=\"relative flex-1\">\n                  <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <input\n                    type=\"text\"\n                    className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-8\"\n                    value={formatCost(vehicleParameters.lightDutyCost)}\n                    onChange={(e) => updateVehicleParameters({ \n                      ...vehicleParameters, \n                      lightDutyCost: parseCost(e.target.value)\n                    })}\n                  />\n                </div>\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div className=\"ml-2 text-gray-500 cursor-help\">\n                        <Info size={18} />\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Enter the incremental cost to convert each light duty vehicle to CNG</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                Incremental Medium Duty Vehicle Cost\n              </label>\n              <div className=\"flex items-center\">\n                <div className=\"relative flex-1\">\n                  <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <input\n                    type=\"text\"\n                    className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-8\"\n                    value={formatCost(vehicleParameters.mediumDutyCost)}\n                    onChange={(e) => updateVehicleParameters({ \n                      ...vehicleParameters, \n                      mediumDutyCost: parseCost(e.target.value) \n                    })}\n                  />\n                </div>\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div className=\"ml-2 text-gray-500 cursor-help\">\n                        <Info size={18} />\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Enter the incremental cost to convert each medium duty vehicle to CNG</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                Incremental Heavy Duty Vehicle Cost\n              </label>\n              <div className=\"flex items-center\">\n                <div className=\"relative flex-1\">\n                  <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                    <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                  </div>\n                  <input\n                    type=\"text\"\n                    className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-8\"\n                    value={formatCost(vehicleParameters.heavyDutyCost)}\n                    onChange={(e) => updateVehicleParameters({ \n                      ...vehicleParameters, \n                      heavyDutyCost: parseCost(e.target.value) \n                    })}\n                  />\n                </div>\n                <TooltipProvider>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <div className=\"ml-2 text-gray-500 cursor-help\">\n                        <Info size={18} />\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>Enter the incremental cost to convert each heavy duty vehicle to CNG</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </TooltipProvider>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"specs\">\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Vehicle Lifespan (Years)</h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Light Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Clock className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"30\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.lightDutyLifespan}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          lightDutyLifespan: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Medium Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Clock className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"30\" \n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.mediumDutyLifespan}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          mediumDutyLifespan: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Heavy Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Clock className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"30\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.heavyDutyLifespan}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          heavyDutyLifespan: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                Average lifespan affects replacement timing and payback period considerations\n              </p>\n            </div>\n            \n            <Separator />\n            \n            <div>\n              <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Fuel Efficiency (Miles Per Gallon)</h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Light Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Gauge className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"50\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.lightDutyMPG}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          lightDutyMPG: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Medium Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Gauge className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"30\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.mediumDutyMPG}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          mediumDutyMPG: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Heavy Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Gauge className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"20\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.heavyDutyMPG}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          heavyDutyMPG: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                Fuel efficiency directly impacts cost savings and emissions reductions\n              </p>\n            </div>\n            \n            <Separator />\n            \n            <div>\n              <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Annual Miles Driven</h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Light Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Navigation className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1000\"\n                        max=\"100000\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.lightDutyAnnualMiles}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          lightDutyAnnualMiles: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Medium Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Navigation className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1000\"\n                        max=\"150000\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.mediumDutyAnnualMiles}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          mediumDutyAnnualMiles: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Heavy Duty\n                  </label>\n                  <div className=\"flex items-center\">\n                    <div className=\"relative flex-1\">\n                      <div className=\"absolute inset-y-0 left-0 flex items-center pl-2 pointer-events-none\">\n                        <Navigation className=\"h-3.5 w-3.5 text-gray-500\" />\n                      </div>\n                      <input\n                        type=\"number\"\n                        min=\"1000\"\n                        max=\"200000\"\n                        className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 text-sm pl-7 py-1\"\n                        value={vehicleParameters.heavyDutyAnnualMiles}\n                        onChange={(e) => updateVehicleParameters({ \n                          ...vehicleParameters, \n                          heavyDutyAnnualMiles: parseNumber(e.target.value)\n                        })}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                Annual mileage directly affects fuel savings and emissions calculations\n              </p>\n            </div>\n            \n            <Separator />\n            \n            <div>\n              <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Fuel Type</h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Light Duty\n                  </label>\n                  <Select\n                    value={vehicleParameters.lightDutyFuelType}\n                    onValueChange={(value: 'gasoline' | 'diesel') => updateVehicleParameters({\n                      ...vehicleParameters,\n                      lightDutyFuelType: value\n                    })}\n                  >\n                    <SelectTrigger className=\"h-8 text-sm\">\n                      <SelectValue placeholder=\"Select fuel type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gasoline\">Gasoline</SelectItem>\n                      <SelectItem value=\"diesel\">Diesel</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Medium Duty\n                  </label>\n                  <Select\n                    value={vehicleParameters.mediumDutyFuelType}\n                    onValueChange={(value: 'gasoline' | 'diesel') => updateVehicleParameters({\n                      ...vehicleParameters,\n                      mediumDutyFuelType: value\n                    })}\n                  >\n                    <SelectTrigger className=\"h-8 text-sm\">\n                      <SelectValue placeholder=\"Select fuel type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gasoline\">Gasoline</SelectItem>\n                      <SelectItem value=\"diesel\">Diesel</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                    Heavy Duty\n                  </label>\n                  <Select\n                    value={vehicleParameters.heavyDutyFuelType}\n                    onValueChange={(value: 'gasoline' | 'diesel') => updateVehicleParameters({\n                      ...vehicleParameters,\n                      heavyDutyFuelType: value\n                    })}\n                  >\n                    <SelectTrigger className=\"h-8 text-sm\">\n                      <SelectValue placeholder=\"Select fuel type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gasoline\">Gasoline</SelectItem>\n                      <SelectItem value=\"diesel\">Diesel</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                Fuel type affects pricing calculations and maintenance savings (diesel vehicles receive additional maintenance savings)\n              </p>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":21635},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"20rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"22rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145}},"version":1}